{
  "type": "grammar",
  "rules": [
    {
      "type": "rule",
      "identifier": "start",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "program",
              "expression": {
                "type": "rule_ref",
                "identifier": "Program"
              }
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            }
          ]
        },
        "code": " return program; "
      }
    },
    {
      "type": "rule",
      "identifier": "SourceCharacter",
      "description": {
        "type": "Any"
      }
    },
    {
      "type": "rule",
      "identifier": "LineTerminatorSequence",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "Literal",
            "Literal": "\n",
            "ignoreCase": false
          },
          {
            "type": "Literal",
            "Literal": "\r\n",
            "ignoreCase": false
          },
          {
            "type": "Literal",
            "Literal": "\r",
            "ignoreCase": false
          },
          {
            "type": "Literal",
            "Literal": " ",
            "ignoreCase": false
          },
          {
            "type": "Literal",
            "Literal": " ",
            "ignoreCase": false
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "Comment",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "rule_ref",
            "identifier": "MultiLineComment"
          },
          {
            "type": "rule_ref",
            "identifier": "SingleLineComment"
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "MultiLineComment",
      "description": {
        "type": "Sequence",
        "expressions": [
          {
            "type": "Literal",
            "Literal": "/*",
            "ignoreCase": false
          },
          {
            "type": "ZeroOrMore",
            "expression": {
              "type": "Sequence",
              "expressions": [
                {
                  "type": "SimpleNot",
                  "expression": {
                    "type": "Literal",
                    "Literal": "*/",
                    "ignoreCase": false
                  }
                },
                {
                  "type": "rule_ref",
                  "identifier": "SourceCharacter"
                }
              ]
            }
          },
          {
            "type": "Literal",
            "Literal": "*/",
            "ignoreCase": false
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "MultiLineCommentNoLineTerminator",
      "description": {
        "type": "Sequence",
        "expressions": [
          {
            "type": "Literal",
            "Literal": "/*",
            "ignoreCase": false
          },
          {
            "type": "ZeroOrMore",
            "expression": {
              "type": "Sequence",
              "expressions": [
                {
                  "type": "SimpleNot",
                  "expression": {
                    "type": "Choice",
                    "expressions": [
                      {
                        "type": "Literal",
                        "Literal": "*/",
                        "ignoreCase": false
                      },
                      {
                        "type": "Class",
                        "inverted": false,
                        "ignoreCase": false,
                        "characters": [
                          "\n",
                          "\r",
                          " ",
                          " "
                        ],
                        "rawText": "[\"\\n\"\"\\r\"\"\\u2028\"\"\\u2029\"]"
                      }
                    ]
                  }
                },
                {
                  "type": "rule_ref",
                  "identifier": "SourceCharacter"
                }
              ]
            }
          },
          {
            "type": "Literal",
            "Literal": "*/",
            "ignoreCase": false
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "SingleLineComment",
      "description": {
        "type": "Sequence",
        "expressions": [
          {
            "type": "Literal",
            "Literal": "//",
            "ignoreCase": false
          },
          {
            "type": "ZeroOrMore",
            "expression": {
              "type": "Sequence",
              "expressions": [
                {
                  "type": "SimpleNot",
                  "expression": {
                    "type": "Class",
                    "inverted": false,
                    "ignoreCase": false,
                    "characters": [
                      "\n",
                      "\r",
                      " ",
                      " "
                    ],
                    "rawText": "[\"\\n\"\"\\r\"\"\\u2028\"\"\\u2029\"]"
                  }
                },
                {
                  "type": "rule_ref",
                  "identifier": "SourceCharacter"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "Identifier",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "SimpleNot",
              "expression": {
                "type": "rule_ref",
                "identifier": "ReservedWord"
              }
            },
            {
              "type": "labeled",
              "label": "name",
              "expression": {
                "type": "rule_ref",
                "identifier": "IdentifierName"
              }
            }
          ]
        },
        "code": " return name; "
      }
    },
    {
      "type": "rule",
      "identifier": "IdentifierName",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "start",
              "expression": {
                "type": "rule_ref",
                "identifier": "IdentifierStart"
              }
            },
            {
              "type": "labeled",
              "label": "parts",
              "expression": {
                "type": "ZeroOrMore",
                "expression": {
                  "type": "rule_ref",
                  "identifier": "IdentifierPart"
                }
              }
            }
          ]
        },
        "code": "\n      return start + parts.join(\"\");\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "IdentifierStart",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "Class",
            "characters": [
              "A",
              "B",
              "C",
              "D",
              "E",
              "F",
              "G",
              "H",
              "I",
              "J",
              "K",
              "L",
              "M",
              "N",
              "O",
              "P",
              "Q",
              "R",
              "S",
              "T",
              "U",
              "V",
              "W",
              "X",
              "Y",
              "Z",
              "À",
              "Á",
              "Â",
              "Ã",
              "Ä",
              "Å",
              "Æ",
              "Ç",
              "È",
              "É",
              "Ê",
              "Ë",
              "Ì",
              "Í",
              "Î",
              "Ï",
              "Ð",
              "Ñ",
              "Ò",
              "Ó",
              "Ô",
              "Õ",
              "Ö",
              "Ø",
              "Ù",
              "Ú",
              "Û",
              "Ü",
              "Ý",
              "Þ",
              "Ā",
              "Ă",
              "Ą",
              "Ć",
              "Ĉ",
              "Ċ",
              "Č",
              "Ď",
              "Đ",
              "Ē",
              "Ĕ",
              "Ė",
              "Ę",
              "Ě",
              "Ĝ",
              "Ğ",
              "Ġ",
              "Ģ",
              "Ĥ",
              "Ħ",
              "Ĩ",
              "Ī",
              "Ĭ",
              "Į",
              "İ",
              "Ĳ",
              "Ĵ",
              "Ķ",
              "Ĺ",
              "Ļ",
              "Ľ",
              "Ŀ",
              "Ł",
              "Ń",
              "Ņ",
              "Ň",
              "Ŋ",
              "Ō",
              "Ŏ",
              "Ő",
              "Œ",
              "Ŕ",
              "Ŗ",
              "Ř",
              "Ś",
              "Ŝ",
              "Ş",
              "Š",
              "Ţ",
              "Ť",
              "Ŧ",
              "Ũ",
              "Ū",
              "Ŭ",
              "Ů",
              "Ű",
              "Ų",
              "Ŵ",
              "Ŷ",
              "Ÿ",
              "Ź",
              "Ż",
              "Ž",
              "Ɓ",
              "Ƃ",
              "Ƅ",
              "Ɔ",
              "Ƈ",
              "Ɖ",
              "Ɗ",
              "Ƌ",
              "Ǝ",
              "Ə",
              "Ɛ",
              "Ƒ",
              "Ɠ",
              "Ɣ",
              "Ɩ",
              "Ɨ",
              "Ƙ",
              "Ɯ",
              "Ɲ",
              "Ɵ",
              "Ơ",
              "Ƣ",
              "Ƥ",
              "Ʀ",
              "Ƨ",
              "Ʃ",
              "Ƭ",
              "Ʈ",
              "Ư",
              "Ʊ",
              "Ʋ",
              "Ƴ",
              "Ƶ",
              "Ʒ",
              "Ƹ",
              "Ƽ",
              "Ǆ",
              "Ǉ",
              "Ǌ",
              "Ǎ",
              "Ǐ",
              "Ǒ",
              "Ǔ",
              "Ǖ",
              "Ǘ",
              "Ǚ",
              "Ǜ",
              "Ǟ",
              "Ǡ",
              "Ǣ",
              "Ǥ",
              "Ǧ",
              "Ǩ",
              "Ǫ",
              "Ǭ",
              "Ǯ",
              "Ǳ",
              "Ǵ",
              "Ƕ",
              "Ƿ",
              "Ǹ",
              "Ǻ",
              "Ǽ",
              "Ǿ",
              "Ȁ",
              "Ȃ",
              "Ȅ",
              "Ȇ",
              "Ȉ",
              "Ȋ",
              "Ȍ",
              "Ȏ",
              "Ȑ",
              "Ȓ",
              "Ȕ",
              "Ȗ",
              "Ș",
              "Ț",
              "Ȝ",
              "Ȟ",
              "Ƞ",
              "Ȣ",
              "Ȥ",
              "Ȧ",
              "Ȩ",
              "Ȫ",
              "Ȭ",
              "Ȯ",
              "Ȱ",
              "Ȳ",
              "Ⱥ",
              "Ȼ",
              "Ƚ",
              "Ⱦ",
              "Ɂ",
              "Ƀ",
              "Ʉ",
              "Ʌ",
              "Ɇ",
              "Ɉ",
              "Ɋ",
              "Ɍ",
              "Ɏ",
              "Ͱ",
              "Ͳ",
              "Ͷ",
              "Ά",
              "Έ",
              "Ή",
              "Ί",
              "Ό",
              "Ύ",
              "Ώ",
              "Α",
              "Β",
              "Γ",
              "Δ",
              "Ε",
              "Ζ",
              "Η",
              "Θ",
              "Ι",
              "Κ",
              "Λ",
              "Μ",
              "Ν",
              "Ξ",
              "Ο",
              "Π",
              "Ρ",
              "Σ",
              "Τ",
              "Υ",
              "Φ",
              "Χ",
              "Ψ",
              "Ω",
              "Ϊ",
              "Ϋ",
              "Ϗ",
              "ϒ",
              "ϓ",
              "ϔ",
              "Ϙ",
              "Ϛ",
              "Ϝ",
              "Ϟ",
              "Ϡ",
              "Ϣ",
              "Ϥ",
              "Ϧ",
              "Ϩ",
              "Ϫ",
              "Ϭ",
              "Ϯ",
              "ϴ",
              "Ϸ",
              "Ϲ",
              "Ϻ",
              "Ͻ",
              "Ͼ",
              "Ͽ",
              "Ѐ",
              "Ё",
              "Ђ",
              "Ѓ",
              "Є",
              "Ѕ",
              "І",
              "Ї",
              "Ј",
              "Љ",
              "Њ",
              "Ћ",
              "Ќ",
              "Ѝ",
              "Ў",
              "Џ",
              "А",
              "Б",
              "В",
              "Г",
              "Д",
              "Е",
              "Ж",
              "З",
              "И",
              "Й",
              "К",
              "Л",
              "М",
              "Н",
              "О",
              "П",
              "Р",
              "С",
              "Т",
              "У",
              "Ф",
              "Х",
              "Ц",
              "Ч",
              "Ш",
              "Щ",
              "Ъ",
              "Ы",
              "Ь",
              "Э",
              "Ю",
              "Я",
              "Ѡ",
              "Ѣ",
              "Ѥ",
              "Ѧ",
              "Ѩ",
              "Ѫ",
              "Ѭ",
              "Ѯ",
              "Ѱ",
              "Ѳ",
              "Ѵ",
              "Ѷ",
              "Ѹ",
              "Ѻ",
              "Ѽ",
              "Ѿ",
              "Ҁ",
              "Ҋ",
              "Ҍ",
              "Ҏ",
              "Ґ",
              "Ғ",
              "Ҕ",
              "Җ",
              "Ҙ",
              "Қ",
              "Ҝ",
              "Ҟ",
              "Ҡ",
              "Ң",
              "Ҥ",
              "Ҧ",
              "Ҩ",
              "Ҫ",
              "Ҭ",
              "Ү",
              "Ұ",
              "Ҳ",
              "Ҵ",
              "Ҷ",
              "Ҹ",
              "Һ",
              "Ҽ",
              "Ҿ",
              "Ӏ",
              "Ӂ",
              "Ӄ",
              "Ӆ",
              "Ӈ",
              "Ӊ",
              "Ӌ",
              "Ӎ",
              "Ӑ",
              "Ӓ",
              "Ӕ",
              "Ӗ",
              "Ә",
              "Ӛ",
              "Ӝ",
              "Ӟ",
              "Ӡ",
              "Ӣ",
              "Ӥ",
              "Ӧ",
              "Ө",
              "Ӫ",
              "Ӭ",
              "Ӯ",
              "Ӱ",
              "Ӳ",
              "Ӵ",
              "Ӷ",
              "Ӹ",
              "Ӻ",
              "Ӽ",
              "Ӿ",
              "Ԁ",
              "Ԃ",
              "Ԅ",
              "Ԇ",
              "Ԉ",
              "Ԋ",
              "Ԍ",
              "Ԏ",
              "Ԑ",
              "Ԓ",
              "Ԕ",
              "Ԗ",
              "Ԙ",
              "Ԛ",
              "Ԝ",
              "Ԟ",
              "Ԡ",
              "Ԣ",
              "Ա",
              "Բ",
              "Գ",
              "Դ",
              "Ե",
              "Զ",
              "Է",
              "Ը",
              "Թ",
              "Ժ",
              "Ի",
              "Լ",
              "Խ",
              "Ծ",
              "Կ",
              "Հ",
              "Ձ",
              "Ղ",
              "Ճ",
              "Մ",
              "Յ",
              "Ն",
              "Շ",
              "Ո",
              "Չ",
              "Պ",
              "Ջ",
              "Ռ",
              "Ս",
              "Վ",
              "Տ",
              "Ր",
              "Ց",
              "Ւ",
              "Փ",
              "Ք",
              "Օ",
              "Ֆ",
              "Ⴀ",
              "Ⴁ",
              "Ⴂ",
              "Ⴃ",
              "Ⴄ",
              "Ⴅ",
              "Ⴆ",
              "Ⴇ",
              "Ⴈ",
              "Ⴉ",
              "Ⴊ",
              "Ⴋ",
              "Ⴌ",
              "Ⴍ",
              "Ⴎ",
              "Ⴏ",
              "Ⴐ",
              "Ⴑ",
              "Ⴒ",
              "Ⴓ",
              "Ⴔ",
              "Ⴕ",
              "Ⴖ",
              "Ⴗ",
              "Ⴘ",
              "Ⴙ",
              "Ⴚ",
              "Ⴛ",
              "Ⴜ",
              "Ⴝ",
              "Ⴞ",
              "Ⴟ",
              "Ⴠ",
              "Ⴡ",
              "Ⴢ",
              "Ⴣ",
              "Ⴤ",
              "Ⴥ",
              "Ḁ",
              "Ḃ",
              "Ḅ",
              "Ḇ",
              "Ḉ",
              "Ḋ",
              "Ḍ",
              "Ḏ",
              "Ḑ",
              "Ḓ",
              "Ḕ",
              "Ḗ",
              "Ḙ",
              "Ḛ",
              "Ḝ",
              "Ḟ",
              "Ḡ",
              "Ḣ",
              "Ḥ",
              "Ḧ",
              "Ḩ",
              "Ḫ",
              "Ḭ",
              "Ḯ",
              "Ḱ",
              "Ḳ",
              "Ḵ",
              "Ḷ",
              "Ḹ",
              "Ḻ",
              "Ḽ",
              "Ḿ",
              "Ṁ",
              "Ṃ",
              "Ṅ",
              "Ṇ",
              "Ṉ",
              "Ṋ",
              "Ṍ",
              "Ṏ",
              "Ṑ",
              "Ṓ",
              "Ṕ",
              "Ṗ",
              "Ṙ",
              "Ṛ",
              "Ṝ",
              "Ṟ",
              "Ṡ",
              "Ṣ",
              "Ṥ",
              "Ṧ",
              "Ṩ",
              "Ṫ",
              "Ṭ",
              "Ṯ",
              "Ṱ",
              "Ṳ",
              "Ṵ",
              "Ṷ",
              "Ṹ",
              "Ṻ",
              "Ṽ",
              "Ṿ",
              "Ẁ",
              "Ẃ",
              "Ẅ",
              "Ẇ",
              "Ẉ",
              "Ẋ",
              "Ẍ",
              "Ẏ",
              "Ẑ",
              "Ẓ",
              "Ẕ",
              "ẞ",
              "Ạ",
              "Ả",
              "Ấ",
              "Ầ",
              "Ẩ",
              "Ẫ",
              "Ậ",
              "Ắ",
              "Ằ",
              "Ẳ",
              "Ẵ",
              "Ặ",
              "Ẹ",
              "Ẻ",
              "Ẽ",
              "Ế",
              "Ề",
              "Ể",
              "Ễ",
              "Ệ",
              "Ỉ",
              "Ị",
              "Ọ",
              "Ỏ",
              "Ố",
              "Ồ",
              "Ổ",
              "Ỗ",
              "Ộ",
              "Ớ",
              "Ờ",
              "Ở",
              "Ỡ",
              "Ợ",
              "Ụ",
              "Ủ",
              "Ứ",
              "Ừ",
              "Ử",
              "Ữ",
              "Ự",
              "Ỳ",
              "Ỵ",
              "Ỷ",
              "Ỹ",
              "Ỻ",
              "Ỽ",
              "Ỿ",
              "Ἀ",
              "Ἁ",
              "Ἂ",
              "Ἃ",
              "Ἄ",
              "Ἅ",
              "Ἆ",
              "Ἇ",
              "Ἐ",
              "Ἑ",
              "Ἒ",
              "Ἓ",
              "Ἔ",
              "Ἕ",
              "Ἠ",
              "Ἡ",
              "Ἢ",
              "Ἣ",
              "Ἤ",
              "Ἥ",
              "Ἦ",
              "Ἧ",
              "Ἰ",
              "Ἱ",
              "Ἲ",
              "Ἳ",
              "Ἴ",
              "Ἵ",
              "Ἶ",
              "Ἷ",
              "Ὀ",
              "Ὁ",
              "Ὂ",
              "Ὃ",
              "Ὄ",
              "Ὅ",
              "Ὑ",
              "Ὓ",
              "Ὕ",
              "Ὗ",
              "Ὠ",
              "Ὡ",
              "Ὢ",
              "Ὣ",
              "Ὤ",
              "Ὥ",
              "Ὦ",
              "Ὧ",
              "Ᾰ",
              "Ᾱ",
              "Ὰ",
              "Ά",
              "Ὲ",
              "Έ",
              "Ὴ",
              "Ή",
              "Ῐ",
              "Ῑ",
              "Ὶ",
              "Ί",
              "Ῠ",
              "Ῡ",
              "Ὺ",
              "Ύ",
              "Ῥ",
              "Ὸ",
              "Ό",
              "Ὼ",
              "Ώ",
              "ℂ",
              "ℇ",
              "ℋ",
              "ℌ",
              "ℍ",
              "ℐ",
              "ℑ",
              "ℒ",
              "ℕ",
              "ℙ",
              "ℚ",
              "ℛ",
              "ℜ",
              "ℝ",
              "ℤ",
              "Ω",
              "ℨ",
              "K",
              "Å",
              "ℬ",
              "ℭ",
              "ℰ",
              "ℱ",
              "Ⅎ",
              "ℳ",
              "ℾ",
              "ℿ",
              "ⅅ",
              "Ↄ",
              "Ⰰ",
              "Ⰱ",
              "Ⰲ",
              "Ⰳ",
              "Ⰴ",
              "Ⰵ",
              "Ⰶ",
              "Ⰷ",
              "Ⰸ",
              "Ⰹ",
              "Ⰺ",
              "Ⰻ",
              "Ⰼ",
              "Ⰽ",
              "Ⰾ",
              "Ⰿ",
              "Ⱀ",
              "Ⱁ",
              "Ⱂ",
              "Ⱃ",
              "Ⱄ",
              "Ⱅ",
              "Ⱆ",
              "Ⱇ",
              "Ⱈ",
              "Ⱉ",
              "Ⱊ",
              "Ⱋ",
              "Ⱌ",
              "Ⱍ",
              "Ⱎ",
              "Ⱏ",
              "Ⱐ",
              "Ⱑ",
              "Ⱒ",
              "Ⱓ",
              "Ⱔ",
              "Ⱕ",
              "Ⱖ",
              "Ⱗ",
              "Ⱘ",
              "Ⱙ",
              "Ⱚ",
              "Ⱛ",
              "Ⱜ",
              "Ⱝ",
              "Ⱞ",
              "Ⱡ",
              "Ɫ",
              "Ᵽ",
              "Ɽ",
              "Ⱨ",
              "Ⱪ",
              "Ⱬ",
              "Ɑ",
              "Ɱ",
              "Ɐ",
              "Ⱳ",
              "Ⱶ",
              "Ⲁ",
              "Ⲃ",
              "Ⲅ",
              "Ⲇ",
              "Ⲉ",
              "Ⲋ",
              "Ⲍ",
              "Ⲏ",
              "Ⲑ",
              "Ⲓ",
              "Ⲕ",
              "Ⲗ",
              "Ⲙ",
              "Ⲛ",
              "Ⲝ",
              "Ⲟ",
              "Ⲡ",
              "Ⲣ",
              "Ⲥ",
              "Ⲧ",
              "Ⲩ",
              "Ⲫ",
              "Ⲭ",
              "Ⲯ",
              "Ⲱ",
              "Ⲳ",
              "Ⲵ",
              "Ⲷ",
              "Ⲹ",
              "Ⲻ",
              "Ⲽ",
              "Ⲿ",
              "Ⳁ",
              "Ⳃ",
              "Ⳅ",
              "Ⳇ",
              "Ⳉ",
              "Ⳋ",
              "Ⳍ",
              "Ⳏ",
              "Ⳑ",
              "Ⳓ",
              "Ⳕ",
              "Ⳗ",
              "Ⳙ",
              "Ⳛ",
              "Ⳝ",
              "Ⳟ",
              "Ⳡ",
              "Ⳣ",
              "Ꙁ",
              "Ꙃ",
              "Ꙅ",
              "Ꙇ",
              "Ꙉ",
              "Ꙋ",
              "Ꙍ",
              "Ꙏ",
              "Ꙑ",
              "Ꙓ",
              "Ꙕ",
              "Ꙗ",
              "Ꙙ",
              "Ꙛ",
              "Ꙝ",
              "Ꙟ",
              "Ꙣ",
              "Ꙥ",
              "Ꙧ",
              "Ꙩ",
              "Ꙫ",
              "Ꙭ",
              "Ꚁ",
              "Ꚃ",
              "Ꚅ",
              "Ꚇ",
              "Ꚉ",
              "Ꚋ",
              "Ꚍ",
              "Ꚏ",
              "Ꚑ",
              "Ꚓ",
              "Ꚕ",
              "Ꚗ",
              "Ꜣ",
              "Ꜥ",
              "Ꜧ",
              "Ꜩ",
              "Ꜫ",
              "Ꜭ",
              "Ꜯ",
              "Ꜳ",
              "Ꜵ",
              "Ꜷ",
              "Ꜹ",
              "Ꜻ",
              "Ꜽ",
              "Ꜿ",
              "Ꝁ",
              "Ꝃ",
              "Ꝅ",
              "Ꝇ",
              "Ꝉ",
              "Ꝋ",
              "Ꝍ",
              "Ꝏ",
              "Ꝑ",
              "Ꝓ",
              "Ꝕ",
              "Ꝗ",
              "Ꝙ",
              "Ꝛ",
              "Ꝝ",
              "Ꝟ",
              "Ꝡ",
              "Ꝣ",
              "Ꝥ",
              "Ꝧ",
              "Ꝩ",
              "Ꝫ",
              "Ꝭ",
              "Ꝯ",
              "Ꝺ",
              "Ꝼ",
              "Ᵹ",
              "Ꝿ",
              "Ꞁ",
              "Ꞃ",
              "Ꞅ",
              "Ꞇ",
              "Ꞌ",
              "Ａ",
              "Ｂ",
              "Ｃ",
              "Ｄ",
              "Ｅ",
              "Ｆ",
              "Ｇ",
              "Ｈ",
              "Ｉ",
              "Ｊ",
              "Ｋ",
              "Ｌ",
              "Ｍ",
              "Ｎ",
              "Ｏ",
              "Ｐ",
              "Ｑ",
              "Ｒ",
              "Ｓ",
              "Ｔ",
              "Ｕ",
              "Ｖ",
              "Ｗ",
              "Ｘ",
              "Ｙ",
              "Ｚ",
              "a",
              "b",
              "c",
              "d",
              "e",
              "f",
              "g",
              "h",
              "i",
              "j",
              "k",
              "l",
              "m",
              "n",
              "o",
              "p",
              "q",
              "r",
              "s",
              "t",
              "u",
              "v",
              "w",
              "x",
              "y",
              "z",
              "ª",
              "µ",
              "º",
              "ß",
              "à",
              "á",
              "â",
              "ã",
              "ä",
              "å",
              "æ",
              "ç",
              "è",
              "é",
              "ê",
              "ë",
              "ì",
              "í",
              "î",
              "ï",
              "ð",
              "ñ",
              "ò",
              "ó",
              "ô",
              "õ",
              "ö",
              "ø",
              "ù",
              "ú",
              "û",
              "ü",
              "ý",
              "þ",
              "ÿ",
              "ā",
              "ă",
              "ą",
              "ć",
              "ĉ",
              "ċ",
              "č",
              "ď",
              "đ",
              "ē",
              "ĕ",
              "ė",
              "ę",
              "ě",
              "ĝ",
              "ğ",
              "ġ",
              "ģ",
              "ĥ",
              "ħ",
              "ĩ",
              "ī",
              "ĭ",
              "į",
              "ı",
              "ĳ",
              "ĵ",
              "ķ",
              "ĸ",
              "ĺ",
              "ļ",
              "ľ",
              "ŀ",
              "ł",
              "ń",
              "ņ",
              "ň",
              "ŉ",
              "ŋ",
              "ō",
              "ŏ",
              "ő",
              "œ",
              "ŕ",
              "ŗ",
              "ř",
              "ś",
              "ŝ",
              "ş",
              "š",
              "ţ",
              "ť",
              "ŧ",
              "ũ",
              "ū",
              "ŭ",
              "ů",
              "ű",
              "ų",
              "ŵ",
              "ŷ",
              "ź",
              "ż",
              "ž",
              "ſ",
              "ƀ",
              "ƃ",
              "ƅ",
              "ƈ",
              "ƌ",
              "ƍ",
              "ƒ",
              "ƕ",
              "ƙ",
              "ƚ",
              "ƛ",
              "ƞ",
              "ơ",
              "ƣ",
              "ƥ",
              "ƨ",
              "ƪ",
              "ƫ",
              "ƭ",
              "ư",
              "ƴ",
              "ƶ",
              "ƹ",
              "ƺ",
              "ƽ",
              "ƾ",
              "ƿ",
              "ǆ",
              "ǉ",
              "ǌ",
              "ǎ",
              "ǐ",
              "ǒ",
              "ǔ",
              "ǖ",
              "ǘ",
              "ǚ",
              "ǜ",
              "ǝ",
              "ǟ",
              "ǡ",
              "ǣ",
              "ǥ",
              "ǧ",
              "ǩ",
              "ǫ",
              "ǭ",
              "ǯ",
              "ǰ",
              "ǳ",
              "ǵ",
              "ǹ",
              "ǻ",
              "ǽ",
              "ǿ",
              "ȁ",
              "ȃ",
              "ȅ",
              "ȇ",
              "ȉ",
              "ȋ",
              "ȍ",
              "ȏ",
              "ȑ",
              "ȓ",
              "ȕ",
              "ȗ",
              "ș",
              "ț",
              "ȝ",
              "ȟ",
              "ȡ",
              "ȣ",
              "ȥ",
              "ȧ",
              "ȩ",
              "ȫ",
              "ȭ",
              "ȯ",
              "ȱ",
              "ȳ",
              "ȴ",
              "ȵ",
              "ȶ",
              "ȷ",
              "ȸ",
              "ȹ",
              "ȼ",
              "ȿ",
              "ɀ",
              "ɂ",
              "ɇ",
              "ɉ",
              "ɋ",
              "ɍ",
              "ɏ",
              "ɐ",
              "ɑ",
              "ɒ",
              "ɓ",
              "ɔ",
              "ɕ",
              "ɖ",
              "ɗ",
              "ɘ",
              "ə",
              "ɚ",
              "ɛ",
              "ɜ",
              "ɝ",
              "ɞ",
              "ɟ",
              "ɠ",
              "ɡ",
              "ɢ",
              "ɣ",
              "ɤ",
              "ɥ",
              "ɦ",
              "ɧ",
              "ɨ",
              "ɩ",
              "ɪ",
              "ɫ",
              "ɬ",
              "ɭ",
              "ɮ",
              "ɯ",
              "ɰ",
              "ɱ",
              "ɲ",
              "ɳ",
              "ɴ",
              "ɵ",
              "ɶ",
              "ɷ",
              "ɸ",
              "ɹ",
              "ɺ",
              "ɻ",
              "ɼ",
              "ɽ",
              "ɾ",
              "ɿ",
              "ʀ",
              "ʁ",
              "ʂ",
              "ʃ",
              "ʄ",
              "ʅ",
              "ʆ",
              "ʇ",
              "ʈ",
              "ʉ",
              "ʊ",
              "ʋ",
              "ʌ",
              "ʍ",
              "ʎ",
              "ʏ",
              "ʐ",
              "ʑ",
              "ʒ",
              "ʓ",
              "ʕ",
              "ʖ",
              "ʗ",
              "ʘ",
              "ʙ",
              "ʚ",
              "ʛ",
              "ʜ",
              "ʝ",
              "ʞ",
              "ʟ",
              "ʠ",
              "ʡ",
              "ʢ",
              "ʣ",
              "ʤ",
              "ʥ",
              "ʦ",
              "ʧ",
              "ʨ",
              "ʩ",
              "ʪ",
              "ʫ",
              "ʬ",
              "ʭ",
              "ʮ",
              "ʯ",
              "ͱ",
              "ͳ",
              "ͷ",
              "ͻ",
              "ͼ",
              "ͽ",
              "ΐ",
              "ά",
              "έ",
              "ή",
              "ί",
              "ΰ",
              "α",
              "β",
              "γ",
              "δ",
              "ε",
              "ζ",
              "η",
              "θ",
              "ι",
              "κ",
              "λ",
              "μ",
              "ν",
              "ξ",
              "ο",
              "π",
              "ρ",
              "ς",
              "σ",
              "τ",
              "υ",
              "φ",
              "χ",
              "ψ",
              "ω",
              "ϊ",
              "ϋ",
              "ό",
              "ύ",
              "ώ",
              "ϐ",
              "ϑ",
              "ϕ",
              "ϖ",
              "ϗ",
              "ϙ",
              "ϛ",
              "ϝ",
              "ϟ",
              "ϡ",
              "ϣ",
              "ϥ",
              "ϧ",
              "ϩ",
              "ϫ",
              "ϭ",
              "ϯ",
              "ϰ",
              "ϱ",
              "ϲ",
              "ϳ",
              "ϵ",
              "ϸ",
              "ϻ",
              "ϼ",
              "а",
              "б",
              "в",
              "г",
              "д",
              "е",
              "ж",
              "з",
              "и",
              "й",
              "к",
              "л",
              "м",
              "н",
              "о",
              "п",
              "р",
              "с",
              "т",
              "у",
              "ф",
              "х",
              "ц",
              "ч",
              "ш",
              "щ",
              "ъ",
              "ы",
              "ь",
              "э",
              "ю",
              "я",
              "ѐ",
              "ё",
              "ђ",
              "ѓ",
              "є",
              "ѕ",
              "і",
              "ї",
              "ј",
              "љ",
              "њ",
              "ћ",
              "ќ",
              "ѝ",
              "ў",
              "џ",
              "ѡ",
              "ѣ",
              "ѥ",
              "ѧ",
              "ѩ",
              "ѫ",
              "ѭ",
              "ѯ",
              "ѱ",
              "ѳ",
              "ѵ",
              "ѷ",
              "ѹ",
              "ѻ",
              "ѽ",
              "ѿ",
              "ҁ",
              "ҋ",
              "ҍ",
              "ҏ",
              "ґ",
              "ғ",
              "ҕ",
              "җ",
              "ҙ",
              "қ",
              "ҝ",
              "ҟ",
              "ҡ",
              "ң",
              "ҥ",
              "ҧ",
              "ҩ",
              "ҫ",
              "ҭ",
              "ү",
              "ұ",
              "ҳ",
              "ҵ",
              "ҷ",
              "ҹ",
              "һ",
              "ҽ",
              "ҿ",
              "ӂ",
              "ӄ",
              "ӆ",
              "ӈ",
              "ӊ",
              "ӌ",
              "ӎ",
              "ӏ",
              "ӑ",
              "ӓ",
              "ӕ",
              "ӗ",
              "ә",
              "ӛ",
              "ӝ",
              "ӟ",
              "ӡ",
              "ӣ",
              "ӥ",
              "ӧ",
              "ө",
              "ӫ",
              "ӭ",
              "ӯ",
              "ӱ",
              "ӳ",
              "ӵ",
              "ӷ",
              "ӹ",
              "ӻ",
              "ӽ",
              "ӿ",
              "ԁ",
              "ԃ",
              "ԅ",
              "ԇ",
              "ԉ",
              "ԋ",
              "ԍ",
              "ԏ",
              "ԑ",
              "ԓ",
              "ԕ",
              "ԗ",
              "ԙ",
              "ԛ",
              "ԝ",
              "ԟ",
              "ԡ",
              "ԣ",
              "ա",
              "բ",
              "գ",
              "դ",
              "ե",
              "զ",
              "է",
              "ը",
              "թ",
              "ժ",
              "ի",
              "լ",
              "խ",
              "ծ",
              "կ",
              "հ",
              "ձ",
              "ղ",
              "ճ",
              "մ",
              "յ",
              "ն",
              "շ",
              "ո",
              "չ",
              "պ",
              "ջ",
              "ռ",
              "ս",
              "վ",
              "տ",
              "ր",
              "ց",
              "ւ",
              "փ",
              "ք",
              "օ",
              "ֆ",
              "և",
              "ᴀ",
              "ᴁ",
              "ᴂ",
              "ᴃ",
              "ᴄ",
              "ᴅ",
              "ᴆ",
              "ᴇ",
              "ᴈ",
              "ᴉ",
              "ᴊ",
              "ᴋ",
              "ᴌ",
              "ᴍ",
              "ᴎ",
              "ᴏ",
              "ᴐ",
              "ᴑ",
              "ᴒ",
              "ᴓ",
              "ᴔ",
              "ᴕ",
              "ᴖ",
              "ᴗ",
              "ᴘ",
              "ᴙ",
              "ᴚ",
              "ᴛ",
              "ᴜ",
              "ᴝ",
              "ᴞ",
              "ᴟ",
              "ᴠ",
              "ᴡ",
              "ᴢ",
              "ᴣ",
              "ᴤ",
              "ᴥ",
              "ᴦ",
              "ᴧ",
              "ᴨ",
              "ᴩ",
              "ᴪ",
              "ᴫ",
              "ᵢ",
              "ᵣ",
              "ᵤ",
              "ᵥ",
              "ᵦ",
              "ᵧ",
              "ᵨ",
              "ᵩ",
              "ᵪ",
              "ᵫ",
              "ᵬ",
              "ᵭ",
              "ᵮ",
              "ᵯ",
              "ᵰ",
              "ᵱ",
              "ᵲ",
              "ᵳ",
              "ᵴ",
              "ᵵ",
              "ᵶ",
              "ᵷ",
              "ᵹ",
              "ᵺ",
              "ᵻ",
              "ᵼ",
              "ᵽ",
              "ᵾ",
              "ᵿ",
              "ᶀ",
              "ᶁ",
              "ᶂ",
              "ᶃ",
              "ᶄ",
              "ᶅ",
              "ᶆ",
              "ᶇ",
              "ᶈ",
              "ᶉ",
              "ᶊ",
              "ᶋ",
              "ᶌ",
              "ᶍ",
              "ᶎ",
              "ᶏ",
              "ᶐ",
              "ᶑ",
              "ᶒ",
              "ᶓ",
              "ᶔ",
              "ᶕ",
              "ᶖ",
              "ᶗ",
              "ᶘ",
              "ᶙ",
              "ᶚ",
              "ḁ",
              "ḃ",
              "ḅ",
              "ḇ",
              "ḉ",
              "ḋ",
              "ḍ",
              "ḏ",
              "ḑ",
              "ḓ",
              "ḕ",
              "ḗ",
              "ḙ",
              "ḛ",
              "ḝ",
              "ḟ",
              "ḡ",
              "ḣ",
              "ḥ",
              "ḧ",
              "ḩ",
              "ḫ",
              "ḭ",
              "ḯ",
              "ḱ",
              "ḳ",
              "ḵ",
              "ḷ",
              "ḹ",
              "ḻ",
              "ḽ",
              "ḿ",
              "ṁ",
              "ṃ",
              "ṅ",
              "ṇ",
              "ṉ",
              "ṋ",
              "ṍ",
              "ṏ",
              "ṑ",
              "ṓ",
              "ṕ",
              "ṗ",
              "ṙ",
              "ṛ",
              "ṝ",
              "ṟ",
              "ṡ",
              "ṣ",
              "ṥ",
              "ṧ",
              "ṩ",
              "ṫ",
              "ṭ",
              "ṯ",
              "ṱ",
              "ṳ",
              "ṵ",
              "ṷ",
              "ṹ",
              "ṻ",
              "ṽ",
              "ṿ",
              "ẁ",
              "ẃ",
              "ẅ",
              "ẇ",
              "ẉ",
              "ẋ",
              "ẍ",
              "ẏ",
              "ẑ",
              "ẓ",
              "ẕ",
              "ẖ",
              "ẗ",
              "ẘ",
              "ẙ",
              "ẚ",
              "ẛ",
              "ẜ",
              "ẝ",
              "ẟ",
              "ạ",
              "ả",
              "ấ",
              "ầ",
              "ẩ",
              "ẫ",
              "ậ",
              "ắ",
              "ằ",
              "ẳ",
              "ẵ",
              "ặ",
              "ẹ",
              "ẻ",
              "ẽ",
              "ế",
              "ề",
              "ể",
              "ễ",
              "ệ",
              "ỉ",
              "ị",
              "ọ",
              "ỏ",
              "ố",
              "ồ",
              "ổ",
              "ỗ",
              "ộ",
              "ớ",
              "ờ",
              "ở",
              "ỡ",
              "ợ",
              "ụ",
              "ủ",
              "ứ",
              "ừ",
              "ử",
              "ữ",
              "ự",
              "ỳ",
              "ỵ",
              "ỷ",
              "ỹ",
              "ỻ",
              "ỽ",
              "ỿ",
              "ἀ",
              "ἁ",
              "ἂ",
              "ἃ",
              "ἄ",
              "ἅ",
              "ἆ",
              "ἇ",
              "ἐ",
              "ἑ",
              "ἒ",
              "ἓ",
              "ἔ",
              "ἕ",
              "ἠ",
              "ἡ",
              "ἢ",
              "ἣ",
              "ἤ",
              "ἥ",
              "ἦ",
              "ἧ",
              "ἰ",
              "ἱ",
              "ἲ",
              "ἳ",
              "ἴ",
              "ἵ",
              "ἶ",
              "ἷ",
              "ὀ",
              "ὁ",
              "ὂ",
              "ὃ",
              "ὄ",
              "ὅ",
              "ὐ",
              "ὑ",
              "ὒ",
              "ὓ",
              "ὔ",
              "ὕ",
              "ὖ",
              "ὗ",
              "ὠ",
              "ὡ",
              "ὢ",
              "ὣ",
              "ὤ",
              "ὥ",
              "ὦ",
              "ὧ",
              "ὰ",
              "ά",
              "ὲ",
              "έ",
              "ὴ",
              "ή",
              "ὶ",
              "ί",
              "ὸ",
              "ό",
              "ὺ",
              "ύ",
              "ὼ",
              "ώ",
              "ᾀ",
              "ᾁ",
              "ᾂ",
              "ᾃ",
              "ᾄ",
              "ᾅ",
              "ᾆ",
              "ᾇ",
              "ᾐ",
              "ᾑ",
              "ᾒ",
              "ᾓ",
              "ᾔ",
              "ᾕ",
              "ᾖ",
              "ᾗ",
              "ᾠ",
              "ᾡ",
              "ᾢ",
              "ᾣ",
              "ᾤ",
              "ᾥ",
              "ᾦ",
              "ᾧ",
              "ᾰ",
              "ᾱ",
              "ᾲ",
              "ᾳ",
              "ᾴ",
              "ᾶ",
              "ᾷ",
              "ι",
              "ῂ",
              "ῃ",
              "ῄ",
              "ῆ",
              "ῇ",
              "ῐ",
              "ῑ",
              "ῒ",
              "ΐ",
              "ῖ",
              "ῗ",
              "ῠ",
              "ῡ",
              "ῢ",
              "ΰ",
              "ῤ",
              "ῥ",
              "ῦ",
              "ῧ",
              "ῲ",
              "ῳ",
              "ῴ",
              "ῶ",
              "ῷ",
              "ⁱ",
              "ⁿ",
              "ℊ",
              "ℎ",
              "ℏ",
              "ℓ",
              "ℯ",
              "ℴ",
              "ℹ",
              "ℼ",
              "ℽ",
              "ⅆ",
              "ⅇ",
              "ⅈ",
              "ⅉ",
              "ⅎ",
              "ↄ",
              "ⰰ",
              "ⰱ",
              "ⰲ",
              "ⰳ",
              "ⰴ",
              "ⰵ",
              "ⰶ",
              "ⰷ",
              "ⰸ",
              "ⰹ",
              "ⰺ",
              "ⰻ",
              "ⰼ",
              "ⰽ",
              "ⰾ",
              "ⰿ",
              "ⱀ",
              "ⱁ",
              "ⱂ",
              "ⱃ",
              "ⱄ",
              "ⱅ",
              "ⱆ",
              "ⱇ",
              "ⱈ",
              "ⱉ",
              "ⱊ",
              "ⱋ",
              "ⱌ",
              "ⱍ",
              "ⱎ",
              "ⱏ",
              "ⱐ",
              "ⱑ",
              "ⱒ",
              "ⱓ",
              "ⱔ",
              "ⱕ",
              "ⱖ",
              "ⱗ",
              "ⱘ",
              "ⱙ",
              "ⱚ",
              "ⱛ",
              "ⱜ",
              "ⱝ",
              "ⱞ",
              "ⱡ",
              "ⱥ",
              "ⱦ",
              "ⱨ",
              "ⱪ",
              "ⱬ",
              "ⱱ",
              "ⱳ",
              "ⱴ",
              "ⱶ",
              "ⱷ",
              "ⱸ",
              "ⱹ",
              "ⱺ",
              "ⱻ",
              "ⱼ",
              "ⲁ",
              "ⲃ",
              "ⲅ",
              "ⲇ",
              "ⲉ",
              "ⲋ",
              "ⲍ",
              "ⲏ",
              "ⲑ",
              "ⲓ",
              "ⲕ",
              "ⲗ",
              "ⲙ",
              "ⲛ",
              "ⲝ",
              "ⲟ",
              "ⲡ",
              "ⲣ",
              "ⲥ",
              "ⲧ",
              "ⲩ",
              "ⲫ",
              "ⲭ",
              "ⲯ",
              "ⲱ",
              "ⲳ",
              "ⲵ",
              "ⲷ",
              "ⲹ",
              "ⲻ",
              "ⲽ",
              "ⲿ",
              "ⳁ",
              "ⳃ",
              "ⳅ",
              "ⳇ",
              "ⳉ",
              "ⳋ",
              "ⳍ",
              "ⳏ",
              "ⳑ",
              "ⳓ",
              "ⳕ",
              "ⳗ",
              "ⳙ",
              "ⳛ",
              "ⳝ",
              "ⳟ",
              "ⳡ",
              "ⳣ",
              "ⳤ",
              "ⴀ",
              "ⴁ",
              "ⴂ",
              "ⴃ",
              "ⴄ",
              "ⴅ",
              "ⴆ",
              "ⴇ",
              "ⴈ",
              "ⴉ",
              "ⴊ",
              "ⴋ",
              "ⴌ",
              "ⴍ",
              "ⴎ",
              "ⴏ",
              "ⴐ",
              "ⴑ",
              "ⴒ",
              "ⴓ",
              "ⴔ",
              "ⴕ",
              "ⴖ",
              "ⴗ",
              "ⴘ",
              "ⴙ",
              "ⴚ",
              "ⴛ",
              "ⴜ",
              "ⴝ",
              "ⴞ",
              "ⴟ",
              "ⴠ",
              "ⴡ",
              "ⴢ",
              "ⴣ",
              "ⴤ",
              "ⴥ",
              "ꙁ",
              "ꙃ",
              "ꙅ",
              "ꙇ",
              "ꙉ",
              "ꙋ",
              "ꙍ",
              "ꙏ",
              "ꙑ",
              "ꙓ",
              "ꙕ",
              "ꙗ",
              "ꙙ",
              "ꙛ",
              "ꙝ",
              "ꙟ",
              "ꙣ",
              "ꙥ",
              "ꙧ",
              "ꙩ",
              "ꙫ",
              "ꙭ",
              "ꚁ",
              "ꚃ",
              "ꚅ",
              "ꚇ",
              "ꚉ",
              "ꚋ",
              "ꚍ",
              "ꚏ",
              "ꚑ",
              "ꚓ",
              "ꚕ",
              "ꚗ",
              "ꜣ",
              "ꜥ",
              "ꜧ",
              "ꜩ",
              "ꜫ",
              "ꜭ",
              "ꜯ",
              "ꜰ",
              "ꜱ",
              "ꜳ",
              "ꜵ",
              "ꜷ",
              "ꜹ",
              "ꜻ",
              "ꜽ",
              "ꜿ",
              "ꝁ",
              "ꝃ",
              "ꝅ",
              "ꝇ",
              "ꝉ",
              "ꝋ",
              "ꝍ",
              "ꝏ",
              "ꝑ",
              "ꝓ",
              "ꝕ",
              "ꝗ",
              "ꝙ",
              "ꝛ",
              "ꝝ",
              "ꝟ",
              "ꝡ",
              "ꝣ",
              "ꝥ",
              "ꝧ",
              "ꝩ",
              "ꝫ",
              "ꝭ",
              "ꝯ",
              "ꝱ",
              "ꝲ",
              "ꝳ",
              "ꝴ",
              "ꝵ",
              "ꝶ",
              "ꝷ",
              "ꝸ",
              "ꝺ",
              "ꝼ",
              "ꝿ",
              "ꞁ",
              "ꞃ",
              "ꞅ",
              "ꞇ",
              "ꞌ",
              "ﬀ",
              "ﬁ",
              "ﬂ",
              "ﬃ",
              "ﬄ",
              "ﬅ",
              "ﬆ",
              "ﬓ",
              "ﬔ",
              "ﬕ",
              "ﬖ",
              "ﬗ",
              "ａ",
              "ｂ",
              "ｃ",
              "ｄ",
              "ｅ",
              "ｆ",
              "ｇ",
              "ｈ",
              "ｉ",
              "ｊ",
              "ｋ",
              "ｌ",
              "ｍ",
              "ｎ",
              "ｏ",
              "ｐ",
              "ｑ",
              "ｒ",
              "ｓ",
              "ｔ",
              "ｕ",
              "ｖ",
              "ｗ",
              "ｘ",
              "ｙ",
              "ｚ",
              "ǅ",
              "ǈ",
              "ǋ",
              "ǲ",
              "ᾈ",
              "ᾉ",
              "ᾊ",
              "ᾋ",
              "ᾌ",
              "ᾍ",
              "ᾎ",
              "ᾏ",
              "ᾘ",
              "ᾙ",
              "ᾚ",
              "ᾛ",
              "ᾜ",
              "ᾝ",
              "ᾞ",
              "ᾟ",
              "ᾨ",
              "ᾩ",
              "ᾪ",
              "ᾫ",
              "ᾬ",
              "ᾭ",
              "ᾮ",
              "ᾯ",
              "ᾼ",
              "ῌ",
              "ῼ",
              "ʰ",
              "ʱ",
              "ʲ",
              "ʳ",
              "ʴ",
              "ʵ",
              "ʶ",
              "ʷ",
              "ʸ",
              "ʹ",
              "ʺ",
              "ʻ",
              "ʼ",
              "ʽ",
              "ʾ",
              "ʿ",
              "ˀ",
              "ˁ",
              "ˆ",
              "ˇ",
              "ˈ",
              "ˉ",
              "ˊ",
              "ˋ",
              "ˌ",
              "ˍ",
              "ˎ",
              "ˏ",
              "ː",
              "ˑ",
              "ˠ",
              "ˡ",
              "ˢ",
              "ˣ",
              "ˤ",
              "ˬ",
              "ˮ",
              "ʹ",
              "ͺ",
              "ՙ",
              "ـ",
              "ۥ",
              "ۦ",
              "ߴ",
              "ߵ",
              "ߺ",
              "ॱ",
              "ๆ",
              "ໆ",
              "ჼ",
              "ៗ",
              "ᡃ",
              "ᱸ",
              "ᱹ",
              "ᱺ",
              "ᱻ",
              "ᱼ",
              "ᱽ",
              "ᴬ",
              "ᴭ",
              "ᴮ",
              "ᴯ",
              "ᴰ",
              "ᴱ",
              "ᴲ",
              "ᴳ",
              "ᴴ",
              "ᴵ",
              "ᴶ",
              "ᴷ",
              "ᴸ",
              "ᴹ",
              "ᴺ",
              "ᴻ",
              "ᴼ",
              "ᴽ",
              "ᴾ",
              "ᴿ",
              "ᵀ",
              "ᵁ",
              "ᵂ",
              "ᵃ",
              "ᵄ",
              "ᵅ",
              "ᵆ",
              "ᵇ",
              "ᵈ",
              "ᵉ",
              "ᵊ",
              "ᵋ",
              "ᵌ",
              "ᵍ",
              "ᵎ",
              "ᵏ",
              "ᵐ",
              "ᵑ",
              "ᵒ",
              "ᵓ",
              "ᵔ",
              "ᵕ",
              "ᵖ",
              "ᵗ",
              "ᵘ",
              "ᵙ",
              "ᵚ",
              "ᵛ",
              "ᵜ",
              "ᵝ",
              "ᵞ",
              "ᵟ",
              "ᵠ",
              "ᵡ",
              "ᵸ",
              "ᶛ",
              "ᶜ",
              "ᶝ",
              "ᶞ",
              "ᶟ",
              "ᶠ",
              "ᶡ",
              "ᶢ",
              "ᶣ",
              "ᶤ",
              "ᶥ",
              "ᶦ",
              "ᶧ",
              "ᶨ",
              "ᶩ",
              "ᶪ",
              "ᶫ",
              "ᶬ",
              "ᶭ",
              "ᶮ",
              "ᶯ",
              "ᶰ",
              "ᶱ",
              "ᶲ",
              "ᶳ",
              "ᶴ",
              "ᶵ",
              "ᶶ",
              "ᶷ",
              "ᶸ",
              "ᶹ",
              "ᶺ",
              "ᶻ",
              "ᶼ",
              "ᶽ",
              "ᶾ",
              "ᶿ",
              "ₐ",
              "ₑ",
              "ₒ",
              "ₓ",
              "ₔ",
              "ⱽ",
              "ⵯ",
              "ⸯ",
              "々",
              "〱",
              "〲",
              "〳",
              "〴",
              "〵",
              "〻",
              "ゝ",
              "ゞ",
              "ー",
              "ヽ",
              "ヾ",
              "ꀕ",
              "ꘌ",
              "ꙿ",
              "ꜗ",
              "ꜘ",
              "ꜙ",
              "ꜚ",
              "ꜛ",
              "ꜜ",
              "ꜝ",
              "ꜞ",
              "ꜟ",
              "ꝰ",
              "ꞈ",
              "ｰ",
              "ﾞ",
              "ﾟ",
              "ƻ",
              "ǀ",
              "ǁ",
              "ǂ",
              "ǃ",
              "ʔ",
              "א",
              "ב",
              "ג",
              "ד",
              "ה",
              "ו",
              "ז",
              "ח",
              "ט",
              "י",
              "ך",
              "כ",
              "ל",
              "ם",
              "מ",
              "ן",
              "נ",
              "ס",
              "ע",
              "ף",
              "פ",
              "ץ",
              "צ",
              "ק",
              "ר",
              "ש",
              "ת",
              "װ",
              "ױ",
              "ײ",
              "ء",
              "آ",
              "أ",
              "ؤ",
              "إ",
              "ئ",
              "ا",
              "ب",
              "ة",
              "ت",
              "ث",
              "ج",
              "ح",
              "خ",
              "د",
              "ذ",
              "ر",
              "ز",
              "س",
              "ش",
              "ص",
              "ض",
              "ط",
              "ظ",
              "ع",
              "غ",
              "ػ",
              "ؼ",
              "ؽ",
              "ؾ",
              "ؿ",
              "ف",
              "ق",
              "ك",
              "ل",
              "م",
              "ن",
              "ه",
              "و",
              "ى",
              "ي",
              "ٮ",
              "ٯ",
              "ٱ",
              "ٲ",
              "ٳ",
              "ٴ",
              "ٵ",
              "ٶ",
              "ٷ",
              "ٸ",
              "ٹ",
              "ٺ",
              "ٻ",
              "ټ",
              "ٽ",
              "پ",
              "ٿ",
              "ڀ",
              "ځ",
              "ڂ",
              "ڃ",
              "ڄ",
              "څ",
              "چ",
              "ڇ",
              "ڈ",
              "ډ",
              "ڊ",
              "ڋ",
              "ڌ",
              "ڍ",
              "ڎ",
              "ڏ",
              "ڐ",
              "ڑ",
              "ڒ",
              "ړ",
              "ڔ",
              "ڕ",
              "ږ",
              "ڗ",
              "ژ",
              "ڙ",
              "ښ",
              "ڛ",
              "ڜ",
              "ڝ",
              "ڞ",
              "ڟ",
              "ڠ",
              "ڡ",
              "ڢ",
              "ڣ",
              "ڤ",
              "ڥ",
              "ڦ",
              "ڧ",
              "ڨ",
              "ک",
              "ڪ",
              "ګ",
              "ڬ",
              "ڭ",
              "ڮ",
              "گ",
              "ڰ",
              "ڱ",
              "ڲ",
              "ڳ",
              "ڴ",
              "ڵ",
              "ڶ",
              "ڷ",
              "ڸ",
              "ڹ",
              "ں",
              "ڻ",
              "ڼ",
              "ڽ",
              "ھ",
              "ڿ",
              "ۀ",
              "ہ",
              "ۂ",
              "ۃ",
              "ۄ",
              "ۅ",
              "ۆ",
              "ۇ",
              "ۈ",
              "ۉ",
              "ۊ",
              "ۋ",
              "ی",
              "ۍ",
              "ێ",
              "ۏ",
              "ې",
              "ۑ",
              "ے",
              "ۓ",
              "ە",
              "ۮ",
              "ۯ",
              "ۺ",
              "ۻ",
              "ۼ",
              "ۿ",
              "ܐ",
              "ܒ",
              "ܓ",
              "ܔ",
              "ܕ",
              "ܖ",
              "ܗ",
              "ܘ",
              "ܙ",
              "ܚ",
              "ܛ",
              "ܜ",
              "ܝ",
              "ܞ",
              "ܟ",
              "ܠ",
              "ܡ",
              "ܢ",
              "ܣ",
              "ܤ",
              "ܥ",
              "ܦ",
              "ܧ",
              "ܨ",
              "ܩ",
              "ܪ",
              "ܫ",
              "ܬ",
              "ܭ",
              "ܮ",
              "ܯ",
              "ݍ",
              "ݎ",
              "ݏ",
              "ݐ",
              "ݑ",
              "ݒ",
              "ݓ",
              "ݔ",
              "ݕ",
              "ݖ",
              "ݗ",
              "ݘ",
              "ݙ",
              "ݚ",
              "ݛ",
              "ݜ",
              "ݝ",
              "ݞ",
              "ݟ",
              "ݠ",
              "ݡ",
              "ݢ",
              "ݣ",
              "ݤ",
              "ݥ",
              "ݦ",
              "ݧ",
              "ݨ",
              "ݩ",
              "ݪ",
              "ݫ",
              "ݬ",
              "ݭ",
              "ݮ",
              "ݯ",
              "ݰ",
              "ݱ",
              "ݲ",
              "ݳ",
              "ݴ",
              "ݵ",
              "ݶ",
              "ݷ",
              "ݸ",
              "ݹ",
              "ݺ",
              "ݻ",
              "ݼ",
              "ݽ",
              "ݾ",
              "ݿ",
              "ހ",
              "ށ",
              "ނ",
              "ރ",
              "ބ",
              "ޅ",
              "ކ",
              "އ",
              "ވ",
              "މ",
              "ފ",
              "ދ",
              "ތ",
              "ލ",
              "ގ",
              "ޏ",
              "ސ",
              "ޑ",
              "ޒ",
              "ޓ",
              "ޔ",
              "ޕ",
              "ޖ",
              "ޗ",
              "ޘ",
              "ޙ",
              "ޚ",
              "ޛ",
              "ޜ",
              "ޝ",
              "ޞ",
              "ޟ",
              "ޠ",
              "ޡ",
              "ޢ",
              "ޣ",
              "ޤ",
              "ޥ",
              "ޱ",
              "ߊ",
              "ߋ",
              "ߌ",
              "ߍ",
              "ߎ",
              "ߏ",
              "ߐ",
              "ߑ",
              "ߒ",
              "ߓ",
              "ߔ",
              "ߕ",
              "ߖ",
              "ߗ",
              "ߘ",
              "ߙ",
              "ߚ",
              "ߛ",
              "ߜ",
              "ߝ",
              "ߞ",
              "ߟ",
              "ߠ",
              "ߡ",
              "ߢ",
              "ߣ",
              "ߤ",
              "ߥ",
              "ߦ",
              "ߧ",
              "ߨ",
              "ߩ",
              "ߪ",
              "ऄ",
              "अ",
              "आ",
              "इ",
              "ई",
              "उ",
              "ऊ",
              "ऋ",
              "ऌ",
              "ऍ",
              "ऎ",
              "ए",
              "ऐ",
              "ऑ",
              "ऒ",
              "ओ",
              "औ",
              "क",
              "ख",
              "ग",
              "घ",
              "ङ",
              "च",
              "छ",
              "ज",
              "झ",
              "ञ",
              "ट",
              "ठ",
              "ड",
              "ढ",
              "ण",
              "त",
              "थ",
              "द",
              "ध",
              "न",
              "ऩ",
              "प",
              "फ",
              "ब",
              "भ",
              "म",
              "य",
              "र",
              "ऱ",
              "ल",
              "ळ",
              "ऴ",
              "व",
              "श",
              "ष",
              "स",
              "ह",
              "ऽ",
              "ॐ",
              "क़",
              "ख़",
              "ग़",
              "ज़",
              "ड़",
              "ढ़",
              "फ़",
              "य़",
              "ॠ",
              "ॡ",
              "ॲ",
              "ॻ",
              "ॼ",
              "ॽ",
              "ॾ",
              "ॿ",
              "অ",
              "আ",
              "ই",
              "ঈ",
              "উ",
              "ঊ",
              "ঋ",
              "ঌ",
              "এ",
              "ঐ",
              "ও",
              "ঔ",
              "ক",
              "খ",
              "গ",
              "ঘ",
              "ঙ",
              "চ",
              "ছ",
              "জ",
              "ঝ",
              "ঞ",
              "ট",
              "ঠ",
              "ড",
              "ঢ",
              "ণ",
              "ত",
              "থ",
              "দ",
              "ধ",
              "ন",
              "প",
              "ফ",
              "ব",
              "ভ",
              "ম",
              "য",
              "র",
              "ল",
              "শ",
              "ষ",
              "স",
              "হ",
              "ঽ",
              "ৎ",
              "ড়",
              "ঢ়",
              "য়",
              "ৠ",
              "ৡ",
              "ৰ",
              "ৱ",
              "ਅ",
              "ਆ",
              "ਇ",
              "ਈ",
              "ਉ",
              "ਊ",
              "ਏ",
              "ਐ",
              "ਓ",
              "ਔ",
              "ਕ",
              "ਖ",
              "ਗ",
              "ਘ",
              "ਙ",
              "ਚ",
              "ਛ",
              "ਜ",
              "ਝ",
              "ਞ",
              "ਟ",
              "ਠ",
              "ਡ",
              "ਢ",
              "ਣ",
              "ਤ",
              "ਥ",
              "ਦ",
              "ਧ",
              "ਨ",
              "ਪ",
              "ਫ",
              "ਬ",
              "ਭ",
              "ਮ",
              "ਯ",
              "ਰ",
              "ਲ",
              "ਲ਼",
              "ਵ",
              "ਸ਼",
              "ਸ",
              "ਹ",
              "ਖ਼",
              "ਗ਼",
              "ਜ਼",
              "ੜ",
              "ਫ਼",
              "ੲ",
              "ੳ",
              "ੴ",
              "અ",
              "આ",
              "ઇ",
              "ઈ",
              "ઉ",
              "ઊ",
              "ઋ",
              "ઌ",
              "ઍ",
              "એ",
              "ઐ",
              "ઑ",
              "ઓ",
              "ઔ",
              "ક",
              "ખ",
              "ગ",
              "ઘ",
              "ઙ",
              "ચ",
              "છ",
              "જ",
              "ઝ",
              "ઞ",
              "ટ",
              "ઠ",
              "ડ",
              "ઢ",
              "ણ",
              "ત",
              "થ",
              "દ",
              "ધ",
              "ન",
              "પ",
              "ફ",
              "બ",
              "ભ",
              "મ",
              "ય",
              "ર",
              "લ",
              "ળ",
              "વ",
              "શ",
              "ષ",
              "સ",
              "હ",
              "ઽ",
              "ૐ",
              "ૠ",
              "ૡ",
              "ଅ",
              "ଆ",
              "ଇ",
              "ଈ",
              "ଉ",
              "ଊ",
              "ଋ",
              "ଌ",
              "ଏ",
              "ଐ",
              "ଓ",
              "ଔ",
              "କ",
              "ଖ",
              "ଗ",
              "ଘ",
              "ଙ",
              "ଚ",
              "ଛ",
              "ଜ",
              "ଝ",
              "ଞ",
              "ଟ",
              "ଠ",
              "ଡ",
              "ଢ",
              "ଣ",
              "ତ",
              "ଥ",
              "ଦ",
              "ଧ",
              "ନ",
              "ପ",
              "ଫ",
              "ବ",
              "ଭ",
              "ମ",
              "ଯ",
              "ର",
              "ଲ",
              "ଳ",
              "ଵ",
              "ଶ",
              "ଷ",
              "ସ",
              "ହ",
              "ଽ",
              "ଡ଼",
              "ଢ଼",
              "ୟ",
              "ୠ",
              "ୡ",
              "ୱ",
              "ஃ",
              "அ",
              "ஆ",
              "இ",
              "ஈ",
              "உ",
              "ஊ",
              "எ",
              "ஏ",
              "ஐ",
              "ஒ",
              "ஓ",
              "ஔ",
              "க",
              "ங",
              "ச",
              "ஜ",
              "ஞ",
              "ட",
              "ண",
              "த",
              "ந",
              "ன",
              "ப",
              "ம",
              "ய",
              "ர",
              "ற",
              "ல",
              "ள",
              "ழ",
              "வ",
              "ஶ",
              "ஷ",
              "ஸ",
              "ஹ",
              "ௐ",
              "అ",
              "ఆ",
              "ఇ",
              "ఈ",
              "ఉ",
              "ఊ",
              "ఋ",
              "ఌ",
              "ఎ",
              "ఏ",
              "ఐ",
              "ఒ",
              "ఓ",
              "ఔ",
              "క",
              "ఖ",
              "గ",
              "ఘ",
              "ఙ",
              "చ",
              "ఛ",
              "జ",
              "ఝ",
              "ఞ",
              "ట",
              "ఠ",
              "డ",
              "ఢ",
              "ణ",
              "త",
              "థ",
              "ద",
              "ధ",
              "న",
              "ప",
              "ఫ",
              "బ",
              "భ",
              "మ",
              "య",
              "ర",
              "ఱ",
              "ల",
              "ళ",
              "వ",
              "శ",
              "ష",
              "స",
              "హ",
              "ఽ",
              "ౘ",
              "ౙ",
              "ౠ",
              "ౡ",
              "ಅ",
              "ಆ",
              "ಇ",
              "ಈ",
              "ಉ",
              "ಊ",
              "ಋ",
              "ಌ",
              "ಎ",
              "ಏ",
              "ಐ",
              "ಒ",
              "ಓ",
              "ಔ",
              "ಕ",
              "ಖ",
              "ಗ",
              "ಘ",
              "ಙ",
              "ಚ",
              "ಛ",
              "ಜ",
              "ಝ",
              "ಞ",
              "ಟ",
              "ಠ",
              "ಡ",
              "ಢ",
              "ಣ",
              "ತ",
              "ಥ",
              "ದ",
              "ಧ",
              "ನ",
              "ಪ",
              "ಫ",
              "ಬ",
              "ಭ",
              "ಮ",
              "ಯ",
              "ರ",
              "ಱ",
              "ಲ",
              "ಳ",
              "ವ",
              "ಶ",
              "ಷ",
              "ಸ",
              "ಹ",
              "ಽ",
              "ೞ",
              "ೠ",
              "ೡ",
              "അ",
              "ആ",
              "ഇ",
              "ഈ",
              "ഉ",
              "ഊ",
              "ഋ",
              "ഌ",
              "എ",
              "ഏ",
              "ഐ",
              "ഒ",
              "ഓ",
              "ഔ",
              "ക",
              "ഖ",
              "ഗ",
              "ഘ",
              "ങ",
              "ച",
              "ഛ",
              "ജ",
              "ഝ",
              "ഞ",
              "ട",
              "ഠ",
              "ഡ",
              "ഢ",
              "ണ",
              "ത",
              "ഥ",
              "ദ",
              "ധ",
              "ന",
              "പ",
              "ഫ",
              "ബ",
              "ഭ",
              "മ",
              "യ",
              "ര",
              "റ",
              "ല",
              "ള",
              "ഴ",
              "വ",
              "ശ",
              "ഷ",
              "സ",
              "ഹ",
              "ഽ",
              "ൠ",
              "ൡ",
              "ൺ",
              "ൻ",
              "ർ",
              "ൽ",
              "ൾ",
              "ൿ",
              "අ",
              "ආ",
              "ඇ",
              "ඈ",
              "ඉ",
              "ඊ",
              "උ",
              "ඌ",
              "ඍ",
              "ඎ",
              "ඏ",
              "ඐ",
              "එ",
              "ඒ",
              "ඓ",
              "ඔ",
              "ඕ",
              "ඖ",
              "ක",
              "ඛ",
              "ග",
              "ඝ",
              "ඞ",
              "ඟ",
              "ච",
              "ඡ",
              "ජ",
              "ඣ",
              "ඤ",
              "ඥ",
              "ඦ",
              "ට",
              "ඨ",
              "ඩ",
              "ඪ",
              "ණ",
              "ඬ",
              "ත",
              "ථ",
              "ද",
              "ධ",
              "න",
              "ඳ",
              "ප",
              "ඵ",
              "බ",
              "භ",
              "ම",
              "ඹ",
              "ය",
              "ර",
              "ල",
              "ව",
              "ශ",
              "ෂ",
              "ස",
              "හ",
              "ළ",
              "ෆ",
              "ก",
              "ข",
              "ฃ",
              "ค",
              "ฅ",
              "ฆ",
              "ง",
              "จ",
              "ฉ",
              "ช",
              "ซ",
              "ฌ",
              "ญ",
              "ฎ",
              "ฏ",
              "ฐ",
              "ฑ",
              "ฒ",
              "ณ",
              "ด",
              "ต",
              "ถ",
              "ท",
              "ธ",
              "น",
              "บ",
              "ป",
              "ผ",
              "ฝ",
              "พ",
              "ฟ",
              "ภ",
              "ม",
              "ย",
              "ร",
              "ฤ",
              "ล",
              "ฦ",
              "ว",
              "ศ",
              "ษ",
              "ส",
              "ห",
              "ฬ",
              "อ",
              "ฮ",
              "ฯ",
              "ะ",
              "า",
              "ำ",
              "เ",
              "แ",
              "โ",
              "ใ",
              "ไ",
              "ๅ",
              "ກ",
              "ຂ",
              "ຄ",
              "ງ",
              "ຈ",
              "ຊ",
              "ຍ",
              "ດ",
              "ຕ",
              "ຖ",
              "ທ",
              "ນ",
              "ບ",
              "ປ",
              "ຜ",
              "ຝ",
              "ພ",
              "ຟ",
              "ມ",
              "ຢ",
              "ຣ",
              "ລ",
              "ວ",
              "ສ",
              "ຫ",
              "ອ",
              "ຮ",
              "ຯ",
              "ະ",
              "າ",
              "ຳ",
              "ຽ",
              "ເ",
              "ແ",
              "ໂ",
              "ໃ",
              "ໄ",
              "ໜ",
              "ໝ",
              "ༀ",
              "ཀ",
              "ཁ",
              "ག",
              "གྷ",
              "ང",
              "ཅ",
              "ཆ",
              "ཇ",
              "ཉ",
              "ཊ",
              "ཋ",
              "ཌ",
              "ཌྷ",
              "ཎ",
              "ཏ",
              "ཐ",
              "ད",
              "དྷ",
              "ན",
              "པ",
              "ཕ",
              "བ",
              "བྷ",
              "མ",
              "ཙ",
              "ཚ",
              "ཛ",
              "ཛྷ",
              "ཝ",
              "ཞ",
              "ཟ",
              "འ",
              "ཡ",
              "ར",
              "ལ",
              "ཤ",
              "ཥ",
              "ས",
              "ཧ",
              "ཨ",
              "ཀྵ",
              "ཪ",
              "ཫ",
              "ཬ",
              "ྈ",
              "ྉ",
              "ྊ",
              "ྋ",
              "က",
              "ခ",
              "ဂ",
              "ဃ",
              "င",
              "စ",
              "ဆ",
              "ဇ",
              "ဈ",
              "ဉ",
              "ည",
              "ဋ",
              "ဌ",
              "ဍ",
              "ဎ",
              "ဏ",
              "တ",
              "ထ",
              "ဒ",
              "ဓ",
              "န",
              "ပ",
              "ဖ",
              "ဗ",
              "ဘ",
              "မ",
              "ယ",
              "ရ",
              "လ",
              "ဝ",
              "သ",
              "ဟ",
              "ဠ",
              "အ",
              "ဢ",
              "ဣ",
              "ဤ",
              "ဥ",
              "ဦ",
              "ဧ",
              "ဨ",
              "ဩ",
              "ဪ",
              "ဿ",
              "ၐ",
              "ၑ",
              "ၒ",
              "ၓ",
              "ၔ",
              "ၕ",
              "ၚ",
              "ၛ",
              "ၜ",
              "ၝ",
              "ၡ",
              "ၥ",
              "ၦ",
              "ၮ",
              "ၯ",
              "ၰ",
              "ၵ",
              "ၶ",
              "ၷ",
              "ၸ",
              "ၹ",
              "ၺ",
              "ၻ",
              "ၼ",
              "ၽ",
              "ၾ",
              "ၿ",
              "ႀ",
              "ႁ",
              "ႎ",
              "ა",
              "ბ",
              "გ",
              "დ",
              "ე",
              "ვ",
              "ზ",
              "თ",
              "ი",
              "კ",
              "ლ",
              "მ",
              "ნ",
              "ო",
              "პ",
              "ჟ",
              "რ",
              "ს",
              "ტ",
              "უ",
              "ფ",
              "ქ",
              "ღ",
              "ყ",
              "შ",
              "ჩ",
              "ც",
              "ძ",
              "წ",
              "ჭ",
              "ხ",
              "ჯ",
              "ჰ",
              "ჱ",
              "ჲ",
              "ჳ",
              "ჴ",
              "ჵ",
              "ჶ",
              "ჷ",
              "ჸ",
              "ჹ",
              "ჺ",
              "ᄀ",
              "ᄁ",
              "ᄂ",
              "ᄃ",
              "ᄄ",
              "ᄅ",
              "ᄆ",
              "ᄇ",
              "ᄈ",
              "ᄉ",
              "ᄊ",
              "ᄋ",
              "ᄌ",
              "ᄍ",
              "ᄎ",
              "ᄏ",
              "ᄐ",
              "ᄑ",
              "ᄒ",
              "ᄓ",
              "ᄔ",
              "ᄕ",
              "ᄖ",
              "ᄗ",
              "ᄘ",
              "ᄙ",
              "ᄚ",
              "ᄛ",
              "ᄜ",
              "ᄝ",
              "ᄞ",
              "ᄟ",
              "ᄠ",
              "ᄡ",
              "ᄢ",
              "ᄣ",
              "ᄤ",
              "ᄥ",
              "ᄦ",
              "ᄧ",
              "ᄨ",
              "ᄩ",
              "ᄪ",
              "ᄫ",
              "ᄬ",
              "ᄭ",
              "ᄮ",
              "ᄯ",
              "ᄰ",
              "ᄱ",
              "ᄲ",
              "ᄳ",
              "ᄴ",
              "ᄵ",
              "ᄶ",
              "ᄷ",
              "ᄸ",
              "ᄹ",
              "ᄺ",
              "ᄻ",
              "ᄼ",
              "ᄽ",
              "ᄾ",
              "ᄿ",
              "ᅀ",
              "ᅁ",
              "ᅂ",
              "ᅃ",
              "ᅄ",
              "ᅅ",
              "ᅆ",
              "ᅇ",
              "ᅈ",
              "ᅉ",
              "ᅊ",
              "ᅋ",
              "ᅌ",
              "ᅍ",
              "ᅎ",
              "ᅏ",
              "ᅐ",
              "ᅑ",
              "ᅒ",
              "ᅓ",
              "ᅔ",
              "ᅕ",
              "ᅖ",
              "ᅗ",
              "ᅘ",
              "ᅙ",
              "ᅟ",
              "ᅠ",
              "ᅡ",
              "ᅢ",
              "ᅣ",
              "ᅤ",
              "ᅥ",
              "ᅦ",
              "ᅧ",
              "ᅨ",
              "ᅩ",
              "ᅪ",
              "ᅫ",
              "ᅬ",
              "ᅭ",
              "ᅮ",
              "ᅯ",
              "ᅰ",
              "ᅱ",
              "ᅲ",
              "ᅳ",
              "ᅴ",
              "ᅵ",
              "ᅶ",
              "ᅷ",
              "ᅸ",
              "ᅹ",
              "ᅺ",
              "ᅻ",
              "ᅼ",
              "ᅽ",
              "ᅾ",
              "ᅿ",
              "ᆀ",
              "ᆁ",
              "ᆂ",
              "ᆃ",
              "ᆄ",
              "ᆅ",
              "ᆆ",
              "ᆇ",
              "ᆈ",
              "ᆉ",
              "ᆊ",
              "ᆋ",
              "ᆌ",
              "ᆍ",
              "ᆎ",
              "ᆏ",
              "ᆐ",
              "ᆑ",
              "ᆒ",
              "ᆓ",
              "ᆔ",
              "ᆕ",
              "ᆖ",
              "ᆗ",
              "ᆘ",
              "ᆙ",
              "ᆚ",
              "ᆛ",
              "ᆜ",
              "ᆝ",
              "ᆞ",
              "ᆟ",
              "ᆠ",
              "ᆡ",
              "ᆢ",
              "ᆨ",
              "ᆩ",
              "ᆪ",
              "ᆫ",
              "ᆬ",
              "ᆭ",
              "ᆮ",
              "ᆯ",
              "ᆰ",
              "ᆱ",
              "ᆲ",
              "ᆳ",
              "ᆴ",
              "ᆵ",
              "ᆶ",
              "ᆷ",
              "ᆸ",
              "ᆹ",
              "ᆺ",
              "ᆻ",
              "ᆼ",
              "ᆽ",
              "ᆾ",
              "ᆿ",
              "ᇀ",
              "ᇁ",
              "ᇂ",
              "ᇃ",
              "ᇄ",
              "ᇅ",
              "ᇆ",
              "ᇇ",
              "ᇈ",
              "ᇉ",
              "ᇊ",
              "ᇋ",
              "ᇌ",
              "ᇍ",
              "ᇎ",
              "ᇏ",
              "ᇐ",
              "ᇑ",
              "ᇒ",
              "ᇓ",
              "ᇔ",
              "ᇕ",
              "ᇖ",
              "ᇗ",
              "ᇘ",
              "ᇙ",
              "ᇚ",
              "ᇛ",
              "ᇜ",
              "ᇝ",
              "ᇞ",
              "ᇟ",
              "ᇠ",
              "ᇡ",
              "ᇢ",
              "ᇣ",
              "ᇤ",
              "ᇥ",
              "ᇦ",
              "ᇧ",
              "ᇨ",
              "ᇩ",
              "ᇪ",
              "ᇫ",
              "ᇬ",
              "ᇭ",
              "ᇮ",
              "ᇯ",
              "ᇰ",
              "ᇱ",
              "ᇲ",
              "ᇳ",
              "ᇴ",
              "ᇵ",
              "ᇶ",
              "ᇷ",
              "ᇸ",
              "ᇹ",
              "ሀ",
              "ሁ",
              "ሂ",
              "ሃ",
              "ሄ",
              "ህ",
              "ሆ",
              "ሇ",
              "ለ",
              "ሉ",
              "ሊ",
              "ላ",
              "ሌ",
              "ል",
              "ሎ",
              "ሏ",
              "ሐ",
              "ሑ",
              "ሒ",
              "ሓ",
              "ሔ",
              "ሕ",
              "ሖ",
              "ሗ",
              "መ",
              "ሙ",
              "ሚ",
              "ማ",
              "ሜ",
              "ም",
              "ሞ",
              "ሟ",
              "ሠ",
              "ሡ",
              "ሢ",
              "ሣ",
              "ሤ",
              "ሥ",
              "ሦ",
              "ሧ",
              "ረ",
              "ሩ",
              "ሪ",
              "ራ",
              "ሬ",
              "ር",
              "ሮ",
              "ሯ",
              "ሰ",
              "ሱ",
              "ሲ",
              "ሳ",
              "ሴ",
              "ስ",
              "ሶ",
              "ሷ",
              "ሸ",
              "ሹ",
              "ሺ",
              "ሻ",
              "ሼ",
              "ሽ",
              "ሾ",
              "ሿ",
              "ቀ",
              "ቁ",
              "ቂ",
              "ቃ",
              "ቄ",
              "ቅ",
              "ቆ",
              "ቇ",
              "ቈ",
              "ቊ",
              "ቋ",
              "ቌ",
              "ቍ",
              "ቐ",
              "ቑ",
              "ቒ",
              "ቓ",
              "ቔ",
              "ቕ",
              "ቖ",
              "ቘ",
              "ቚ",
              "ቛ",
              "ቜ",
              "ቝ",
              "በ",
              "ቡ",
              "ቢ",
              "ባ",
              "ቤ",
              "ብ",
              "ቦ",
              "ቧ",
              "ቨ",
              "ቩ",
              "ቪ",
              "ቫ",
              "ቬ",
              "ቭ",
              "ቮ",
              "ቯ",
              "ተ",
              "ቱ",
              "ቲ",
              "ታ",
              "ቴ",
              "ት",
              "ቶ",
              "ቷ",
              "ቸ",
              "ቹ",
              "ቺ",
              "ቻ",
              "ቼ",
              "ች",
              "ቾ",
              "ቿ",
              "ኀ",
              "ኁ",
              "ኂ",
              "ኃ",
              "ኄ",
              "ኅ",
              "ኆ",
              "ኇ",
              "ኈ",
              "ኊ",
              "ኋ",
              "ኌ",
              "ኍ",
              "ነ",
              "ኑ",
              "ኒ",
              "ና",
              "ኔ",
              "ን",
              "ኖ",
              "ኗ",
              "ኘ",
              "ኙ",
              "ኚ",
              "ኛ",
              "ኜ",
              "ኝ",
              "ኞ",
              "ኟ",
              "አ",
              "ኡ",
              "ኢ",
              "ኣ",
              "ኤ",
              "እ",
              "ኦ",
              "ኧ",
              "ከ",
              "ኩ",
              "ኪ",
              "ካ",
              "ኬ",
              "ክ",
              "ኮ",
              "ኯ",
              "ኰ",
              "ኲ",
              "ኳ",
              "ኴ",
              "ኵ",
              "ኸ",
              "ኹ",
              "ኺ",
              "ኻ",
              "ኼ",
              "ኽ",
              "ኾ",
              "ዀ",
              "ዂ",
              "ዃ",
              "ዄ",
              "ዅ",
              "ወ",
              "ዉ",
              "ዊ",
              "ዋ",
              "ዌ",
              "ው",
              "ዎ",
              "ዏ",
              "ዐ",
              "ዑ",
              "ዒ",
              "ዓ",
              "ዔ",
              "ዕ",
              "ዖ",
              "ዘ",
              "ዙ",
              "ዚ",
              "ዛ",
              "ዜ",
              "ዝ",
              "ዞ",
              "ዟ",
              "ዠ",
              "ዡ",
              "ዢ",
              "ዣ",
              "ዤ",
              "ዥ",
              "ዦ",
              "ዧ",
              "የ",
              "ዩ",
              "ዪ",
              "ያ",
              "ዬ",
              "ይ",
              "ዮ",
              "ዯ",
              "ደ",
              "ዱ",
              "ዲ",
              "ዳ",
              "ዴ",
              "ድ",
              "ዶ",
              "ዷ",
              "ዸ",
              "ዹ",
              "ዺ",
              "ዻ",
              "ዼ",
              "ዽ",
              "ዾ",
              "ዿ",
              "ጀ",
              "ጁ",
              "ጂ",
              "ጃ",
              "ጄ",
              "ጅ",
              "ጆ",
              "ጇ",
              "ገ",
              "ጉ",
              "ጊ",
              "ጋ",
              "ጌ",
              "ግ",
              "ጎ",
              "ጏ",
              "ጐ",
              "ጒ",
              "ጓ",
              "ጔ",
              "ጕ",
              "ጘ",
              "ጙ",
              "ጚ",
              "ጛ",
              "ጜ",
              "ጝ",
              "ጞ",
              "ጟ",
              "ጠ",
              "ጡ",
              "ጢ",
              "ጣ",
              "ጤ",
              "ጥ",
              "ጦ",
              "ጧ",
              "ጨ",
              "ጩ",
              "ጪ",
              "ጫ",
              "ጬ",
              "ጭ",
              "ጮ",
              "ጯ",
              "ጰ",
              "ጱ",
              "ጲ",
              "ጳ",
              "ጴ",
              "ጵ",
              "ጶ",
              "ጷ",
              "ጸ",
              "ጹ",
              "ጺ",
              "ጻ",
              "ጼ",
              "ጽ",
              "ጾ",
              "ጿ",
              "ፀ",
              "ፁ",
              "ፂ",
              "ፃ",
              "ፄ",
              "ፅ",
              "ፆ",
              "ፇ",
              "ፈ",
              "ፉ",
              "ፊ",
              "ፋ",
              "ፌ",
              "ፍ",
              "ፎ",
              "ፏ",
              "ፐ",
              "ፑ",
              "ፒ",
              "ፓ",
              "ፔ",
              "ፕ",
              "ፖ",
              "ፗ",
              "ፘ",
              "ፙ",
              "ፚ",
              "ᎀ",
              "ᎁ",
              "ᎂ",
              "ᎃ",
              "ᎄ",
              "ᎅ",
              "ᎆ",
              "ᎇ",
              "ᎈ",
              "ᎉ",
              "ᎊ",
              "ᎋ",
              "ᎌ",
              "ᎍ",
              "ᎎ",
              "ᎏ",
              "Ꭰ",
              "Ꭱ",
              "Ꭲ",
              "Ꭳ",
              "Ꭴ",
              "Ꭵ",
              "Ꭶ",
              "Ꭷ",
              "Ꭸ",
              "Ꭹ",
              "Ꭺ",
              "Ꭻ",
              "Ꭼ",
              "Ꭽ",
              "Ꭾ",
              "Ꭿ",
              "Ꮀ",
              "Ꮁ",
              "Ꮂ",
              "Ꮃ",
              "Ꮄ",
              "Ꮅ",
              "Ꮆ",
              "Ꮇ",
              "Ꮈ",
              "Ꮉ",
              "Ꮊ",
              "Ꮋ",
              "Ꮌ",
              "Ꮍ",
              "Ꮎ",
              "Ꮏ",
              "Ꮐ",
              "Ꮑ",
              "Ꮒ",
              "Ꮓ",
              "Ꮔ",
              "Ꮕ",
              "Ꮖ",
              "Ꮗ",
              "Ꮘ",
              "Ꮙ",
              "Ꮚ",
              "Ꮛ",
              "Ꮜ",
              "Ꮝ",
              "Ꮞ",
              "Ꮟ",
              "Ꮠ",
              "Ꮡ",
              "Ꮢ",
              "Ꮣ",
              "Ꮤ",
              "Ꮥ",
              "Ꮦ",
              "Ꮧ",
              "Ꮨ",
              "Ꮩ",
              "Ꮪ",
              "Ꮫ",
              "Ꮬ",
              "Ꮭ",
              "Ꮮ",
              "Ꮯ",
              "Ꮰ",
              "Ꮱ",
              "Ꮲ",
              "Ꮳ",
              "Ꮴ",
              "Ꮵ",
              "Ꮶ",
              "Ꮷ",
              "Ꮸ",
              "Ꮹ",
              "Ꮺ",
              "Ꮻ",
              "Ꮼ",
              "Ꮽ",
              "Ꮾ",
              "Ꮿ",
              "Ᏸ",
              "Ᏹ",
              "Ᏺ",
              "Ᏻ",
              "Ᏼ",
              "ᐁ",
              "ᐂ",
              "ᐃ",
              "ᐄ",
              "ᐅ",
              "ᐆ",
              "ᐇ",
              "ᐈ",
              "ᐉ",
              "ᐊ",
              "ᐋ",
              "ᐌ",
              "ᐍ",
              "ᐎ",
              "ᐏ",
              "ᐐ",
              "ᐑ",
              "ᐒ",
              "ᐓ",
              "ᐔ",
              "ᐕ",
              "ᐖ",
              "ᐗ",
              "ᐘ",
              "ᐙ",
              "ᐚ",
              "ᐛ",
              "ᐜ",
              "ᐝ",
              "ᐞ",
              "ᐟ",
              "ᐠ",
              "ᐡ",
              "ᐢ",
              "ᐣ",
              "ᐤ",
              "ᐥ",
              "ᐦ",
              "ᐧ",
              "ᐨ",
              "ᐩ",
              "ᐪ",
              "ᐫ",
              "ᐬ",
              "ᐭ",
              "ᐮ",
              "ᐯ",
              "ᐰ",
              "ᐱ",
              "ᐲ",
              "ᐳ",
              "ᐴ",
              "ᐵ",
              "ᐶ",
              "ᐷ",
              "ᐸ",
              "ᐹ",
              "ᐺ",
              "ᐻ",
              "ᐼ",
              "ᐽ",
              "ᐾ",
              "ᐿ",
              "ᑀ",
              "ᑁ",
              "ᑂ",
              "ᑃ",
              "ᑄ",
              "ᑅ",
              "ᑆ",
              "ᑇ",
              "ᑈ",
              "ᑉ",
              "ᑊ",
              "ᑋ",
              "ᑌ",
              "ᑍ",
              "ᑎ",
              "ᑏ",
              "ᑐ",
              "ᑑ",
              "ᑒ",
              "ᑓ",
              "ᑔ",
              "ᑕ",
              "ᑖ",
              "ᑗ",
              "ᑘ",
              "ᑙ",
              "ᑚ",
              "ᑛ",
              "ᑜ",
              "ᑝ",
              "ᑞ",
              "ᑟ",
              "ᑠ",
              "ᑡ",
              "ᑢ",
              "ᑣ",
              "ᑤ",
              "ᑥ",
              "ᑦ",
              "ᑧ",
              "ᑨ",
              "ᑩ",
              "ᑪ",
              "ᑫ",
              "ᑬ",
              "ᑭ",
              "ᑮ",
              "ᑯ",
              "ᑰ",
              "ᑱ",
              "ᑲ",
              "ᑳ",
              "ᑴ",
              "ᑵ",
              "ᑶ",
              "ᑷ",
              "ᑸ",
              "ᑹ",
              "ᑺ",
              "ᑻ",
              "ᑼ",
              "ᑽ",
              "ᑾ",
              "ᑿ",
              "ᒀ",
              "ᒁ",
              "ᒂ",
              "ᒃ",
              "ᒄ",
              "ᒅ",
              "ᒆ",
              "ᒇ",
              "ᒈ",
              "ᒉ",
              "ᒊ",
              "ᒋ",
              "ᒌ",
              "ᒍ",
              "ᒎ",
              "ᒏ",
              "ᒐ",
              "ᒑ",
              "ᒒ",
              "ᒓ",
              "ᒔ",
              "ᒕ",
              "ᒖ",
              "ᒗ",
              "ᒘ",
              "ᒙ",
              "ᒚ",
              "ᒛ",
              "ᒜ",
              "ᒝ",
              "ᒞ",
              "ᒟ",
              "ᒠ",
              "ᒡ",
              "ᒢ",
              "ᒣ",
              "ᒤ",
              "ᒥ",
              "ᒦ",
              "ᒧ",
              "ᒨ",
              "ᒩ",
              "ᒪ",
              "ᒫ",
              "ᒬ",
              "ᒭ",
              "ᒮ",
              "ᒯ",
              "ᒰ",
              "ᒱ",
              "ᒲ",
              "ᒳ",
              "ᒴ",
              "ᒵ",
              "ᒶ",
              "ᒷ",
              "ᒸ",
              "ᒹ",
              "ᒺ",
              "ᒻ",
              "ᒼ",
              "ᒽ",
              "ᒾ",
              "ᒿ",
              "ᓀ",
              "ᓁ",
              "ᓂ",
              "ᓃ",
              "ᓄ",
              "ᓅ",
              "ᓆ",
              "ᓇ",
              "ᓈ",
              "ᓉ",
              "ᓊ",
              "ᓋ",
              "ᓌ",
              "ᓍ",
              "ᓎ",
              "ᓏ",
              "ᓐ",
              "ᓑ",
              "ᓒ",
              "ᓓ",
              "ᓔ",
              "ᓕ",
              "ᓖ",
              "ᓗ",
              "ᓘ",
              "ᓙ",
              "ᓚ",
              "ᓛ",
              "ᓜ",
              "ᓝ",
              "ᓞ",
              "ᓟ",
              "ᓠ",
              "ᓡ",
              "ᓢ",
              "ᓣ",
              "ᓤ",
              "ᓥ",
              "ᓦ",
              "ᓧ",
              "ᓨ",
              "ᓩ",
              "ᓪ",
              "ᓫ",
              "ᓬ",
              "ᓭ",
              "ᓮ",
              "ᓯ",
              "ᓰ",
              "ᓱ",
              "ᓲ",
              "ᓳ",
              "ᓴ",
              "ᓵ",
              "ᓶ",
              "ᓷ",
              "ᓸ",
              "ᓹ",
              "ᓺ",
              "ᓻ",
              "ᓼ",
              "ᓽ",
              "ᓾ",
              "ᓿ",
              "ᔀ",
              "ᔁ",
              "ᔂ",
              "ᔃ",
              "ᔄ",
              "ᔅ",
              "ᔆ",
              "ᔇ",
              "ᔈ",
              "ᔉ",
              "ᔊ",
              "ᔋ",
              "ᔌ",
              "ᔍ",
              "ᔎ",
              "ᔏ",
              "ᔐ",
              "ᔑ",
              "ᔒ",
              "ᔓ",
              "ᔔ",
              "ᔕ",
              "ᔖ",
              "ᔗ",
              "ᔘ",
              "ᔙ",
              "ᔚ",
              "ᔛ",
              "ᔜ",
              "ᔝ",
              "ᔞ",
              "ᔟ",
              "ᔠ",
              "ᔡ",
              "ᔢ",
              "ᔣ",
              "ᔤ",
              "ᔥ",
              "ᔦ",
              "ᔧ",
              "ᔨ",
              "ᔩ",
              "ᔪ",
              "ᔫ",
              "ᔬ",
              "ᔭ",
              "ᔮ",
              "ᔯ",
              "ᔰ",
              "ᔱ",
              "ᔲ",
              "ᔳ",
              "ᔴ",
              "ᔵ",
              "ᔶ",
              "ᔷ",
              "ᔸ",
              "ᔹ",
              "ᔺ",
              "ᔻ",
              "ᔼ",
              "ᔽ",
              "ᔾ",
              "ᔿ",
              "ᕀ",
              "ᕁ",
              "ᕂ",
              "ᕃ",
              "ᕄ",
              "ᕅ",
              "ᕆ",
              "ᕇ",
              "ᕈ",
              "ᕉ",
              "ᕊ",
              "ᕋ",
              "ᕌ",
              "ᕍ",
              "ᕎ",
              "ᕏ",
              "ᕐ",
              "ᕑ",
              "ᕒ",
              "ᕓ",
              "ᕔ",
              "ᕕ",
              "ᕖ",
              "ᕗ",
              "ᕘ",
              "ᕙ",
              "ᕚ",
              "ᕛ",
              "ᕜ",
              "ᕝ",
              "ᕞ",
              "ᕟ",
              "ᕠ",
              "ᕡ",
              "ᕢ",
              "ᕣ",
              "ᕤ",
              "ᕥ",
              "ᕦ",
              "ᕧ",
              "ᕨ",
              "ᕩ",
              "ᕪ",
              "ᕫ",
              "ᕬ",
              "ᕭ",
              "ᕮ",
              "ᕯ",
              "ᕰ",
              "ᕱ",
              "ᕲ",
              "ᕳ",
              "ᕴ",
              "ᕵ",
              "ᕶ",
              "ᕷ",
              "ᕸ",
              "ᕹ",
              "ᕺ",
              "ᕻ",
              "ᕼ",
              "ᕽ",
              "ᕾ",
              "ᕿ",
              "ᖀ",
              "ᖁ",
              "ᖂ",
              "ᖃ",
              "ᖄ",
              "ᖅ",
              "ᖆ",
              "ᖇ",
              "ᖈ",
              "ᖉ",
              "ᖊ",
              "ᖋ",
              "ᖌ",
              "ᖍ",
              "ᖎ",
              "ᖏ",
              "ᖐ",
              "ᖑ",
              "ᖒ",
              "ᖓ",
              "ᖔ",
              "ᖕ",
              "ᖖ",
              "ᖗ",
              "ᖘ",
              "ᖙ",
              "ᖚ",
              "ᖛ",
              "ᖜ",
              "ᖝ",
              "ᖞ",
              "ᖟ",
              "ᖠ",
              "ᖡ",
              "ᖢ",
              "ᖣ",
              "ᖤ",
              "ᖥ",
              "ᖦ",
              "ᖧ",
              "ᖨ",
              "ᖩ",
              "ᖪ",
              "ᖫ",
              "ᖬ",
              "ᖭ",
              "ᖮ",
              "ᖯ",
              "ᖰ",
              "ᖱ",
              "ᖲ",
              "ᖳ",
              "ᖴ",
              "ᖵ",
              "ᖶ",
              "ᖷ",
              "ᖸ",
              "ᖹ",
              "ᖺ",
              "ᖻ",
              "ᖼ",
              "ᖽ",
              "ᖾ",
              "ᖿ",
              "ᗀ",
              "ᗁ",
              "ᗂ",
              "ᗃ",
              "ᗄ",
              "ᗅ",
              "ᗆ",
              "ᗇ",
              "ᗈ",
              "ᗉ",
              "ᗊ",
              "ᗋ",
              "ᗌ",
              "ᗍ",
              "ᗎ",
              "ᗏ",
              "ᗐ",
              "ᗑ",
              "ᗒ",
              "ᗓ",
              "ᗔ",
              "ᗕ",
              "ᗖ",
              "ᗗ",
              "ᗘ",
              "ᗙ",
              "ᗚ",
              "ᗛ",
              "ᗜ",
              "ᗝ",
              "ᗞ",
              "ᗟ",
              "ᗠ",
              "ᗡ",
              "ᗢ",
              "ᗣ",
              "ᗤ",
              "ᗥ",
              "ᗦ",
              "ᗧ",
              "ᗨ",
              "ᗩ",
              "ᗪ",
              "ᗫ",
              "ᗬ",
              "ᗭ",
              "ᗮ",
              "ᗯ",
              "ᗰ",
              "ᗱ",
              "ᗲ",
              "ᗳ",
              "ᗴ",
              "ᗵ",
              "ᗶ",
              "ᗷ",
              "ᗸ",
              "ᗹ",
              "ᗺ",
              "ᗻ",
              "ᗼ",
              "ᗽ",
              "ᗾ",
              "ᗿ",
              "ᘀ",
              "ᘁ",
              "ᘂ",
              "ᘃ",
              "ᘄ",
              "ᘅ",
              "ᘆ",
              "ᘇ",
              "ᘈ",
              "ᘉ",
              "ᘊ",
              "ᘋ",
              "ᘌ",
              "ᘍ",
              "ᘎ",
              "ᘏ",
              "ᘐ",
              "ᘑ",
              "ᘒ",
              "ᘓ",
              "ᘔ",
              "ᘕ",
              "ᘖ",
              "ᘗ",
              "ᘘ",
              "ᘙ",
              "ᘚ",
              "ᘛ",
              "ᘜ",
              "ᘝ",
              "ᘞ",
              "ᘟ",
              "ᘠ",
              "ᘡ",
              "ᘢ",
              "ᘣ",
              "ᘤ",
              "ᘥ",
              "ᘦ",
              "ᘧ",
              "ᘨ",
              "ᘩ",
              "ᘪ",
              "ᘫ",
              "ᘬ",
              "ᘭ",
              "ᘮ",
              "ᘯ",
              "ᘰ",
              "ᘱ",
              "ᘲ",
              "ᘳ",
              "ᘴ",
              "ᘵ",
              "ᘶ",
              "ᘷ",
              "ᘸ",
              "ᘹ",
              "ᘺ",
              "ᘻ",
              "ᘼ",
              "ᘽ",
              "ᘾ",
              "ᘿ",
              "ᙀ",
              "ᙁ",
              "ᙂ",
              "ᙃ",
              "ᙄ",
              "ᙅ",
              "ᙆ",
              "ᙇ",
              "ᙈ",
              "ᙉ",
              "ᙊ",
              "ᙋ",
              "ᙌ",
              "ᙍ",
              "ᙎ",
              "ᙏ",
              "ᙐ",
              "ᙑ",
              "ᙒ",
              "ᙓ",
              "ᙔ",
              "ᙕ",
              "ᙖ",
              "ᙗ",
              "ᙘ",
              "ᙙ",
              "ᙚ",
              "ᙛ",
              "ᙜ",
              "ᙝ",
              "ᙞ",
              "ᙟ",
              "ᙠ",
              "ᙡ",
              "ᙢ",
              "ᙣ",
              "ᙤ",
              "ᙥ",
              "ᙦ",
              "ᙧ",
              "ᙨ",
              "ᙩ",
              "ᙪ",
              "ᙫ",
              "ᙬ",
              "ᙯ",
              "ᙰ",
              "ᙱ",
              "ᙲ",
              "ᙳ",
              "ᙴ",
              "ᙵ",
              "ᙶ",
              "ᚁ",
              "ᚂ",
              "ᚃ",
              "ᚄ",
              "ᚅ",
              "ᚆ",
              "ᚇ",
              "ᚈ",
              "ᚉ",
              "ᚊ",
              "ᚋ",
              "ᚌ",
              "ᚍ",
              "ᚎ",
              "ᚏ",
              "ᚐ",
              "ᚑ",
              "ᚒ",
              "ᚓ",
              "ᚔ",
              "ᚕ",
              "ᚖ",
              "ᚗ",
              "ᚘ",
              "ᚙ",
              "ᚚ",
              "ᚠ",
              "ᚡ",
              "ᚢ",
              "ᚣ",
              "ᚤ",
              "ᚥ",
              "ᚦ",
              "ᚧ",
              "ᚨ",
              "ᚩ",
              "ᚪ",
              "ᚫ",
              "ᚬ",
              "ᚭ",
              "ᚮ",
              "ᚯ",
              "ᚰ",
              "ᚱ",
              "ᚲ",
              "ᚳ",
              "ᚴ",
              "ᚵ",
              "ᚶ",
              "ᚷ",
              "ᚸ",
              "ᚹ",
              "ᚺ",
              "ᚻ",
              "ᚼ",
              "ᚽ",
              "ᚾ",
              "ᚿ",
              "ᛀ",
              "ᛁ",
              "ᛂ",
              "ᛃ",
              "ᛄ",
              "ᛅ",
              "ᛆ",
              "ᛇ",
              "ᛈ",
              "ᛉ",
              "ᛊ",
              "ᛋ",
              "ᛌ",
              "ᛍ",
              "ᛎ",
              "ᛏ",
              "ᛐ",
              "ᛑ",
              "ᛒ",
              "ᛓ",
              "ᛔ",
              "ᛕ",
              "ᛖ",
              "ᛗ",
              "ᛘ",
              "ᛙ",
              "ᛚ",
              "ᛛ",
              "ᛜ",
              "ᛝ",
              "ᛞ",
              "ᛟ",
              "ᛠ",
              "ᛡ",
              "ᛢ",
              "ᛣ",
              "ᛤ",
              "ᛥ",
              "ᛦ",
              "ᛧ",
              "ᛨ",
              "ᛩ",
              "ᛪ",
              "ᜀ",
              "ᜁ",
              "ᜂ",
              "ᜃ",
              "ᜄ",
              "ᜅ",
              "ᜆ",
              "ᜇ",
              "ᜈ",
              "ᜉ",
              "ᜊ",
              "ᜋ",
              "ᜌ",
              "ᜎ",
              "ᜏ",
              "ᜐ",
              "ᜑ",
              "ᜠ",
              "ᜡ",
              "ᜢ",
              "ᜣ",
              "ᜤ",
              "ᜥ",
              "ᜦ",
              "ᜧ",
              "ᜨ",
              "ᜩ",
              "ᜪ",
              "ᜫ",
              "ᜬ",
              "ᜭ",
              "ᜮ",
              "ᜯ",
              "ᜰ",
              "ᜱ",
              "ᝀ",
              "ᝁ",
              "ᝂ",
              "ᝃ",
              "ᝄ",
              "ᝅ",
              "ᝆ",
              "ᝇ",
              "ᝈ",
              "ᝉ",
              "ᝊ",
              "ᝋ",
              "ᝌ",
              "ᝍ",
              "ᝎ",
              "ᝏ",
              "ᝐ",
              "ᝑ",
              "ᝠ",
              "ᝡ",
              "ᝢ",
              "ᝣ",
              "ᝤ",
              "ᝥ",
              "ᝦ",
              "ᝧ",
              "ᝨ",
              "ᝩ",
              "ᝪ",
              "ᝫ",
              "ᝬ",
              "ᝮ",
              "ᝯ",
              "ᝰ",
              "ក",
              "ខ",
              "គ",
              "ឃ",
              "ង",
              "ច",
              "ឆ",
              "ជ",
              "ឈ",
              "ញ",
              "ដ",
              "ឋ",
              "ឌ",
              "ឍ",
              "ណ",
              "ត",
              "ថ",
              "ទ",
              "ធ",
              "ន",
              "ប",
              "ផ",
              "ព",
              "ភ",
              "ម",
              "យ",
              "រ",
              "ល",
              "វ",
              "ឝ",
              "ឞ",
              "ស",
              "ហ",
              "ឡ",
              "អ",
              "ឣ",
              "ឤ",
              "ឥ",
              "ឦ",
              "ឧ",
              "ឨ",
              "ឩ",
              "ឪ",
              "ឫ",
              "ឬ",
              "ឭ",
              "ឮ",
              "ឯ",
              "ឰ",
              "ឱ",
              "ឲ",
              "ឳ",
              "ៜ",
              "ᠠ",
              "ᠡ",
              "ᠢ",
              "ᠣ",
              "ᠤ",
              "ᠥ",
              "ᠦ",
              "ᠧ",
              "ᠨ",
              "ᠩ",
              "ᠪ",
              "ᠫ",
              "ᠬ",
              "ᠭ",
              "ᠮ",
              "ᠯ",
              "ᠰ",
              "ᠱ",
              "ᠲ",
              "ᠳ",
              "ᠴ",
              "ᠵ",
              "ᠶ",
              "ᠷ",
              "ᠸ",
              "ᠹ",
              "ᠺ",
              "ᠻ",
              "ᠼ",
              "ᠽ",
              "ᠾ",
              "ᠿ",
              "ᡀ",
              "ᡁ",
              "ᡂ",
              "ᡄ",
              "ᡅ",
              "ᡆ",
              "ᡇ",
              "ᡈ",
              "ᡉ",
              "ᡊ",
              "ᡋ",
              "ᡌ",
              "ᡍ",
              "ᡎ",
              "ᡏ",
              "ᡐ",
              "ᡑ",
              "ᡒ",
              "ᡓ",
              "ᡔ",
              "ᡕ",
              "ᡖ",
              "ᡗ",
              "ᡘ",
              "ᡙ",
              "ᡚ",
              "ᡛ",
              "ᡜ",
              "ᡝ",
              "ᡞ",
              "ᡟ",
              "ᡠ",
              "ᡡ",
              "ᡢ",
              "ᡣ",
              "ᡤ",
              "ᡥ",
              "ᡦ",
              "ᡧ",
              "ᡨ",
              "ᡩ",
              "ᡪ",
              "ᡫ",
              "ᡬ",
              "ᡭ",
              "ᡮ",
              "ᡯ",
              "ᡰ",
              "ᡱ",
              "ᡲ",
              "ᡳ",
              "ᡴ",
              "ᡵ",
              "ᡶ",
              "ᡷ",
              "ᢀ",
              "ᢁ",
              "ᢂ",
              "ᢃ",
              "ᢄ",
              "ᢅ",
              "ᢆ",
              "ᢇ",
              "ᢈ",
              "ᢉ",
              "ᢊ",
              "ᢋ",
              "ᢌ",
              "ᢍ",
              "ᢎ",
              "ᢏ",
              "ᢐ",
              "ᢑ",
              "ᢒ",
              "ᢓ",
              "ᢔ",
              "ᢕ",
              "ᢖ",
              "ᢗ",
              "ᢘ",
              "ᢙ",
              "ᢚ",
              "ᢛ",
              "ᢜ",
              "ᢝ",
              "ᢞ",
              "ᢟ",
              "ᢠ",
              "ᢡ",
              "ᢢ",
              "ᢣ",
              "ᢤ",
              "ᢥ",
              "ᢦ",
              "ᢧ",
              "ᢨ",
              "ᢪ",
              "ᤀ",
              "ᤁ",
              "ᤂ",
              "ᤃ",
              "ᤄ",
              "ᤅ",
              "ᤆ",
              "ᤇ",
              "ᤈ",
              "ᤉ",
              "ᤊ",
              "ᤋ",
              "ᤌ",
              "ᤍ",
              "ᤎ",
              "ᤏ",
              "ᤐ",
              "ᤑ",
              "ᤒ",
              "ᤓ",
              "ᤔ",
              "ᤕ",
              "ᤖ",
              "ᤗ",
              "ᤘ",
              "ᤙ",
              "ᤚ",
              "ᤛ",
              "ᤜ",
              "ᥐ",
              "ᥑ",
              "ᥒ",
              "ᥓ",
              "ᥔ",
              "ᥕ",
              "ᥖ",
              "ᥗ",
              "ᥘ",
              "ᥙ",
              "ᥚ",
              "ᥛ",
              "ᥜ",
              "ᥝ",
              "ᥞ",
              "ᥟ",
              "ᥠ",
              "ᥡ",
              "ᥢ",
              "ᥣ",
              "ᥤ",
              "ᥥ",
              "ᥦ",
              "ᥧ",
              "ᥨ",
              "ᥩ",
              "ᥪ",
              "ᥫ",
              "ᥬ",
              "ᥭ",
              "ᥰ",
              "ᥱ",
              "ᥲ",
              "ᥳ",
              "ᥴ",
              "ᦀ",
              "ᦁ",
              "ᦂ",
              "ᦃ",
              "ᦄ",
              "ᦅ",
              "ᦆ",
              "ᦇ",
              "ᦈ",
              "ᦉ",
              "ᦊ",
              "ᦋ",
              "ᦌ",
              "ᦍ",
              "ᦎ",
              "ᦏ",
              "ᦐ",
              "ᦑ",
              "ᦒ",
              "ᦓ",
              "ᦔ",
              "ᦕ",
              "ᦖ",
              "ᦗ",
              "ᦘ",
              "ᦙ",
              "ᦚ",
              "ᦛ",
              "ᦜ",
              "ᦝ",
              "ᦞ",
              "ᦟ",
              "ᦠ",
              "ᦡ",
              "ᦢ",
              "ᦣ",
              "ᦤ",
              "ᦥ",
              "ᦦ",
              "ᦧ",
              "ᦨ",
              "ᦩ",
              "ᧁ",
              "ᧂ",
              "ᧃ",
              "ᧄ",
              "ᧅ",
              "ᧆ",
              "ᧇ",
              "ᨀ",
              "ᨁ",
              "ᨂ",
              "ᨃ",
              "ᨄ",
              "ᨅ",
              "ᨆ",
              "ᨇ",
              "ᨈ",
              "ᨉ",
              "ᨊ",
              "ᨋ",
              "ᨌ",
              "ᨍ",
              "ᨎ",
              "ᨏ",
              "ᨐ",
              "ᨑ",
              "ᨒ",
              "ᨓ",
              "ᨔ",
              "ᨕ",
              "ᨖ",
              "ᬅ",
              "ᬆ",
              "ᬇ",
              "ᬈ",
              "ᬉ",
              "ᬊ",
              "ᬋ",
              "ᬌ",
              "ᬍ",
              "ᬎ",
              "ᬏ",
              "ᬐ",
              "ᬑ",
              "ᬒ",
              "ᬓ",
              "ᬔ",
              "ᬕ",
              "ᬖ",
              "ᬗ",
              "ᬘ",
              "ᬙ",
              "ᬚ",
              "ᬛ",
              "ᬜ",
              "ᬝ",
              "ᬞ",
              "ᬟ",
              "ᬠ",
              "ᬡ",
              "ᬢ",
              "ᬣ",
              "ᬤ",
              "ᬥ",
              "ᬦ",
              "ᬧ",
              "ᬨ",
              "ᬩ",
              "ᬪ",
              "ᬫ",
              "ᬬ",
              "ᬭ",
              "ᬮ",
              "ᬯ",
              "ᬰ",
              "ᬱ",
              "ᬲ",
              "ᬳ",
              "ᭅ",
              "ᭆ",
              "ᭇ",
              "ᭈ",
              "ᭉ",
              "ᭊ",
              "ᭋ",
              "ᮃ",
              "ᮄ",
              "ᮅ",
              "ᮆ",
              "ᮇ",
              "ᮈ",
              "ᮉ",
              "ᮊ",
              "ᮋ",
              "ᮌ",
              "ᮍ",
              "ᮎ",
              "ᮏ",
              "ᮐ",
              "ᮑ",
              "ᮒ",
              "ᮓ",
              "ᮔ",
              "ᮕ",
              "ᮖ",
              "ᮗ",
              "ᮘ",
              "ᮙ",
              "ᮚ",
              "ᮛ",
              "ᮜ",
              "ᮝ",
              "ᮞ",
              "ᮟ",
              "ᮠ",
              "ᮮ",
              "ᮯ",
              "ᰀ",
              "ᰁ",
              "ᰂ",
              "ᰃ",
              "ᰄ",
              "ᰅ",
              "ᰆ",
              "ᰇ",
              "ᰈ",
              "ᰉ",
              "ᰊ",
              "ᰋ",
              "ᰌ",
              "ᰍ",
              "ᰎ",
              "ᰏ",
              "ᰐ",
              "ᰑ",
              "ᰒ",
              "ᰓ",
              "ᰔ",
              "ᰕ",
              "ᰖ",
              "ᰗ",
              "ᰘ",
              "ᰙ",
              "ᰚ",
              "ᰛ",
              "ᰜ",
              "ᰝ",
              "ᰞ",
              "ᰟ",
              "ᰠ",
              "ᰡ",
              "ᰢ",
              "ᰣ",
              "ᱍ",
              "ᱎ",
              "ᱏ",
              "ᱚ",
              "ᱛ",
              "ᱜ",
              "ᱝ",
              "ᱞ",
              "ᱟ",
              "ᱠ",
              "ᱡ",
              "ᱢ",
              "ᱣ",
              "ᱤ",
              "ᱥ",
              "ᱦ",
              "ᱧ",
              "ᱨ",
              "ᱩ",
              "ᱪ",
              "ᱫ",
              "ᱬ",
              "ᱭ",
              "ᱮ",
              "ᱯ",
              "ᱰ",
              "ᱱ",
              "ᱲ",
              "ᱳ",
              "ᱴ",
              "ᱵ",
              "ᱶ",
              "ᱷ",
              "ℵ",
              "ℶ",
              "ℷ",
              "ℸ",
              "ⴰ",
              "ⴱ",
              "ⴲ",
              "ⴳ",
              "ⴴ",
              "ⴵ",
              "ⴶ",
              "ⴷ",
              "ⴸ",
              "ⴹ",
              "ⴺ",
              "ⴻ",
              "ⴼ",
              "ⴽ",
              "ⴾ",
              "ⴿ",
              "ⵀ",
              "ⵁ",
              "ⵂ",
              "ⵃ",
              "ⵄ",
              "ⵅ",
              "ⵆ",
              "ⵇ",
              "ⵈ",
              "ⵉ",
              "ⵊ",
              "ⵋ",
              "ⵌ",
              "ⵍ",
              "ⵎ",
              "ⵏ",
              "ⵐ",
              "ⵑ",
              "ⵒ",
              "ⵓ",
              "ⵔ",
              "ⵕ",
              "ⵖ",
              "ⵗ",
              "ⵘ",
              "ⵙ",
              "ⵚ",
              "ⵛ",
              "ⵜ",
              "ⵝ",
              "ⵞ",
              "ⵟ",
              "ⵠ",
              "ⵡ",
              "ⵢ",
              "ⵣ",
              "ⵤ",
              "ⵥ",
              "ⶀ",
              "ⶁ",
              "ⶂ",
              "ⶃ",
              "ⶄ",
              "ⶅ",
              "ⶆ",
              "ⶇ",
              "ⶈ",
              "ⶉ",
              "ⶊ",
              "ⶋ",
              "ⶌ",
              "ⶍ",
              "ⶎ",
              "ⶏ",
              "ⶐ",
              "ⶑ",
              "ⶒ",
              "ⶓ",
              "ⶔ",
              "ⶕ",
              "ⶖ",
              "ⶠ",
              "ⶡ",
              "ⶢ",
              "ⶣ",
              "ⶤ",
              "ⶥ",
              "ⶦ",
              "ⶨ",
              "ⶩ",
              "ⶪ",
              "ⶫ",
              "ⶬ",
              "ⶭ",
              "ⶮ",
              "ⶰ",
              "ⶱ",
              "ⶲ",
              "ⶳ",
              "ⶴ",
              "ⶵ",
              "ⶶ",
              "ⶸ",
              "ⶹ",
              "ⶺ",
              "ⶻ",
              "ⶼ",
              "ⶽ",
              "ⶾ",
              "ⷀ",
              "ⷁ",
              "ⷂ",
              "ⷃ",
              "ⷄ",
              "ⷅ",
              "ⷆ",
              "ⷈ",
              "ⷉ",
              "ⷊ",
              "ⷋ",
              "ⷌ",
              "ⷍ",
              "ⷎ",
              "ⷐ",
              "ⷑ",
              "ⷒ",
              "ⷓ",
              "ⷔ",
              "ⷕ",
              "ⷖ",
              "ⷘ",
              "ⷙ",
              "ⷚ",
              "ⷛ",
              "ⷜ",
              "ⷝ",
              "ⷞ",
              "〆",
              "〼",
              "ぁ",
              "あ",
              "ぃ",
              "い",
              "ぅ",
              "う",
              "ぇ",
              "え",
              "ぉ",
              "お",
              "か",
              "が",
              "き",
              "ぎ",
              "く",
              "ぐ",
              "け",
              "げ",
              "こ",
              "ご",
              "さ",
              "ざ",
              "し",
              "じ",
              "す",
              "ず",
              "せ",
              "ぜ",
              "そ",
              "ぞ",
              "た",
              "だ",
              "ち",
              "ぢ",
              "っ",
              "つ",
              "づ",
              "て",
              "で",
              "と",
              "ど",
              "な",
              "に",
              "ぬ",
              "ね",
              "の",
              "は",
              "ば",
              "ぱ",
              "ひ",
              "び",
              "ぴ",
              "ふ",
              "ぶ",
              "ぷ",
              "へ",
              "べ",
              "ぺ",
              "ほ",
              "ぼ",
              "ぽ",
              "ま",
              "み",
              "む",
              "め",
              "も",
              "ゃ",
              "や",
              "ゅ",
              "ゆ",
              "ょ",
              "よ",
              "ら",
              "り",
              "る",
              "れ",
              "ろ",
              "ゎ",
              "わ",
              "ゐ",
              "ゑ",
              "を",
              "ん",
              "ゔ",
              "ゕ",
              "ゖ",
              "ゟ",
              "ァ",
              "ア",
              "ィ",
              "イ",
              "ゥ",
              "ウ",
              "ェ",
              "エ",
              "ォ",
              "オ",
              "カ",
              "ガ",
              "キ",
              "ギ",
              "ク",
              "グ",
              "ケ",
              "ゲ",
              "コ",
              "ゴ",
              "サ",
              "ザ",
              "シ",
              "ジ",
              "ス",
              "ズ",
              "セ",
              "ゼ",
              "ソ",
              "ゾ",
              "タ",
              "ダ",
              "チ",
              "ヂ",
              "ッ",
              "ツ",
              "ヅ",
              "テ",
              "デ",
              "ト",
              "ド",
              "ナ",
              "ニ",
              "ヌ",
              "ネ",
              "ノ",
              "ハ",
              "バ",
              "パ",
              "ヒ",
              "ビ",
              "ピ",
              "フ",
              "ブ",
              "プ",
              "ヘ",
              "ベ",
              "ペ",
              "ホ",
              "ボ",
              "ポ",
              "マ",
              "ミ",
              "ム",
              "メ",
              "モ",
              "ャ",
              "ヤ",
              "ュ",
              "ユ",
              "ョ",
              "ヨ",
              "ラ",
              "リ",
              "ル",
              "レ",
              "ロ",
              "ヮ",
              "ワ",
              "ヰ",
              "ヱ",
              "ヲ",
              "ン",
              "ヴ",
              "ヵ",
              "ヶ",
              "ヷ",
              "ヸ",
              "ヹ",
              "ヺ",
              "ヿ",
              "ㄅ",
              "ㄆ",
              "ㄇ",
              "ㄈ",
              "ㄉ",
              "ㄊ",
              "ㄋ",
              "ㄌ",
              "ㄍ",
              "ㄎ",
              "ㄏ",
              "ㄐ",
              "ㄑ",
              "ㄒ",
              "ㄓ",
              "ㄔ",
              "ㄕ",
              "ㄖ",
              "ㄗ",
              "ㄘ",
              "ㄙ",
              "ㄚ",
              "ㄛ",
              "ㄜ",
              "ㄝ",
              "ㄞ",
              "ㄟ",
              "ㄠ",
              "ㄡ",
              "ㄢ",
              "ㄣ",
              "ㄤ",
              "ㄥ",
              "ㄦ",
              "ㄧ",
              "ㄨ",
              "ㄩ",
              "ㄪ",
              "ㄫ",
              "ㄬ",
              "ㄭ",
              "ㄱ",
              "ㄲ",
              "ㄳ",
              "ㄴ",
              "ㄵ",
              "ㄶ",
              "ㄷ",
              "ㄸ",
              "ㄹ",
              "ㄺ",
              "ㄻ",
              "ㄼ",
              "ㄽ",
              "ㄾ",
              "ㄿ",
              "ㅀ",
              "ㅁ",
              "ㅂ",
              "ㅃ",
              "ㅄ",
              "ㅅ",
              "ㅆ",
              "ㅇ",
              "ㅈ",
              "ㅉ",
              "ㅊ",
              "ㅋ",
              "ㅌ",
              "ㅍ",
              "ㅎ",
              "ㅏ",
              "ㅐ",
              "ㅑ",
              "ㅒ",
              "ㅓ",
              "ㅔ",
              "ㅕ",
              "ㅖ",
              "ㅗ",
              "ㅘ",
              "ㅙ",
              "ㅚ",
              "ㅛ",
              "ㅜ",
              "ㅝ",
              "ㅞ",
              "ㅟ",
              "ㅠ",
              "ㅡ",
              "ㅢ",
              "ㅣ",
              "ㅤ",
              "ㅥ",
              "ㅦ",
              "ㅧ",
              "ㅨ",
              "ㅩ",
              "ㅪ",
              "ㅫ",
              "ㅬ",
              "ㅭ",
              "ㅮ",
              "ㅯ",
              "ㅰ",
              "ㅱ",
              "ㅲ",
              "ㅳ",
              "ㅴ",
              "ㅵ",
              "ㅶ",
              "ㅷ",
              "ㅸ",
              "ㅹ",
              "ㅺ",
              "ㅻ",
              "ㅼ",
              "ㅽ",
              "ㅾ",
              "ㅿ",
              "ㆀ",
              "ㆁ",
              "ㆂ",
              "ㆃ",
              "ㆄ",
              "ㆅ",
              "ㆆ",
              "ㆇ",
              "ㆈ",
              "ㆉ",
              "ㆊ",
              "ㆋ",
              "ㆌ",
              "ㆍ",
              "ㆎ",
              "ㆠ",
              "ㆡ",
              "ㆢ",
              "ㆣ",
              "ㆤ",
              "ㆥ",
              "ㆦ",
              "ㆧ",
              "ㆨ",
              "ㆩ",
              "ㆪ",
              "ㆫ",
              "ㆬ",
              "ㆭ",
              "ㆮ",
              "ㆯ",
              "ㆰ",
              "ㆱ",
              "ㆲ",
              "ㆳ",
              "ㆴ",
              "ㆵ",
              "ㆶ",
              "ㆷ",
              "ㇰ",
              "ㇱ",
              "ㇲ",
              "ㇳ",
              "ㇴ",
              "ㇵ",
              "ㇶ",
              "ㇷ",
              "ㇸ",
              "ㇹ",
              "ㇺ",
              "ㇻ",
              "ㇼ",
              "ㇽ",
              "ㇾ",
              "ㇿ",
              "㐀",
              "䶵",
              "一",
              "鿃",
              "ꀀ",
              "ꀁ",
              "ꀂ",
              "ꀃ",
              "ꀄ",
              "ꀅ",
              "ꀆ",
              "ꀇ",
              "ꀈ",
              "ꀉ",
              "ꀊ",
              "ꀋ",
              "ꀌ",
              "ꀍ",
              "ꀎ",
              "ꀏ",
              "ꀐ",
              "ꀑ",
              "ꀒ",
              "ꀓ",
              "ꀔ",
              "ꀖ",
              "ꀗ",
              "ꀘ",
              "ꀙ",
              "ꀚ",
              "ꀛ",
              "ꀜ",
              "ꀝ",
              "ꀞ",
              "ꀟ",
              "ꀠ",
              "ꀡ",
              "ꀢ",
              "ꀣ",
              "ꀤ",
              "ꀥ",
              "ꀦ",
              "ꀧ",
              "ꀨ",
              "ꀩ",
              "ꀪ",
              "ꀫ",
              "ꀬ",
              "ꀭ",
              "ꀮ",
              "ꀯ",
              "ꀰ",
              "ꀱ",
              "ꀲ",
              "ꀳ",
              "ꀴ",
              "ꀵ",
              "ꀶ",
              "ꀷ",
              "ꀸ",
              "ꀹ",
              "ꀺ",
              "ꀻ",
              "ꀼ",
              "ꀽ",
              "ꀾ",
              "ꀿ",
              "ꁀ",
              "ꁁ",
              "ꁂ",
              "ꁃ",
              "ꁄ",
              "ꁅ",
              "ꁆ",
              "ꁇ",
              "ꁈ",
              "ꁉ",
              "ꁊ",
              "ꁋ",
              "ꁌ",
              "ꁍ",
              "ꁎ",
              "ꁏ",
              "ꁐ",
              "ꁑ",
              "ꁒ",
              "ꁓ",
              "ꁔ",
              "ꁕ",
              "ꁖ",
              "ꁗ",
              "ꁘ",
              "ꁙ",
              "ꁚ",
              "ꁛ",
              "ꁜ",
              "ꁝ",
              "ꁞ",
              "ꁟ",
              "ꁠ",
              "ꁡ",
              "ꁢ",
              "ꁣ",
              "ꁤ",
              "ꁥ",
              "ꁦ",
              "ꁧ",
              "ꁨ",
              "ꁩ",
              "ꁪ",
              "ꁫ",
              "ꁬ",
              "ꁭ",
              "ꁮ",
              "ꁯ",
              "ꁰ",
              "ꁱ",
              "ꁲ",
              "ꁳ",
              "ꁴ",
              "ꁵ",
              "ꁶ",
              "ꁷ",
              "ꁸ",
              "ꁹ",
              "ꁺ",
              "ꁻ",
              "ꁼ",
              "ꁽ",
              "ꁾ",
              "ꁿ",
              "ꂀ",
              "ꂁ",
              "ꂂ",
              "ꂃ",
              "ꂄ",
              "ꂅ",
              "ꂆ",
              "ꂇ",
              "ꂈ",
              "ꂉ",
              "ꂊ",
              "ꂋ",
              "ꂌ",
              "ꂍ",
              "ꂎ",
              "ꂏ",
              "ꂐ",
              "ꂑ",
              "ꂒ",
              "ꂓ",
              "ꂔ",
              "ꂕ",
              "ꂖ",
              "ꂗ",
              "ꂘ",
              "ꂙ",
              "ꂚ",
              "ꂛ",
              "ꂜ",
              "ꂝ",
              "ꂞ",
              "ꂟ",
              "ꂠ",
              "ꂡ",
              "ꂢ",
              "ꂣ",
              "ꂤ",
              "ꂥ",
              "ꂦ",
              "ꂧ",
              "ꂨ",
              "ꂩ",
              "ꂪ",
              "ꂫ",
              "ꂬ",
              "ꂭ",
              "ꂮ",
              "ꂯ",
              "ꂰ",
              "ꂱ",
              "ꂲ",
              "ꂳ",
              "ꂴ",
              "ꂵ",
              "ꂶ",
              "ꂷ",
              "ꂸ",
              "ꂹ",
              "ꂺ",
              "ꂻ",
              "ꂼ",
              "ꂽ",
              "ꂾ",
              "ꂿ",
              "ꃀ",
              "ꃁ",
              "ꃂ",
              "ꃃ",
              "ꃄ",
              "ꃅ",
              "ꃆ",
              "ꃇ",
              "ꃈ",
              "ꃉ",
              "ꃊ",
              "ꃋ",
              "ꃌ",
              "ꃍ",
              "ꃎ",
              "ꃏ",
              "ꃐ",
              "ꃑ",
              "ꃒ",
              "ꃓ",
              "ꃔ",
              "ꃕ",
              "ꃖ",
              "ꃗ",
              "ꃘ",
              "ꃙ",
              "ꃚ",
              "ꃛ",
              "ꃜ",
              "ꃝ",
              "ꃞ",
              "ꃟ",
              "ꃠ",
              "ꃡ",
              "ꃢ",
              "ꃣ",
              "ꃤ",
              "ꃥ",
              "ꃦ",
              "ꃧ",
              "ꃨ",
              "ꃩ",
              "ꃪ",
              "ꃫ",
              "ꃬ",
              "ꃭ",
              "ꃮ",
              "ꃯ",
              "ꃰ",
              "ꃱ",
              "ꃲ",
              "ꃳ",
              "ꃴ",
              "ꃵ",
              "ꃶ",
              "ꃷ",
              "ꃸ",
              "ꃹ",
              "ꃺ",
              "ꃻ",
              "ꃼ",
              "ꃽ",
              "ꃾ",
              "ꃿ",
              "ꄀ",
              "ꄁ",
              "ꄂ",
              "ꄃ",
              "ꄄ",
              "ꄅ",
              "ꄆ",
              "ꄇ",
              "ꄈ",
              "ꄉ",
              "ꄊ",
              "ꄋ",
              "ꄌ",
              "ꄍ",
              "ꄎ",
              "ꄏ",
              "ꄐ",
              "ꄑ",
              "ꄒ",
              "ꄓ",
              "ꄔ",
              "ꄕ",
              "ꄖ",
              "ꄗ",
              "ꄘ",
              "ꄙ",
              "ꄚ",
              "ꄛ",
              "ꄜ",
              "ꄝ",
              "ꄞ",
              "ꄟ",
              "ꄠ",
              "ꄡ",
              "ꄢ",
              "ꄣ",
              "ꄤ",
              "ꄥ",
              "ꄦ",
              "ꄧ",
              "ꄨ",
              "ꄩ",
              "ꄪ",
              "ꄫ",
              "ꄬ",
              "ꄭ",
              "ꄮ",
              "ꄯ",
              "ꄰ",
              "ꄱ",
              "ꄲ",
              "ꄳ",
              "ꄴ",
              "ꄵ",
              "ꄶ",
              "ꄷ",
              "ꄸ",
              "ꄹ",
              "ꄺ",
              "ꄻ",
              "ꄼ",
              "ꄽ",
              "ꄾ",
              "ꄿ",
              "ꅀ",
              "ꅁ",
              "ꅂ",
              "ꅃ",
              "ꅄ",
              "ꅅ",
              "ꅆ",
              "ꅇ",
              "ꅈ",
              "ꅉ",
              "ꅊ",
              "ꅋ",
              "ꅌ",
              "ꅍ",
              "ꅎ",
              "ꅏ",
              "ꅐ",
              "ꅑ",
              "ꅒ",
              "ꅓ",
              "ꅔ",
              "ꅕ",
              "ꅖ",
              "ꅗ",
              "ꅘ",
              "ꅙ",
              "ꅚ",
              "ꅛ",
              "ꅜ",
              "ꅝ",
              "ꅞ",
              "ꅟ",
              "ꅠ",
              "ꅡ",
              "ꅢ",
              "ꅣ",
              "ꅤ",
              "ꅥ",
              "ꅦ",
              "ꅧ",
              "ꅨ",
              "ꅩ",
              "ꅪ",
              "ꅫ",
              "ꅬ",
              "ꅭ",
              "ꅮ",
              "ꅯ",
              "ꅰ",
              "ꅱ",
              "ꅲ",
              "ꅳ",
              "ꅴ",
              "ꅵ",
              "ꅶ",
              "ꅷ",
              "ꅸ",
              "ꅹ",
              "ꅺ",
              "ꅻ",
              "ꅼ",
              "ꅽ",
              "ꅾ",
              "ꅿ",
              "ꆀ",
              "ꆁ",
              "ꆂ",
              "ꆃ",
              "ꆄ",
              "ꆅ",
              "ꆆ",
              "ꆇ",
              "ꆈ",
              "ꆉ",
              "ꆊ",
              "ꆋ",
              "ꆌ",
              "ꆍ",
              "ꆎ",
              "ꆏ",
              "ꆐ",
              "ꆑ",
              "ꆒ",
              "ꆓ",
              "ꆔ",
              "ꆕ",
              "ꆖ",
              "ꆗ",
              "ꆘ",
              "ꆙ",
              "ꆚ",
              "ꆛ",
              "ꆜ",
              "ꆝ",
              "ꆞ",
              "ꆟ",
              "ꆠ",
              "ꆡ",
              "ꆢ",
              "ꆣ",
              "ꆤ",
              "ꆥ",
              "ꆦ",
              "ꆧ",
              "ꆨ",
              "ꆩ",
              "ꆪ",
              "ꆫ",
              "ꆬ",
              "ꆭ",
              "ꆮ",
              "ꆯ",
              "ꆰ",
              "ꆱ",
              "ꆲ",
              "ꆳ",
              "ꆴ",
              "ꆵ",
              "ꆶ",
              "ꆷ",
              "ꆸ",
              "ꆹ",
              "ꆺ",
              "ꆻ",
              "ꆼ",
              "ꆽ",
              "ꆾ",
              "ꆿ",
              "ꇀ",
              "ꇁ",
              "ꇂ",
              "ꇃ",
              "ꇄ",
              "ꇅ",
              "ꇆ",
              "ꇇ",
              "ꇈ",
              "ꇉ",
              "ꇊ",
              "ꇋ",
              "ꇌ",
              "ꇍ",
              "ꇎ",
              "ꇏ",
              "ꇐ",
              "ꇑ",
              "ꇒ",
              "ꇓ",
              "ꇔ",
              "ꇕ",
              "ꇖ",
              "ꇗ",
              "ꇘ",
              "ꇙ",
              "ꇚ",
              "ꇛ",
              "ꇜ",
              "ꇝ",
              "ꇞ",
              "ꇟ",
              "ꇠ",
              "ꇡ",
              "ꇢ",
              "ꇣ",
              "ꇤ",
              "ꇥ",
              "ꇦ",
              "ꇧ",
              "ꇨ",
              "ꇩ",
              "ꇪ",
              "ꇫ",
              "ꇬ",
              "ꇭ",
              "ꇮ",
              "ꇯ",
              "ꇰ",
              "ꇱ",
              "ꇲ",
              "ꇳ",
              "ꇴ",
              "ꇵ",
              "ꇶ",
              "ꇷ",
              "ꇸ",
              "ꇹ",
              "ꇺ",
              "ꇻ",
              "ꇼ",
              "ꇽ",
              "ꇾ",
              "ꇿ",
              "ꈀ",
              "ꈁ",
              "ꈂ",
              "ꈃ",
              "ꈄ",
              "ꈅ",
              "ꈆ",
              "ꈇ",
              "ꈈ",
              "ꈉ",
              "ꈊ",
              "ꈋ",
              "ꈌ",
              "ꈍ",
              "ꈎ",
              "ꈏ",
              "ꈐ",
              "ꈑ",
              "ꈒ",
              "ꈓ",
              "ꈔ",
              "ꈕ",
              "ꈖ",
              "ꈗ",
              "ꈘ",
              "ꈙ",
              "ꈚ",
              "ꈛ",
              "ꈜ",
              "ꈝ",
              "ꈞ",
              "ꈟ",
              "ꈠ",
              "ꈡ",
              "ꈢ",
              "ꈣ",
              "ꈤ",
              "ꈥ",
              "ꈦ",
              "ꈧ",
              "ꈨ",
              "ꈩ",
              "ꈪ",
              "ꈫ",
              "ꈬ",
              "ꈭ",
              "ꈮ",
              "ꈯ",
              "ꈰ",
              "ꈱ",
              "ꈲ",
              "ꈳ",
              "ꈴ",
              "ꈵ",
              "ꈶ",
              "ꈷ",
              "ꈸ",
              "ꈹ",
              "ꈺ",
              "ꈻ",
              "ꈼ",
              "ꈽ",
              "ꈾ",
              "ꈿ",
              "ꉀ",
              "ꉁ",
              "ꉂ",
              "ꉃ",
              "ꉄ",
              "ꉅ",
              "ꉆ",
              "ꉇ",
              "ꉈ",
              "ꉉ",
              "ꉊ",
              "ꉋ",
              "ꉌ",
              "ꉍ",
              "ꉎ",
              "ꉏ",
              "ꉐ",
              "ꉑ",
              "ꉒ",
              "ꉓ",
              "ꉔ",
              "ꉕ",
              "ꉖ",
              "ꉗ",
              "ꉘ",
              "ꉙ",
              "ꉚ",
              "ꉛ",
              "ꉜ",
              "ꉝ",
              "ꉞ",
              "ꉟ",
              "ꉠ",
              "ꉡ",
              "ꉢ",
              "ꉣ",
              "ꉤ",
              "ꉥ",
              "ꉦ",
              "ꉧ",
              "ꉨ",
              "ꉩ",
              "ꉪ",
              "ꉫ",
              "ꉬ",
              "ꉭ",
              "ꉮ",
              "ꉯ",
              "ꉰ",
              "ꉱ",
              "ꉲ",
              "ꉳ",
              "ꉴ",
              "ꉵ",
              "ꉶ",
              "ꉷ",
              "ꉸ",
              "ꉹ",
              "ꉺ",
              "ꉻ",
              "ꉼ",
              "ꉽ",
              "ꉾ",
              "ꉿ",
              "ꊀ",
              "ꊁ",
              "ꊂ",
              "ꊃ",
              "ꊄ",
              "ꊅ",
              "ꊆ",
              "ꊇ",
              "ꊈ",
              "ꊉ",
              "ꊊ",
              "ꊋ",
              "ꊌ",
              "ꊍ",
              "ꊎ",
              "ꊏ",
              "ꊐ",
              "ꊑ",
              "ꊒ",
              "ꊓ",
              "ꊔ",
              "ꊕ",
              "ꊖ",
              "ꊗ",
              "ꊘ",
              "ꊙ",
              "ꊚ",
              "ꊛ",
              "ꊜ",
              "ꊝ",
              "ꊞ",
              "ꊟ",
              "ꊠ",
              "ꊡ",
              "ꊢ",
              "ꊣ",
              "ꊤ",
              "ꊥ",
              "ꊦ",
              "ꊧ",
              "ꊨ",
              "ꊩ",
              "ꊪ",
              "ꊫ",
              "ꊬ",
              "ꊭ",
              "ꊮ",
              "ꊯ",
              "ꊰ",
              "ꊱ",
              "ꊲ",
              "ꊳ",
              "ꊴ",
              "ꊵ",
              "ꊶ",
              "ꊷ",
              "ꊸ",
              "ꊹ",
              "ꊺ",
              "ꊻ",
              "ꊼ",
              "ꊽ",
              "ꊾ",
              "ꊿ",
              "ꋀ",
              "ꋁ",
              "ꋂ",
              "ꋃ",
              "ꋄ",
              "ꋅ",
              "ꋆ",
              "ꋇ",
              "ꋈ",
              "ꋉ",
              "ꋊ",
              "ꋋ",
              "ꋌ",
              "ꋍ",
              "ꋎ",
              "ꋏ",
              "ꋐ",
              "ꋑ",
              "ꋒ",
              "ꋓ",
              "ꋔ",
              "ꋕ",
              "ꋖ",
              "ꋗ",
              "ꋘ",
              "ꋙ",
              "ꋚ",
              "ꋛ",
              "ꋜ",
              "ꋝ",
              "ꋞ",
              "ꋟ",
              "ꋠ",
              "ꋡ",
              "ꋢ",
              "ꋣ",
              "ꋤ",
              "ꋥ",
              "ꋦ",
              "ꋧ",
              "ꋨ",
              "ꋩ",
              "ꋪ",
              "ꋫ",
              "ꋬ",
              "ꋭ",
              "ꋮ",
              "ꋯ",
              "ꋰ",
              "ꋱ",
              "ꋲ",
              "ꋳ",
              "ꋴ",
              "ꋵ",
              "ꋶ",
              "ꋷ",
              "ꋸ",
              "ꋹ",
              "ꋺ",
              "ꋻ",
              "ꋼ",
              "ꋽ",
              "ꋾ",
              "ꋿ",
              "ꌀ",
              "ꌁ",
              "ꌂ",
              "ꌃ",
              "ꌄ",
              "ꌅ",
              "ꌆ",
              "ꌇ",
              "ꌈ",
              "ꌉ",
              "ꌊ",
              "ꌋ",
              "ꌌ",
              "ꌍ",
              "ꌎ",
              "ꌏ",
              "ꌐ",
              "ꌑ",
              "ꌒ",
              "ꌓ",
              "ꌔ",
              "ꌕ",
              "ꌖ",
              "ꌗ",
              "ꌘ",
              "ꌙ",
              "ꌚ",
              "ꌛ",
              "ꌜ",
              "ꌝ",
              "ꌞ",
              "ꌟ",
              "ꌠ",
              "ꌡ",
              "ꌢ",
              "ꌣ",
              "ꌤ",
              "ꌥ",
              "ꌦ",
              "ꌧ",
              "ꌨ",
              "ꌩ",
              "ꌪ",
              "ꌫ",
              "ꌬ",
              "ꌭ",
              "ꌮ",
              "ꌯ",
              "ꌰ",
              "ꌱ",
              "ꌲ",
              "ꌳ",
              "ꌴ",
              "ꌵ",
              "ꌶ",
              "ꌷ",
              "ꌸ",
              "ꌹ",
              "ꌺ",
              "ꌻ",
              "ꌼ",
              "ꌽ",
              "ꌾ",
              "ꌿ",
              "ꍀ",
              "ꍁ",
              "ꍂ",
              "ꍃ",
              "ꍄ",
              "ꍅ",
              "ꍆ",
              "ꍇ",
              "ꍈ",
              "ꍉ",
              "ꍊ",
              "ꍋ",
              "ꍌ",
              "ꍍ",
              "ꍎ",
              "ꍏ",
              "ꍐ",
              "ꍑ",
              "ꍒ",
              "ꍓ",
              "ꍔ",
              "ꍕ",
              "ꍖ",
              "ꍗ",
              "ꍘ",
              "ꍙ",
              "ꍚ",
              "ꍛ",
              "ꍜ",
              "ꍝ",
              "ꍞ",
              "ꍟ",
              "ꍠ",
              "ꍡ",
              "ꍢ",
              "ꍣ",
              "ꍤ",
              "ꍥ",
              "ꍦ",
              "ꍧ",
              "ꍨ",
              "ꍩ",
              "ꍪ",
              "ꍫ",
              "ꍬ",
              "ꍭ",
              "ꍮ",
              "ꍯ",
              "ꍰ",
              "ꍱ",
              "ꍲ",
              "ꍳ",
              "ꍴ",
              "ꍵ",
              "ꍶ",
              "ꍷ",
              "ꍸ",
              "ꍹ",
              "ꍺ",
              "ꍻ",
              "ꍼ",
              "ꍽ",
              "ꍾ",
              "ꍿ",
              "ꎀ",
              "ꎁ",
              "ꎂ",
              "ꎃ",
              "ꎄ",
              "ꎅ",
              "ꎆ",
              "ꎇ",
              "ꎈ",
              "ꎉ",
              "ꎊ",
              "ꎋ",
              "ꎌ",
              "ꎍ",
              "ꎎ",
              "ꎏ",
              "ꎐ",
              "ꎑ",
              "ꎒ",
              "ꎓ",
              "ꎔ",
              "ꎕ",
              "ꎖ",
              "ꎗ",
              "ꎘ",
              "ꎙ",
              "ꎚ",
              "ꎛ",
              "ꎜ",
              "ꎝ",
              "ꎞ",
              "ꎟ",
              "ꎠ",
              "ꎡ",
              "ꎢ",
              "ꎣ",
              "ꎤ",
              "ꎥ",
              "ꎦ",
              "ꎧ",
              "ꎨ",
              "ꎩ",
              "ꎪ",
              "ꎫ",
              "ꎬ",
              "ꎭ",
              "ꎮ",
              "ꎯ",
              "ꎰ",
              "ꎱ",
              "ꎲ",
              "ꎳ",
              "ꎴ",
              "ꎵ",
              "ꎶ",
              "ꎷ",
              "ꎸ",
              "ꎹ",
              "ꎺ",
              "ꎻ",
              "ꎼ",
              "ꎽ",
              "ꎾ",
              "ꎿ",
              "ꏀ",
              "ꏁ",
              "ꏂ",
              "ꏃ",
              "ꏄ",
              "ꏅ",
              "ꏆ",
              "ꏇ",
              "ꏈ",
              "ꏉ",
              "ꏊ",
              "ꏋ",
              "ꏌ",
              "ꏍ",
              "ꏎ",
              "ꏏ",
              "ꏐ",
              "ꏑ",
              "ꏒ",
              "ꏓ",
              "ꏔ",
              "ꏕ",
              "ꏖ",
              "ꏗ",
              "ꏘ",
              "ꏙ",
              "ꏚ",
              "ꏛ",
              "ꏜ",
              "ꏝ",
              "ꏞ",
              "ꏟ",
              "ꏠ",
              "ꏡ",
              "ꏢ",
              "ꏣ",
              "ꏤ",
              "ꏥ",
              "ꏦ",
              "ꏧ",
              "ꏨ",
              "ꏩ",
              "ꏪ",
              "ꏫ",
              "ꏬ",
              "ꏭ",
              "ꏮ",
              "ꏯ",
              "ꏰ",
              "ꏱ",
              "ꏲ",
              "ꏳ",
              "ꏴ",
              "ꏵ",
              "ꏶ",
              "ꏷ",
              "ꏸ",
              "ꏹ",
              "ꏺ",
              "ꏻ",
              "ꏼ",
              "ꏽ",
              "ꏾ",
              "ꏿ",
              "ꐀ",
              "ꐁ",
              "ꐂ",
              "ꐃ",
              "ꐄ",
              "ꐅ",
              "ꐆ",
              "ꐇ",
              "ꐈ",
              "ꐉ",
              "ꐊ",
              "ꐋ",
              "ꐌ",
              "ꐍ",
              "ꐎ",
              "ꐏ",
              "ꐐ",
              "ꐑ",
              "ꐒ",
              "ꐓ",
              "ꐔ",
              "ꐕ",
              "ꐖ",
              "ꐗ",
              "ꐘ",
              "ꐙ",
              "ꐚ",
              "ꐛ",
              "ꐜ",
              "ꐝ",
              "ꐞ",
              "ꐟ",
              "ꐠ",
              "ꐡ",
              "ꐢ",
              "ꐣ",
              "ꐤ",
              "ꐥ",
              "ꐦ",
              "ꐧ",
              "ꐨ",
              "ꐩ",
              "ꐪ",
              "ꐫ",
              "ꐬ",
              "ꐭ",
              "ꐮ",
              "ꐯ",
              "ꐰ",
              "ꐱ",
              "ꐲ",
              "ꐳ",
              "ꐴ",
              "ꐵ",
              "ꐶ",
              "ꐷ",
              "ꐸ",
              "ꐹ",
              "ꐺ",
              "ꐻ",
              "ꐼ",
              "ꐽ",
              "ꐾ",
              "ꐿ",
              "ꑀ",
              "ꑁ",
              "ꑂ",
              "ꑃ",
              "ꑄ",
              "ꑅ",
              "ꑆ",
              "ꑇ",
              "ꑈ",
              "ꑉ",
              "ꑊ",
              "ꑋ",
              "ꑌ",
              "ꑍ",
              "ꑎ",
              "ꑏ",
              "ꑐ",
              "ꑑ",
              "ꑒ",
              "ꑓ",
              "ꑔ",
              "ꑕ",
              "ꑖ",
              "ꑗ",
              "ꑘ",
              "ꑙ",
              "ꑚ",
              "ꑛ",
              "ꑜ",
              "ꑝ",
              "ꑞ",
              "ꑟ",
              "ꑠ",
              "ꑡ",
              "ꑢ",
              "ꑣ",
              "ꑤ",
              "ꑥ",
              "ꑦ",
              "ꑧ",
              "ꑨ",
              "ꑩ",
              "ꑪ",
              "ꑫ",
              "ꑬ",
              "ꑭ",
              "ꑮ",
              "ꑯ",
              "ꑰ",
              "ꑱ",
              "ꑲ",
              "ꑳ",
              "ꑴ",
              "ꑵ",
              "ꑶ",
              "ꑷ",
              "ꑸ",
              "ꑹ",
              "ꑺ",
              "ꑻ",
              "ꑼ",
              "ꑽ",
              "ꑾ",
              "ꑿ",
              "ꒀ",
              "ꒁ",
              "ꒂ",
              "ꒃ",
              "ꒄ",
              "ꒅ",
              "ꒆ",
              "ꒇ",
              "ꒈ",
              "ꒉ",
              "ꒊ",
              "ꒋ",
              "ꒌ",
              "ꔀ",
              "ꔁ",
              "ꔂ",
              "ꔃ",
              "ꔄ",
              "ꔅ",
              "ꔆ",
              "ꔇ",
              "ꔈ",
              "ꔉ",
              "ꔊ",
              "ꔋ",
              "ꔌ",
              "ꔍ",
              "ꔎ",
              "ꔏ",
              "ꔐ",
              "ꔑ",
              "ꔒ",
              "ꔓ",
              "ꔔ",
              "ꔕ",
              "ꔖ",
              "ꔗ",
              "ꔘ",
              "ꔙ",
              "ꔚ",
              "ꔛ",
              "ꔜ",
              "ꔝ",
              "ꔞ",
              "ꔟ",
              "ꔠ",
              "ꔡ",
              "ꔢ",
              "ꔣ",
              "ꔤ",
              "ꔥ",
              "ꔦ",
              "ꔧ",
              "ꔨ",
              "ꔩ",
              "ꔪ",
              "ꔫ",
              "ꔬ",
              "ꔭ",
              "ꔮ",
              "ꔯ",
              "ꔰ",
              "ꔱ",
              "ꔲ",
              "ꔳ",
              "ꔴ",
              "ꔵ",
              "ꔶ",
              "ꔷ",
              "ꔸ",
              "ꔹ",
              "ꔺ",
              "ꔻ",
              "ꔼ",
              "ꔽ",
              "ꔾ",
              "ꔿ",
              "ꕀ",
              "ꕁ",
              "ꕂ",
              "ꕃ",
              "ꕄ",
              "ꕅ",
              "ꕆ",
              "ꕇ",
              "ꕈ",
              "ꕉ",
              "ꕊ",
              "ꕋ",
              "ꕌ",
              "ꕍ",
              "ꕎ",
              "ꕏ",
              "ꕐ",
              "ꕑ",
              "ꕒ",
              "ꕓ",
              "ꕔ",
              "ꕕ",
              "ꕖ",
              "ꕗ",
              "ꕘ",
              "ꕙ",
              "ꕚ",
              "ꕛ",
              "ꕜ",
              "ꕝ",
              "ꕞ",
              "ꕟ",
              "ꕠ",
              "ꕡ",
              "ꕢ",
              "ꕣ",
              "ꕤ",
              "ꕥ",
              "ꕦ",
              "ꕧ",
              "ꕨ",
              "ꕩ",
              "ꕪ",
              "ꕫ",
              "ꕬ",
              "ꕭ",
              "ꕮ",
              "ꕯ",
              "ꕰ",
              "ꕱ",
              "ꕲ",
              "ꕳ",
              "ꕴ",
              "ꕵ",
              "ꕶ",
              "ꕷ",
              "ꕸ",
              "ꕹ",
              "ꕺ",
              "ꕻ",
              "ꕼ",
              "ꕽ",
              "ꕾ",
              "ꕿ",
              "ꖀ",
              "ꖁ",
              "ꖂ",
              "ꖃ",
              "ꖄ",
              "ꖅ",
              "ꖆ",
              "ꖇ",
              "ꖈ",
              "ꖉ",
              "ꖊ",
              "ꖋ",
              "ꖌ",
              "ꖍ",
              "ꖎ",
              "ꖏ",
              "ꖐ",
              "ꖑ",
              "ꖒ",
              "ꖓ",
              "ꖔ",
              "ꖕ",
              "ꖖ",
              "ꖗ",
              "ꖘ",
              "ꖙ",
              "ꖚ",
              "ꖛ",
              "ꖜ",
              "ꖝ",
              "ꖞ",
              "ꖟ",
              "ꖠ",
              "ꖡ",
              "ꖢ",
              "ꖣ",
              "ꖤ",
              "ꖥ",
              "ꖦ",
              "ꖧ",
              "ꖨ",
              "ꖩ",
              "ꖪ",
              "ꖫ",
              "ꖬ",
              "ꖭ",
              "ꖮ",
              "ꖯ",
              "ꖰ",
              "ꖱ",
              "ꖲ",
              "ꖳ",
              "ꖴ",
              "ꖵ",
              "ꖶ",
              "ꖷ",
              "ꖸ",
              "ꖹ",
              "ꖺ",
              "ꖻ",
              "ꖼ",
              "ꖽ",
              "ꖾ",
              "ꖿ",
              "ꗀ",
              "ꗁ",
              "ꗂ",
              "ꗃ",
              "ꗄ",
              "ꗅ",
              "ꗆ",
              "ꗇ",
              "ꗈ",
              "ꗉ",
              "ꗊ",
              "ꗋ",
              "ꗌ",
              "ꗍ",
              "ꗎ",
              "ꗏ",
              "ꗐ",
              "ꗑ",
              "ꗒ",
              "ꗓ",
              "ꗔ",
              "ꗕ",
              "ꗖ",
              "ꗗ",
              "ꗘ",
              "ꗙ",
              "ꗚ",
              "ꗛ",
              "ꗜ",
              "ꗝ",
              "ꗞ",
              "ꗟ",
              "ꗠ",
              "ꗡ",
              "ꗢ",
              "ꗣ",
              "ꗤ",
              "ꗥ",
              "ꗦ",
              "ꗧ",
              "ꗨ",
              "ꗩ",
              "ꗪ",
              "ꗫ",
              "ꗬ",
              "ꗭ",
              "ꗮ",
              "ꗯ",
              "ꗰ",
              "ꗱ",
              "ꗲ",
              "ꗳ",
              "ꗴ",
              "ꗵ",
              "ꗶ",
              "ꗷ",
              "ꗸ",
              "ꗹ",
              "ꗺ",
              "ꗻ",
              "ꗼ",
              "ꗽ",
              "ꗾ",
              "ꗿ",
              "ꘀ",
              "ꘁ",
              "ꘂ",
              "ꘃ",
              "ꘄ",
              "ꘅ",
              "ꘆ",
              "ꘇ",
              "ꘈ",
              "ꘉ",
              "ꘊ",
              "ꘋ",
              "ꘐ",
              "ꘑ",
              "ꘒ",
              "ꘓ",
              "ꘔ",
              "ꘕ",
              "ꘖ",
              "ꘗ",
              "ꘘ",
              "ꘙ",
              "ꘚ",
              "ꘛ",
              "ꘜ",
              "ꘝ",
              "ꘞ",
              "ꘟ",
              "ꘪ",
              "ꘫ",
              "ꙮ",
              "ꟻ",
              "ꟼ",
              "ꟽ",
              "ꟾ",
              "ꟿ",
              "ꠀ",
              "ꠁ",
              "ꠃ",
              "ꠄ",
              "ꠅ",
              "ꠇ",
              "ꠈ",
              "ꠉ",
              "ꠊ",
              "ꠌ",
              "ꠍ",
              "ꠎ",
              "ꠏ",
              "ꠐ",
              "ꠑ",
              "ꠒ",
              "ꠓ",
              "ꠔ",
              "ꠕ",
              "ꠖ",
              "ꠗ",
              "ꠘ",
              "ꠙ",
              "ꠚ",
              "ꠛ",
              "ꠜ",
              "ꠝ",
              "ꠞ",
              "ꠟ",
              "ꠠ",
              "ꠡ",
              "ꠢ",
              "ꡀ",
              "ꡁ",
              "ꡂ",
              "ꡃ",
              "ꡄ",
              "ꡅ",
              "ꡆ",
              "ꡇ",
              "ꡈ",
              "ꡉ",
              "ꡊ",
              "ꡋ",
              "ꡌ",
              "ꡍ",
              "ꡎ",
              "ꡏ",
              "ꡐ",
              "ꡑ",
              "ꡒ",
              "ꡓ",
              "ꡔ",
              "ꡕ",
              "ꡖ",
              "ꡗ",
              "ꡘ",
              "ꡙ",
              "ꡚ",
              "ꡛ",
              "ꡜ",
              "ꡝ",
              "ꡞ",
              "ꡟ",
              "ꡠ",
              "ꡡ",
              "ꡢ",
              "ꡣ",
              "ꡤ",
              "ꡥ",
              "ꡦ",
              "ꡧ",
              "ꡨ",
              "ꡩ",
              "ꡪ",
              "ꡫ",
              "ꡬ",
              "ꡭ",
              "ꡮ",
              "ꡯ",
              "ꡰ",
              "ꡱ",
              "ꡲ",
              "ꡳ",
              "ꢂ",
              "ꢃ",
              "ꢄ",
              "ꢅ",
              "ꢆ",
              "ꢇ",
              "ꢈ",
              "ꢉ",
              "ꢊ",
              "ꢋ",
              "ꢌ",
              "ꢍ",
              "ꢎ",
              "ꢏ",
              "ꢐ",
              "ꢑ",
              "ꢒ",
              "ꢓ",
              "ꢔ",
              "ꢕ",
              "ꢖ",
              "ꢗ",
              "ꢘ",
              "ꢙ",
              "ꢚ",
              "ꢛ",
              "ꢜ",
              "ꢝ",
              "ꢞ",
              "ꢟ",
              "ꢠ",
              "ꢡ",
              "ꢢ",
              "ꢣ",
              "ꢤ",
              "ꢥ",
              "ꢦ",
              "ꢧ",
              "ꢨ",
              "ꢩ",
              "ꢪ",
              "ꢫ",
              "ꢬ",
              "ꢭ",
              "ꢮ",
              "ꢯ",
              "ꢰ",
              "ꢱ",
              "ꢲ",
              "ꢳ",
              "ꤊ",
              "ꤋ",
              "ꤌ",
              "ꤍ",
              "ꤎ",
              "ꤏ",
              "ꤐ",
              "ꤑ",
              "ꤒ",
              "ꤓ",
              "ꤔ",
              "ꤕ",
              "ꤖ",
              "ꤗ",
              "ꤘ",
              "ꤙ",
              "ꤚ",
              "ꤛ",
              "ꤜ",
              "ꤝ",
              "ꤞ",
              "ꤟ",
              "ꤠ",
              "ꤡ",
              "ꤢ",
              "ꤣ",
              "ꤤ",
              "ꤥ",
              "ꤰ",
              "ꤱ",
              "ꤲ",
              "ꤳ",
              "ꤴ",
              "ꤵ",
              "ꤶ",
              "ꤷ",
              "ꤸ",
              "ꤹ",
              "ꤺ",
              "ꤻ",
              "ꤼ",
              "ꤽ",
              "ꤾ",
              "ꤿ",
              "ꥀ",
              "ꥁ",
              "ꥂ",
              "ꥃ",
              "ꥄ",
              "ꥅ",
              "ꥆ",
              "ꨀ",
              "ꨁ",
              "ꨂ",
              "ꨃ",
              "ꨄ",
              "ꨅ",
              "ꨆ",
              "ꨇ",
              "ꨈ",
              "ꨉ",
              "ꨊ",
              "ꨋ",
              "ꨌ",
              "ꨍ",
              "ꨎ",
              "ꨏ",
              "ꨐ",
              "ꨑ",
              "ꨒ",
              "ꨓ",
              "ꨔ",
              "ꨕ",
              "ꨖ",
              "ꨗ",
              "ꨘ",
              "ꨙ",
              "ꨚ",
              "ꨛ",
              "ꨜ",
              "ꨝ",
              "ꨞ",
              "ꨟ",
              "ꨠ",
              "ꨡ",
              "ꨢ",
              "ꨣ",
              "ꨤ",
              "ꨥ",
              "ꨦ",
              "ꨧ",
              "ꨨ",
              "ꩀ",
              "ꩁ",
              "ꩂ",
              "ꩄ",
              "ꩅ",
              "ꩆ",
              "ꩇ",
              "ꩈ",
              "ꩉ",
              "ꩊ",
              "ꩋ",
              "가",
              "힣",
              "豈",
              "更",
              "車",
              "賈",
              "滑",
              "串",
              "句",
              "龜",
              "龜",
              "契",
              "金",
              "喇",
              "奈",
              "懶",
              "癩",
              "羅",
              "蘿",
              "螺",
              "裸",
              "邏",
              "樂",
              "洛",
              "烙",
              "珞",
              "落",
              "酪",
              "駱",
              "亂",
              "卵",
              "欄",
              "爛",
              "蘭",
              "鸞",
              "嵐",
              "濫",
              "藍",
              "襤",
              "拉",
              "臘",
              "蠟",
              "廊",
              "朗",
              "浪",
              "狼",
              "郎",
              "來",
              "冷",
              "勞",
              "擄",
              "櫓",
              "爐",
              "盧",
              "老",
              "蘆",
              "虜",
              "路",
              "露",
              "魯",
              "鷺",
              "碌",
              "祿",
              "綠",
              "菉",
              "錄",
              "鹿",
              "論",
              "壟",
              "弄",
              "籠",
              "聾",
              "牢",
              "磊",
              "賂",
              "雷",
              "壘",
              "屢",
              "樓",
              "淚",
              "漏",
              "累",
              "縷",
              "陋",
              "勒",
              "肋",
              "凜",
              "凌",
              "稜",
              "綾",
              "菱",
              "陵",
              "讀",
              "拏",
              "樂",
              "諾",
              "丹",
              "寧",
              "怒",
              "率",
              "異",
              "北",
              "磻",
              "便",
              "復",
              "不",
              "泌",
              "數",
              "索",
              "參",
              "塞",
              "省",
              "葉",
              "說",
              "殺",
              "辰",
              "沈",
              "拾",
              "若",
              "掠",
              "略",
              "亮",
              "兩",
              "凉",
              "梁",
              "糧",
              "良",
              "諒",
              "量",
              "勵",
              "呂",
              "女",
              "廬",
              "旅",
              "濾",
              "礪",
              "閭",
              "驪",
              "麗",
              "黎",
              "力",
              "曆",
              "歷",
              "轢",
              "年",
              "憐",
              "戀",
              "撚",
              "漣",
              "煉",
              "璉",
              "秊",
              "練",
              "聯",
              "輦",
              "蓮",
              "連",
              "鍊",
              "列",
              "劣",
              "咽",
              "烈",
              "裂",
              "說",
              "廉",
              "念",
              "捻",
              "殮",
              "簾",
              "獵",
              "令",
              "囹",
              "寧",
              "嶺",
              "怜",
              "玲",
              "瑩",
              "羚",
              "聆",
              "鈴",
              "零",
              "靈",
              "領",
              "例",
              "禮",
              "醴",
              "隸",
              "惡",
              "了",
              "僚",
              "寮",
              "尿",
              "料",
              "樂",
              "燎",
              "療",
              "蓼",
              "遼",
              "龍",
              "暈",
              "阮",
              "劉",
              "杻",
              "柳",
              "流",
              "溜",
              "琉",
              "留",
              "硫",
              "紐",
              "類",
              "六",
              "戮",
              "陸",
              "倫",
              "崙",
              "淪",
              "輪",
              "律",
              "慄",
              "栗",
              "率",
              "隆",
              "利",
              "吏",
              "履",
              "易",
              "李",
              "梨",
              "泥",
              "理",
              "痢",
              "罹",
              "裏",
              "裡",
              "里",
              "離",
              "匿",
              "溺",
              "吝",
              "燐",
              "璘",
              "藺",
              "隣",
              "鱗",
              "麟",
              "林",
              "淋",
              "臨",
              "立",
              "笠",
              "粒",
              "狀",
              "炙",
              "識",
              "什",
              "茶",
              "刺",
              "切",
              "度",
              "拓",
              "糖",
              "宅",
              "洞",
              "暴",
              "輻",
              "行",
              "降",
              "見",
              "廓",
              "兀",
              "嗀",
              "﨎",
              "﨏",
              "塚",
              "﨑",
              "晴",
              "﨓",
              "﨔",
              "凞",
              "猪",
              "益",
              "礼",
              "神",
              "祥",
              "福",
              "靖",
              "精",
              "羽",
              "﨟",
              "蘒",
              "﨡",
              "諸",
              "﨣",
              "﨤",
              "逸",
              "都",
              "﨧",
              "﨨",
              "﨩",
              "飯",
              "飼",
              "館",
              "鶴",
              "侮",
              "僧",
              "免",
              "勉",
              "勤",
              "卑",
              "喝",
              "嘆",
              "器",
              "塀",
              "墨",
              "層",
              "屮",
              "悔",
              "慨",
              "憎",
              "懲",
              "敏",
              "既",
              "暑",
              "梅",
              "海",
              "渚",
              "漢",
              "煮",
              "爫",
              "琢",
              "碑",
              "社",
              "祉",
              "祈",
              "祐",
              "祖",
              "祝",
              "禍",
              "禎",
              "穀",
              "突",
              "節",
              "練",
              "縉",
              "繁",
              "署",
              "者",
              "臭",
              "艹",
              "艹",
              "著",
              "褐",
              "視",
              "謁",
              "謹",
              "賓",
              "贈",
              "辶",
              "逸",
              "難",
              "響",
              "頻",
              "並",
              "况",
              "全",
              "侀",
              "充",
              "冀",
              "勇",
              "勺",
              "喝",
              "啕",
              "喙",
              "嗢",
              "塚",
              "墳",
              "奄",
              "奔",
              "婢",
              "嬨",
              "廒",
              "廙",
              "彩",
              "徭",
              "惘",
              "慎",
              "愈",
              "憎",
              "慠",
              "懲",
              "戴",
              "揄",
              "搜",
              "摒",
              "敖",
              "晴",
              "朗",
              "望",
              "杖",
              "歹",
              "殺",
              "流",
              "滛",
              "滋",
              "漢",
              "瀞",
              "煮",
              "瞧",
              "爵",
              "犯",
              "猪",
              "瑱",
              "甆",
              "画",
              "瘝",
              "瘟",
              "益",
              "盛",
              "直",
              "睊",
              "着",
              "磌",
              "窱",
              "節",
              "类",
              "絛",
              "練",
              "缾",
              "者",
              "荒",
              "華",
              "蝹",
              "襁",
              "覆",
              "視",
              "調",
              "諸",
              "請",
              "謁",
              "諾",
              "諭",
              "謹",
              "變",
              "贈",
              "輸",
              "遲",
              "醙",
              "鉶",
              "陼",
              "難",
              "靖",
              "韛",
              "響",
              "頋",
              "頻",
              "鬒",
              "龜",
              "𢡊",
              "𢡄",
              "𣏕",
              "㮝",
              "䀘",
              "䀹",
              "𥉉",
              "𥳐",
              "𧻓",
              "齃",
              "龎",
              "יִ",
              "ײַ",
              "ﬠ",
              "ﬡ",
              "ﬢ",
              "ﬣ",
              "ﬤ",
              "ﬥ",
              "ﬦ",
              "ﬧ",
              "ﬨ",
              "שׁ",
              "שׂ",
              "שּׁ",
              "שּׂ",
              "אַ",
              "אָ",
              "אּ",
              "בּ",
              "גּ",
              "דּ",
              "הּ",
              "וּ",
              "זּ",
              "טּ",
              "יּ",
              "ךּ",
              "כּ",
              "לּ",
              "מּ",
              "נּ",
              "סּ",
              "ףּ",
              "פּ",
              "צּ",
              "קּ",
              "רּ",
              "שּ",
              "תּ",
              "וֹ",
              "בֿ",
              "כֿ",
              "פֿ",
              "ﭏ",
              "ﭐ",
              "ﭑ",
              "ﭒ",
              "ﭓ",
              "ﭔ",
              "ﭕ",
              "ﭖ",
              "ﭗ",
              "ﭘ",
              "ﭙ",
              "ﭚ",
              "ﭛ",
              "ﭜ",
              "ﭝ",
              "ﭞ",
              "ﭟ",
              "ﭠ",
              "ﭡ",
              "ﭢ",
              "ﭣ",
              "ﭤ",
              "ﭥ",
              "ﭦ",
              "ﭧ",
              "ﭨ",
              "ﭩ",
              "ﭪ",
              "ﭫ",
              "ﭬ",
              "ﭭ",
              "ﭮ",
              "ﭯ",
              "ﭰ",
              "ﭱ",
              "ﭲ",
              "ﭳ",
              "ﭴ",
              "ﭵ",
              "ﭶ",
              "ﭷ",
              "ﭸ",
              "ﭹ",
              "ﭺ",
              "ﭻ",
              "ﭼ",
              "ﭽ",
              "ﭾ",
              "ﭿ",
              "ﮀ",
              "ﮁ",
              "ﮂ",
              "ﮃ",
              "ﮄ",
              "ﮅ",
              "ﮆ",
              "ﮇ",
              "ﮈ",
              "ﮉ",
              "ﮊ",
              "ﮋ",
              "ﮌ",
              "ﮍ",
              "ﮎ",
              "ﮏ",
              "ﮐ",
              "ﮑ",
              "ﮒ",
              "ﮓ",
              "ﮔ",
              "ﮕ",
              "ﮖ",
              "ﮗ",
              "ﮘ",
              "ﮙ",
              "ﮚ",
              "ﮛ",
              "ﮜ",
              "ﮝ",
              "ﮞ",
              "ﮟ",
              "ﮠ",
              "ﮡ",
              "ﮢ",
              "ﮣ",
              "ﮤ",
              "ﮥ",
              "ﮦ",
              "ﮧ",
              "ﮨ",
              "ﮩ",
              "ﮪ",
              "ﮫ",
              "ﮬ",
              "ﮭ",
              "ﮮ",
              "ﮯ",
              "ﮰ",
              "ﮱ",
              "ﯓ",
              "ﯔ",
              "ﯕ",
              "ﯖ",
              "ﯗ",
              "ﯘ",
              "ﯙ",
              "ﯚ",
              "ﯛ",
              "ﯜ",
              "ﯝ",
              "ﯞ",
              "ﯟ",
              "ﯠ",
              "ﯡ",
              "ﯢ",
              "ﯣ",
              "ﯤ",
              "ﯥ",
              "ﯦ",
              "ﯧ",
              "ﯨ",
              "ﯩ",
              "ﯪ",
              "ﯫ",
              "ﯬ",
              "ﯭ",
              "ﯮ",
              "ﯯ",
              "ﯰ",
              "ﯱ",
              "ﯲ",
              "ﯳ",
              "ﯴ",
              "ﯵ",
              "ﯶ",
              "ﯷ",
              "ﯸ",
              "ﯹ",
              "ﯺ",
              "ﯻ",
              "ﯼ",
              "ﯽ",
              "ﯾ",
              "ﯿ",
              "ﰀ",
              "ﰁ",
              "ﰂ",
              "ﰃ",
              "ﰄ",
              "ﰅ",
              "ﰆ",
              "ﰇ",
              "ﰈ",
              "ﰉ",
              "ﰊ",
              "ﰋ",
              "ﰌ",
              "ﰍ",
              "ﰎ",
              "ﰏ",
              "ﰐ",
              "ﰑ",
              "ﰒ",
              "ﰓ",
              "ﰔ",
              "ﰕ",
              "ﰖ",
              "ﰗ",
              "ﰘ",
              "ﰙ",
              "ﰚ",
              "ﰛ",
              "ﰜ",
              "ﰝ",
              "ﰞ",
              "ﰟ",
              "ﰠ",
              "ﰡ",
              "ﰢ",
              "ﰣ",
              "ﰤ",
              "ﰥ",
              "ﰦ",
              "ﰧ",
              "ﰨ",
              "ﰩ",
              "ﰪ",
              "ﰫ",
              "ﰬ",
              "ﰭ",
              "ﰮ",
              "ﰯ",
              "ﰰ",
              "ﰱ",
              "ﰲ",
              "ﰳ",
              "ﰴ",
              "ﰵ",
              "ﰶ",
              "ﰷ",
              "ﰸ",
              "ﰹ",
              "ﰺ",
              "ﰻ",
              "ﰼ",
              "ﰽ",
              "ﰾ",
              "ﰿ",
              "ﱀ",
              "ﱁ",
              "ﱂ",
              "ﱃ",
              "ﱄ",
              "ﱅ",
              "ﱆ",
              "ﱇ",
              "ﱈ",
              "ﱉ",
              "ﱊ",
              "ﱋ",
              "ﱌ",
              "ﱍ",
              "ﱎ",
              "ﱏ",
              "ﱐ",
              "ﱑ",
              "ﱒ",
              "ﱓ",
              "ﱔ",
              "ﱕ",
              "ﱖ",
              "ﱗ",
              "ﱘ",
              "ﱙ",
              "ﱚ",
              "ﱛ",
              "ﱜ",
              "ﱝ",
              "ﱞ",
              "ﱟ",
              "ﱠ",
              "ﱡ",
              "ﱢ",
              "ﱣ",
              "ﱤ",
              "ﱥ",
              "ﱦ",
              "ﱧ",
              "ﱨ",
              "ﱩ",
              "ﱪ",
              "ﱫ",
              "ﱬ",
              "ﱭ",
              "ﱮ",
              "ﱯ",
              "ﱰ",
              "ﱱ",
              "ﱲ",
              "ﱳ",
              "ﱴ",
              "ﱵ",
              "ﱶ",
              "ﱷ",
              "ﱸ",
              "ﱹ",
              "ﱺ",
              "ﱻ",
              "ﱼ",
              "ﱽ",
              "ﱾ",
              "ﱿ",
              "ﲀ",
              "ﲁ",
              "ﲂ",
              "ﲃ",
              "ﲄ",
              "ﲅ",
              "ﲆ",
              "ﲇ",
              "ﲈ",
              "ﲉ",
              "ﲊ",
              "ﲋ",
              "ﲌ",
              "ﲍ",
              "ﲎ",
              "ﲏ",
              "ﲐ",
              "ﲑ",
              "ﲒ",
              "ﲓ",
              "ﲔ",
              "ﲕ",
              "ﲖ",
              "ﲗ",
              "ﲘ",
              "ﲙ",
              "ﲚ",
              "ﲛ",
              "ﲜ",
              "ﲝ",
              "ﲞ",
              "ﲟ",
              "ﲠ",
              "ﲡ",
              "ﲢ",
              "ﲣ",
              "ﲤ",
              "ﲥ",
              "ﲦ",
              "ﲧ",
              "ﲨ",
              "ﲩ",
              "ﲪ",
              "ﲫ",
              "ﲬ",
              "ﲭ",
              "ﲮ",
              "ﲯ",
              "ﲰ",
              "ﲱ",
              "ﲲ",
              "ﲳ",
              "ﲴ",
              "ﲵ",
              "ﲶ",
              "ﲷ",
              "ﲸ",
              "ﲹ",
              "ﲺ",
              "ﲻ",
              "ﲼ",
              "ﲽ",
              "ﲾ",
              "ﲿ",
              "ﳀ",
              "ﳁ",
              "ﳂ",
              "ﳃ",
              "ﳄ",
              "ﳅ",
              "ﳆ",
              "ﳇ",
              "ﳈ",
              "ﳉ",
              "ﳊ",
              "ﳋ",
              "ﳌ",
              "ﳍ",
              "ﳎ",
              "ﳏ",
              "ﳐ",
              "ﳑ",
              "ﳒ",
              "ﳓ",
              "ﳔ",
              "ﳕ",
              "ﳖ",
              "ﳗ",
              "ﳘ",
              "ﳙ",
              "ﳚ",
              "ﳛ",
              "ﳜ",
              "ﳝ",
              "ﳞ",
              "ﳟ",
              "ﳠ",
              "ﳡ",
              "ﳢ",
              "ﳣ",
              "ﳤ",
              "ﳥ",
              "ﳦ",
              "ﳧ",
              "ﳨ",
              "ﳩ",
              "ﳪ",
              "ﳫ",
              "ﳬ",
              "ﳭ",
              "ﳮ",
              "ﳯ",
              "ﳰ",
              "ﳱ",
              "ﳲ",
              "ﳳ",
              "ﳴ",
              "ﳵ",
              "ﳶ",
              "ﳷ",
              "ﳸ",
              "ﳹ",
              "ﳺ",
              "ﳻ",
              "ﳼ",
              "ﳽ",
              "ﳾ",
              "ﳿ",
              "ﴀ",
              "ﴁ",
              "ﴂ",
              "ﴃ",
              "ﴄ",
              "ﴅ",
              "ﴆ",
              "ﴇ",
              "ﴈ",
              "ﴉ",
              "ﴊ",
              "ﴋ",
              "ﴌ",
              "ﴍ",
              "ﴎ",
              "ﴏ",
              "ﴐ",
              "ﴑ",
              "ﴒ",
              "ﴓ",
              "ﴔ",
              "ﴕ",
              "ﴖ",
              "ﴗ",
              "ﴘ",
              "ﴙ",
              "ﴚ",
              "ﴛ",
              "ﴜ",
              "ﴝ",
              "ﴞ",
              "ﴟ",
              "ﴠ",
              "ﴡ",
              "ﴢ",
              "ﴣ",
              "ﴤ",
              "ﴥ",
              "ﴦ",
              "ﴧ",
              "ﴨ",
              "ﴩ",
              "ﴪ",
              "ﴫ",
              "ﴬ",
              "ﴭ",
              "ﴮ",
              "ﴯ",
              "ﴰ",
              "ﴱ",
              "ﴲ",
              "ﴳ",
              "ﴴ",
              "ﴵ",
              "ﴶ",
              "ﴷ",
              "ﴸ",
              "ﴹ",
              "ﴺ",
              "ﴻ",
              "ﴼ",
              "ﴽ",
              "ﵐ",
              "ﵑ",
              "ﵒ",
              "ﵓ",
              "ﵔ",
              "ﵕ",
              "ﵖ",
              "ﵗ",
              "ﵘ",
              "ﵙ",
              "ﵚ",
              "ﵛ",
              "ﵜ",
              "ﵝ",
              "ﵞ",
              "ﵟ",
              "ﵠ",
              "ﵡ",
              "ﵢ",
              "ﵣ",
              "ﵤ",
              "ﵥ",
              "ﵦ",
              "ﵧ",
              "ﵨ",
              "ﵩ",
              "ﵪ",
              "ﵫ",
              "ﵬ",
              "ﵭ",
              "ﵮ",
              "ﵯ",
              "ﵰ",
              "ﵱ",
              "ﵲ",
              "ﵳ",
              "ﵴ",
              "ﵵ",
              "ﵶ",
              "ﵷ",
              "ﵸ",
              "ﵹ",
              "ﵺ",
              "ﵻ",
              "ﵼ",
              "ﵽ",
              "ﵾ",
              "ﵿ",
              "ﶀ",
              "ﶁ",
              "ﶂ",
              "ﶃ",
              "ﶄ",
              "ﶅ",
              "ﶆ",
              "ﶇ",
              "ﶈ",
              "ﶉ",
              "ﶊ",
              "ﶋ",
              "ﶌ",
              "ﶍ",
              "ﶎ",
              "ﶏ",
              "ﶒ",
              "ﶓ",
              "ﶔ",
              "ﶕ",
              "ﶖ",
              "ﶗ",
              "ﶘ",
              "ﶙ",
              "ﶚ",
              "ﶛ",
              "ﶜ",
              "ﶝ",
              "ﶞ",
              "ﶟ",
              "ﶠ",
              "ﶡ",
              "ﶢ",
              "ﶣ",
              "ﶤ",
              "ﶥ",
              "ﶦ",
              "ﶧ",
              "ﶨ",
              "ﶩ",
              "ﶪ",
              "ﶫ",
              "ﶬ",
              "ﶭ",
              "ﶮ",
              "ﶯ",
              "ﶰ",
              "ﶱ",
              "ﶲ",
              "ﶳ",
              "ﶴ",
              "ﶵ",
              "ﶶ",
              "ﶷ",
              "ﶸ",
              "ﶹ",
              "ﶺ",
              "ﶻ",
              "ﶼ",
              "ﶽ",
              "ﶾ",
              "ﶿ",
              "ﷀ",
              "ﷁ",
              "ﷂ",
              "ﷃ",
              "ﷄ",
              "ﷅ",
              "ﷆ",
              "ﷇ",
              "ﷰ",
              "ﷱ",
              "ﷲ",
              "ﷳ",
              "ﷴ",
              "ﷵ",
              "ﷶ",
              "ﷷ",
              "ﷸ",
              "ﷹ",
              "ﷺ",
              "ﷻ",
              "ﹰ",
              "ﹱ",
              "ﹲ",
              "ﹳ",
              "ﹴ",
              "ﹶ",
              "ﹷ",
              "ﹸ",
              "ﹹ",
              "ﹺ",
              "ﹻ",
              "ﹼ",
              "ﹽ",
              "ﹾ",
              "ﹿ",
              "ﺀ",
              "ﺁ",
              "ﺂ",
              "ﺃ",
              "ﺄ",
              "ﺅ",
              "ﺆ",
              "ﺇ",
              "ﺈ",
              "ﺉ",
              "ﺊ",
              "ﺋ",
              "ﺌ",
              "ﺍ",
              "ﺎ",
              "ﺏ",
              "ﺐ",
              "ﺑ",
              "ﺒ",
              "ﺓ",
              "ﺔ",
              "ﺕ",
              "ﺖ",
              "ﺗ",
              "ﺘ",
              "ﺙ",
              "ﺚ",
              "ﺛ",
              "ﺜ",
              "ﺝ",
              "ﺞ",
              "ﺟ",
              "ﺠ",
              "ﺡ",
              "ﺢ",
              "ﺣ",
              "ﺤ",
              "ﺥ",
              "ﺦ",
              "ﺧ",
              "ﺨ",
              "ﺩ",
              "ﺪ",
              "ﺫ",
              "ﺬ",
              "ﺭ",
              "ﺮ",
              "ﺯ",
              "ﺰ",
              "ﺱ",
              "ﺲ",
              "ﺳ",
              "ﺴ",
              "ﺵ",
              "ﺶ",
              "ﺷ",
              "ﺸ",
              "ﺹ",
              "ﺺ",
              "ﺻ",
              "ﺼ",
              "ﺽ",
              "ﺾ",
              "ﺿ",
              "ﻀ",
              "ﻁ",
              "ﻂ",
              "ﻃ",
              "ﻄ",
              "ﻅ",
              "ﻆ",
              "ﻇ",
              "ﻈ",
              "ﻉ",
              "ﻊ",
              "ﻋ",
              "ﻌ",
              "ﻍ",
              "ﻎ",
              "ﻏ",
              "ﻐ",
              "ﻑ",
              "ﻒ",
              "ﻓ",
              "ﻔ",
              "ﻕ",
              "ﻖ",
              "ﻗ",
              "ﻘ",
              "ﻙ",
              "ﻚ",
              "ﻛ",
              "ﻜ",
              "ﻝ",
              "ﻞ",
              "ﻟ",
              "ﻠ",
              "ﻡ",
              "ﻢ",
              "ﻣ",
              "ﻤ",
              "ﻥ",
              "ﻦ",
              "ﻧ",
              "ﻨ",
              "ﻩ",
              "ﻪ",
              "ﻫ",
              "ﻬ",
              "ﻭ",
              "ﻮ",
              "ﻯ",
              "ﻰ",
              "ﻱ",
              "ﻲ",
              "ﻳ",
              "ﻴ",
              "ﻵ",
              "ﻶ",
              "ﻷ",
              "ﻸ",
              "ﻹ",
              "ﻺ",
              "ﻻ",
              "ﻼ",
              "ｦ",
              "ｧ",
              "ｨ",
              "ｩ",
              "ｪ",
              "ｫ",
              "ｬ",
              "ｭ",
              "ｮ",
              "ｯ",
              "ｱ",
              "ｲ",
              "ｳ",
              "ｴ",
              "ｵ",
              "ｶ",
              "ｷ",
              "ｸ",
              "ｹ",
              "ｺ",
              "ｻ",
              "ｼ",
              "ｽ",
              "ｾ",
              "ｿ",
              "ﾀ",
              "ﾁ",
              "ﾂ",
              "ﾃ",
              "ﾄ",
              "ﾅ",
              "ﾆ",
              "ﾇ",
              "ﾈ",
              "ﾉ",
              "ﾊ",
              "ﾋ",
              "ﾌ",
              "ﾍ",
              "ﾎ",
              "ﾏ",
              "ﾐ",
              "ﾑ",
              "ﾒ",
              "ﾓ",
              "ﾔ",
              "ﾕ",
              "ﾖ",
              "ﾗ",
              "ﾘ",
              "ﾙ",
              "ﾚ",
              "ﾛ",
              "ﾜ",
              "ﾝ",
              "ﾠ",
              "ﾡ",
              "ﾢ",
              "ﾣ",
              "ﾤ",
              "ﾥ",
              "ﾦ",
              "ﾧ",
              "ﾨ",
              "ﾩ",
              "ﾪ",
              "ﾫ",
              "ﾬ",
              "ﾭ",
              "ﾮ",
              "ﾯ",
              "ﾰ",
              "ﾱ",
              "ﾲ",
              "ﾳ",
              "ﾴ",
              "ﾵ",
              "ﾶ",
              "ﾷ",
              "ﾸ",
              "ﾹ",
              "ﾺ",
              "ﾻ",
              "ﾼ",
              "ﾽ",
              "ﾾ",
              "ￂ",
              "ￃ",
              "ￄ",
              "ￅ",
              "ￆ",
              "ￇ",
              "ￊ",
              "ￋ",
              "ￌ",
              "ￍ",
              "ￎ",
              "ￏ",
              "ￒ",
              "ￓ",
              "ￔ",
              "ￕ",
              "ￖ",
              "ￗ",
              "ￚ",
              "ￛ",
              "ￜ",
              "ᛮ",
              "ᛯ",
              "ᛰ",
              "Ⅰ",
              "Ⅱ",
              "Ⅲ",
              "Ⅳ",
              "Ⅴ",
              "Ⅵ",
              "Ⅶ",
              "Ⅷ",
              "Ⅸ",
              "Ⅹ",
              "Ⅺ",
              "Ⅻ",
              "Ⅼ",
              "Ⅽ",
              "Ⅾ",
              "Ⅿ",
              "ⅰ",
              "ⅱ",
              "ⅲ",
              "ⅳ",
              "ⅴ",
              "ⅵ",
              "ⅶ",
              "ⅷ",
              "ⅸ",
              "ⅹ",
              "ⅺ",
              "ⅻ",
              "ⅼ",
              "ⅽ",
              "ⅾ",
              "ⅿ",
              "ↀ",
              "ↁ",
              "ↂ",
              "ↅ",
              "ↆ",
              "ↇ",
              "ↈ",
              "〇",
              "〡",
              "〢",
              "〣",
              "〤",
              "〥",
              "〦",
              "〧",
              "〨",
              "〩",
              "〸",
              "〹",
              "〺"
            ]
          },
          {
            "type": "Literal",
            "Literal": "$",
            "ignoreCase": false
          },
          {
            "type": "Literal",
            "Literal": "_",
            "ignoreCase": false
          },
          {
            "type": "action",
            "expression": {
              "type": "Sequence",
              "expressions": [
                {
                  "type": "Literal",
                  "Literal": "\\",
                  "ignoreCase": false
                },
                {
                  "type": "labeled",
                  "label": "sequence",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "UnicodeEscapeSequence"
                  }
                }
              ]
            },
            "code": " return sequence; "
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "IdentifierPart",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "rule_ref",
            "identifier": "IdentifierStart"
          },
          {
            "type": "Class",
            "characters": [
              "̀",
              "́",
              "̂",
              "̃",
              "̄",
              "̅",
              "̆",
              "̇",
              "̈",
              "̉",
              "̊",
              "̋",
              "̌",
              "̍",
              "̎",
              "̏",
              "̐",
              "̑",
              "̒",
              "̓",
              "̔",
              "̕",
              "̖",
              "̗",
              "̘",
              "̙",
              "̚",
              "̛",
              "̜",
              "̝",
              "̞",
              "̟",
              "̠",
              "̡",
              "̢",
              "̣",
              "̤",
              "̥",
              "̦",
              "̧",
              "̨",
              "̩",
              "̪",
              "̫",
              "̬",
              "̭",
              "̮",
              "̯",
              "̰",
              "̱",
              "̲",
              "̳",
              "̴",
              "̵",
              "̶",
              "̷",
              "̸",
              "̹",
              "̺",
              "̻",
              "̼",
              "̽",
              "̾",
              "̿",
              "̀",
              "́",
              "͂",
              "̓",
              "̈́",
              "ͅ",
              "͆",
              "͇",
              "͈",
              "͉",
              "͊",
              "͋",
              "͌",
              "͍",
              "͎",
              "͏",
              "͐",
              "͑",
              "͒",
              "͓",
              "͔",
              "͕",
              "͖",
              "͗",
              "͘",
              "͙",
              "͚",
              "͛",
              "͜",
              "͝",
              "͞",
              "͟",
              "͠",
              "͡",
              "͢",
              "ͣ",
              "ͤ",
              "ͥ",
              "ͦ",
              "ͧ",
              "ͨ",
              "ͩ",
              "ͪ",
              "ͫ",
              "ͬ",
              "ͭ",
              "ͮ",
              "ͯ",
              "҃",
              "҄",
              "҅",
              "҆",
              "҇",
              "֑",
              "֒",
              "֓",
              "֔",
              "֕",
              "֖",
              "֗",
              "֘",
              "֙",
              "֚",
              "֛",
              "֜",
              "֝",
              "֞",
              "֟",
              "֠",
              "֡",
              "֢",
              "֣",
              "֤",
              "֥",
              "֦",
              "֧",
              "֨",
              "֩",
              "֪",
              "֫",
              "֬",
              "֭",
              "֮",
              "֯",
              "ְ",
              "ֱ",
              "ֲ",
              "ֳ",
              "ִ",
              "ֵ",
              "ֶ",
              "ַ",
              "ָ",
              "ֹ",
              "ֺ",
              "ֻ",
              "ּ",
              "ֽ",
              "ֿ",
              "ׁ",
              "ׂ",
              "ׄ",
              "ׅ",
              "ׇ",
              "ؐ",
              "ؑ",
              "ؒ",
              "ؓ",
              "ؔ",
              "ؕ",
              "ؖ",
              "ؗ",
              "ؘ",
              "ؙ",
              "ؚ",
              "ً",
              "ٌ",
              "ٍ",
              "َ",
              "ُ",
              "ِ",
              "ّ",
              "ْ",
              "ٓ",
              "ٔ",
              "ٕ",
              "ٖ",
              "ٗ",
              "٘",
              "ٙ",
              "ٚ",
              "ٛ",
              "ٜ",
              "ٝ",
              "ٞ",
              "ٰ",
              "ۖ",
              "ۗ",
              "ۘ",
              "ۙ",
              "ۚ",
              "ۛ",
              "ۜ",
              "۟",
              "۠",
              "ۡ",
              "ۢ",
              "ۣ",
              "ۤ",
              "ۧ",
              "ۨ",
              "۪",
              "۫",
              "۬",
              "ۭ",
              "ܑ",
              "ܰ",
              "ܱ",
              "ܲ",
              "ܳ",
              "ܴ",
              "ܵ",
              "ܶ",
              "ܷ",
              "ܸ",
              "ܹ",
              "ܺ",
              "ܻ",
              "ܼ",
              "ܽ",
              "ܾ",
              "ܿ",
              "݀",
              "݁",
              "݂",
              "݃",
              "݄",
              "݅",
              "݆",
              "݇",
              "݈",
              "݉",
              "݊",
              "ަ",
              "ާ",
              "ި",
              "ީ",
              "ު",
              "ޫ",
              "ެ",
              "ޭ",
              "ޮ",
              "ޯ",
              "ް",
              "߫",
              "߬",
              "߭",
              "߮",
              "߯",
              "߰",
              "߱",
              "߲",
              "߳",
              "ँ",
              "ं",
              "़",
              "ु",
              "ू",
              "ृ",
              "ॄ",
              "ॅ",
              "ॆ",
              "े",
              "ै",
              "्",
              "॑",
              "॒",
              "॓",
              "॔",
              "ॢ",
              "ॣ",
              "ঁ",
              "়",
              "ু",
              "ূ",
              "ৃ",
              "ৄ",
              "্",
              "ৢ",
              "ৣ",
              "ਁ",
              "ਂ",
              "਼",
              "ੁ",
              "ੂ",
              "ੇ",
              "ੈ",
              "ੋ",
              "ੌ",
              "੍",
              "ੑ",
              "ੰ",
              "ੱ",
              "ੵ",
              "ઁ",
              "ં",
              "઼",
              "ુ",
              "ૂ",
              "ૃ",
              "ૄ",
              "ૅ",
              "ે",
              "ૈ",
              "્",
              "ૢ",
              "ૣ",
              "ଁ",
              "଼",
              "ି",
              "ୁ",
              "ୂ",
              "ୃ",
              "ୄ",
              "୍",
              "ୖ",
              "ୢ",
              "ୣ",
              "ஂ",
              "ீ",
              "்",
              "ా",
              "ి",
              "ీ",
              "ె",
              "ే",
              "ై",
              "ొ",
              "ో",
              "ౌ",
              "్",
              "ౕ",
              "ౖ",
              "ౢ",
              "ౣ",
              "಼",
              "ಿ",
              "ೆ",
              "ೌ",
              "್",
              "ೢ",
              "ೣ",
              "ു",
              "ൂ",
              "ൃ",
              "ൄ",
              "്",
              "ൢ",
              "ൣ",
              "්",
              "ි",
              "ී",
              "ු",
              "ූ",
              "ั",
              "ิ",
              "ี",
              "ึ",
              "ื",
              "ุ",
              "ู",
              "ฺ",
              "็",
              "่",
              "้",
              "๊",
              "๋",
              "์",
              "ํ",
              "๎",
              "ັ",
              "ິ",
              "ີ",
              "ຶ",
              "ື",
              "ຸ",
              "ູ",
              "ົ",
              "ຼ",
              "່",
              "້",
              "໊",
              "໋",
              "໌",
              "ໍ",
              "༘",
              "༙",
              "༵",
              "༷",
              "༹",
              "ཱ",
              "ི",
              "ཱི",
              "ུ",
              "ཱུ",
              "ྲྀ",
              "ཷ",
              "ླྀ",
              "ཹ",
              "ེ",
              "ཻ",
              "ོ",
              "ཽ",
              "ཾ",
              "ྀ",
              "ཱྀ",
              "ྂ",
              "ྃ",
              "྄",
              "྆",
              "྇",
              "ྐ",
              "ྑ",
              "ྒ",
              "ྒྷ",
              "ྔ",
              "ྕ",
              "ྖ",
              "ྗ",
              "ྙ",
              "ྚ",
              "ྛ",
              "ྜ",
              "ྜྷ",
              "ྞ",
              "ྟ",
              "ྠ",
              "ྡ",
              "ྡྷ",
              "ྣ",
              "ྤ",
              "ྥ",
              "ྦ",
              "ྦྷ",
              "ྨ",
              "ྩ",
              "ྪ",
              "ྫ",
              "ྫྷ",
              "ྭ",
              "ྮ",
              "ྯ",
              "ྰ",
              "ྱ",
              "ྲ",
              "ླ",
              "ྴ",
              "ྵ",
              "ྶ",
              "ྷ",
              "ྸ",
              "ྐྵ",
              "ྺ",
              "ྻ",
              "ྼ",
              "࿆",
              "ိ",
              "ီ",
              "ု",
              "ူ",
              "ဲ",
              "ဳ",
              "ဴ",
              "ဵ",
              "ံ",
              "့",
              "္",
              "်",
              "ွ",
              "ှ",
              "ၘ",
              "ၙ",
              "ၞ",
              "ၟ",
              "ၠ",
              "ၱ",
              "ၲ",
              "ၳ",
              "ၴ",
              "ႂ",
              "ႅ",
              "ႆ",
              "ႍ",
              "፟",
              "ᜒ",
              "ᜓ",
              "᜔",
              "ᜲ",
              "ᜳ",
              "᜴",
              "ᝒ",
              "ᝓ",
              "ᝲ",
              "ᝳ",
              "ិ",
              "ី",
              "ឹ",
              "ឺ",
              "ុ",
              "ូ",
              "ួ",
              "ំ",
              "៉",
              "៊",
              "់",
              "៌",
              "៍",
              "៎",
              "៏",
              "័",
              "៑",
              "្",
              "៓",
              "៝",
              "᠋",
              "᠌",
              "᠍",
              "ᢩ",
              "ᤠ",
              "ᤡ",
              "ᤢ",
              "ᤧ",
              "ᤨ",
              "ᤲ",
              "᤹",
              "᤺",
              "᤻",
              "ᨗ",
              "ᨘ",
              "ᬀ",
              "ᬁ",
              "ᬂ",
              "ᬃ",
              "᬴",
              "ᬶ",
              "ᬷ",
              "ᬸ",
              "ᬹ",
              "ᬺ",
              "ᬼ",
              "ᭂ",
              "᭫",
              "᭬",
              "᭭",
              "᭮",
              "᭯",
              "᭰",
              "᭱",
              "᭲",
              "᭳",
              "ᮀ",
              "ᮁ",
              "ᮢ",
              "ᮣ",
              "ᮤ",
              "ᮥ",
              "ᮨ",
              "ᮩ",
              "ᰬ",
              "ᰭ",
              "ᰮ",
              "ᰯ",
              "ᰰ",
              "ᰱ",
              "ᰲ",
              "ᰳ",
              "ᰶ",
              "᰷",
              "᷀",
              "᷁",
              "᷂",
              "᷃",
              "᷄",
              "᷅",
              "᷆",
              "᷇",
              "᷈",
              "᷉",
              "᷊",
              "᷋",
              "᷌",
              "᷍",
              "᷎",
              "᷏",
              "᷐",
              "᷑",
              "᷒",
              "ᷓ",
              "ᷔ",
              "ᷕ",
              "ᷖ",
              "ᷗ",
              "ᷘ",
              "ᷙ",
              "ᷚ",
              "ᷛ",
              "ᷜ",
              "ᷝ",
              "ᷞ",
              "ᷟ",
              "ᷠ",
              "ᷡ",
              "ᷢ",
              "ᷣ",
              "ᷤ",
              "ᷥ",
              "ᷦ",
              "᷾",
              "᷿",
              "⃐",
              "⃑",
              "⃒",
              "⃓",
              "⃔",
              "⃕",
              "⃖",
              "⃗",
              "⃘",
              "⃙",
              "⃚",
              "⃛",
              "⃜",
              "⃡",
              "⃥",
              "⃦",
              "⃧",
              "⃨",
              "⃩",
              "⃪",
              "⃫",
              "⃬",
              "⃭",
              "⃮",
              "⃯",
              "⃰",
              "ⷠ",
              "ⷡ",
              "ⷢ",
              "ⷣ",
              "ⷤ",
              "ⷥ",
              "ⷦ",
              "ⷧ",
              "ⷨ",
              "ⷩ",
              "ⷪ",
              "ⷫ",
              "ⷬ",
              "ⷭ",
              "ⷮ",
              "ⷯ",
              "ⷰ",
              "ⷱ",
              "ⷲ",
              "ⷳ",
              "ⷴ",
              "ⷵ",
              "ⷶ",
              "ⷷ",
              "ⷸ",
              "ⷹ",
              "ⷺ",
              "ⷻ",
              "ⷼ",
              "ⷽ",
              "ⷾ",
              "ⷿ",
              "〪",
              "〫",
              "〬",
              "〭",
              "〮",
              "〯",
              "゙",
              "゚",
              "꙯",
              "꙼",
              "꙽",
              "ꠂ",
              "꠆",
              "ꠋ",
              "ꠥ",
              "ꠦ",
              "꣄",
              "ꤦ",
              "ꤧ",
              "ꤨ",
              "ꤩ",
              "ꤪ",
              "꤫",
              "꤬",
              "꤭",
              "ꥇ",
              "ꥈ",
              "ꥉ",
              "ꥊ",
              "ꥋ",
              "ꥌ",
              "ꥍ",
              "ꥎ",
              "ꥏ",
              "ꥐ",
              "ꥑ",
              "ꨩ",
              "ꨪ",
              "ꨫ",
              "ꨬ",
              "ꨭ",
              "ꨮ",
              "ꨱ",
              "ꨲ",
              "ꨵ",
              "ꨶ",
              "ꩃ",
              "ꩌ",
              "ﬞ",
              "︀",
              "︁",
              "︂",
              "︃",
              "︄",
              "︅",
              "︆",
              "︇",
              "︈",
              "︉",
              "︊",
              "︋",
              "︌",
              "︍",
              "︎",
              "️",
              "︠",
              "︡",
              "︢",
              "︣",
              "︤",
              "︥",
              "︦",
              "ः",
              "ा",
              "ि",
              "ी",
              "ॉ",
              "ॊ",
              "ो",
              "ौ",
              "ং",
              "ঃ",
              "া",
              "ি",
              "ী",
              "ে",
              "ৈ",
              "ো",
              "ৌ",
              "ৗ",
              "ਃ",
              "ਾ",
              "ਿ",
              "ੀ",
              "ઃ",
              "ા",
              "િ",
              "ી",
              "ૉ",
              "ો",
              "ૌ",
              "ଂ",
              "ଃ",
              "ା",
              "ୀ",
              "େ",
              "ୈ",
              "ୋ",
              "ୌ",
              "ୗ",
              "ா",
              "ி",
              "ு",
              "ூ",
              "ெ",
              "ே",
              "ை",
              "ொ",
              "ோ",
              "ௌ",
              "ௗ",
              "ఁ",
              "ం",
              "ః",
              "ు",
              "ూ",
              "ృ",
              "ౄ",
              "ಂ",
              "ಃ",
              "ಾ",
              "ೀ",
              "ು",
              "ೂ",
              "ೃ",
              "ೄ",
              "ೇ",
              "ೈ",
              "ೊ",
              "ೋ",
              "ೕ",
              "ೖ",
              "ം",
              "ഃ",
              "ാ",
              "ി",
              "ീ",
              "െ",
              "േ",
              "ൈ",
              "ൊ",
              "ോ",
              "ൌ",
              "ൗ",
              "ං",
              "ඃ",
              "ා",
              "ැ",
              "ෑ",
              "ෘ",
              "ෙ",
              "ේ",
              "ෛ",
              "ො",
              "ෝ",
              "ෞ",
              "ෟ",
              "ෲ",
              "ෳ",
              "༾",
              "༿",
              "ཿ",
              "ါ",
              "ာ",
              "ေ",
              "း",
              "ျ",
              "ြ",
              "ၖ",
              "ၗ",
              "ၢ",
              "ၣ",
              "ၤ",
              "ၧ",
              "ၨ",
              "ၩ",
              "ၪ",
              "ၫ",
              "ၬ",
              "ၭ",
              "ႃ",
              "ႄ",
              "ႇ",
              "ႈ",
              "ႉ",
              "ႊ",
              "ႋ",
              "ႌ",
              "ႏ",
              "ា",
              "ើ",
              "ឿ",
              "ៀ",
              "េ",
              "ែ",
              "ៃ",
              "ោ",
              "ៅ",
              "ះ",
              "ៈ",
              "ᤣ",
              "ᤤ",
              "ᤥ",
              "ᤦ",
              "ᤩ",
              "ᤪ",
              "ᤫ",
              "ᤰ",
              "ᤱ",
              "ᤳ",
              "ᤴ",
              "ᤵ",
              "ᤶ",
              "ᤷ",
              "ᤸ",
              "ᦰ",
              "ᦱ",
              "ᦲ",
              "ᦳ",
              "ᦴ",
              "ᦵ",
              "ᦶ",
              "ᦷ",
              "ᦸ",
              "ᦹ",
              "ᦺ",
              "ᦻ",
              "ᦼ",
              "ᦽ",
              "ᦾ",
              "ᦿ",
              "ᧀ",
              "ᧈ",
              "ᧉ",
              "ᨙ",
              "ᨚ",
              "ᨛ",
              "ᬄ",
              "ᬵ",
              "ᬻ",
              "ᬽ",
              "ᬾ",
              "ᬿ",
              "ᭀ",
              "ᭁ",
              "ᭃ",
              "᭄",
              "ᮂ",
              "ᮡ",
              "ᮦ",
              "ᮧ",
              "᮪",
              "ᰤ",
              "ᰥ",
              "ᰦ",
              "ᰧ",
              "ᰨ",
              "ᰩ",
              "ᰪ",
              "ᰫ",
              "ᰴ",
              "ᰵ",
              "ꠣ",
              "ꠤ",
              "ꠧ",
              "ꢀ",
              "ꢁ",
              "ꢴ",
              "ꢵ",
              "ꢶ",
              "ꢷ",
              "ꢸ",
              "ꢹ",
              "ꢺ",
              "ꢻ",
              "ꢼ",
              "ꢽ",
              "ꢾ",
              "ꢿ",
              "ꣀ",
              "ꣁ",
              "ꣂ",
              "ꣃ",
              "ꥒ",
              "꥓",
              "ꨯ",
              "ꨰ",
              "ꨳ",
              "ꨴ",
              "ꩍ"
            ]
          },
          {
            "type": "Class",
            "inverted": false,
            "ignoreCase": false,
            "characters": [
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "٠",
              "١",
              "٢",
              "٣",
              "٤",
              "٥",
              "٦",
              "٧",
              "٨",
              "٩",
              "۰",
              "۱",
              "۲",
              "۳",
              "۴",
              "۵",
              "۶",
              "۷",
              "۸",
              "۹",
              "߀",
              "߁",
              "߂",
              "߃",
              "߄",
              "߅",
              "߆",
              "߇",
              "߈",
              "߉",
              "०",
              "१",
              "२",
              "३",
              "४",
              "५",
              "६",
              "७",
              "८",
              "९",
              "০",
              "১",
              "২",
              "৩",
              "৪",
              "৫",
              "৬",
              "৭",
              "৮",
              "৯",
              "੦",
              "੧",
              "੨",
              "੩",
              "੪",
              "੫",
              "੬",
              "੭",
              "੮",
              "੯",
              "૦",
              "૧",
              "૨",
              "૩",
              "૪",
              "૫",
              "૬",
              "૭",
              "૮",
              "૯",
              "୦",
              "୧",
              "୨",
              "୩",
              "୪",
              "୫",
              "୬",
              "୭",
              "୮",
              "୯",
              "௦",
              "௧",
              "௨",
              "௩",
              "௪",
              "௫",
              "௬",
              "௭",
              "௮",
              "௯",
              "౦",
              "౧",
              "౨",
              "౩",
              "౪",
              "౫",
              "౬",
              "౭",
              "౮",
              "౯",
              "೦",
              "೧",
              "೨",
              "೩",
              "೪",
              "೫",
              "೬",
              "೭",
              "೮",
              "೯",
              "൦",
              "൧",
              "൨",
              "൩",
              "൪",
              "൫",
              "൬",
              "൭",
              "൮",
              "൯",
              "๐",
              "๑",
              "๒",
              "๓",
              "๔",
              "๕",
              "๖",
              "๗",
              "๘",
              "๙",
              "໐",
              "໑",
              "໒",
              "໓",
              "໔",
              "໕",
              "໖",
              "໗",
              "໘",
              "໙",
              "༠",
              "༡",
              "༢",
              "༣",
              "༤",
              "༥",
              "༦",
              "༧",
              "༨",
              "༩",
              "၀",
              "၁",
              "၂",
              "၃",
              "၄",
              "၅",
              "၆",
              "၇",
              "၈",
              "၉",
              "႐",
              "႑",
              "႒",
              "႓",
              "႔",
              "႕",
              "႖",
              "႗",
              "႘",
              "႙",
              "០",
              "១",
              "២",
              "៣",
              "៤",
              "៥",
              "៦",
              "៧",
              "៨",
              "៩",
              "᠐",
              "᠑",
              "᠒",
              "᠓",
              "᠔",
              "᠕",
              "᠖",
              "᠗",
              "᠘",
              "᠙",
              "᥆",
              "᥇",
              "᥈",
              "᥉",
              "᥊",
              "᥋",
              "᥌",
              "᥍",
              "᥎",
              "᥏",
              "᧐",
              "᧑",
              "᧒",
              "᧓",
              "᧔",
              "᧕",
              "᧖",
              "᧗",
              "᧘",
              "᧙",
              "᭐",
              "᭑",
              "᭒",
              "᭓",
              "᭔",
              "᭕",
              "᭖",
              "᭗",
              "᭘",
              "᭙",
              "᮰",
              "᮱",
              "᮲",
              "᮳",
              "᮴",
              "᮵",
              "᮶",
              "᮷",
              "᮸",
              "᮹",
              "᱀",
              "᱁",
              "᱂",
              "᱃",
              "᱄",
              "᱅",
              "᱆",
              "᱇",
              "᱈",
              "᱉",
              "᱐",
              "᱑",
              "᱒",
              "᱓",
              "᱔",
              "᱕",
              "᱖",
              "᱗",
              "᱘",
              "᱙",
              "꘠",
              "꘡",
              "꘢",
              "꘣",
              "꘤",
              "꘥",
              "꘦",
              "꘧",
              "꘨",
              "꘩",
              "꣐",
              "꣑",
              "꣒",
              "꣓",
              "꣔",
              "꣕",
              "꣖",
              "꣗",
              "꣘",
              "꣙",
              "꤀",
              "꤁",
              "꤂",
              "꤃",
              "꤄",
              "꤅",
              "꤆",
              "꤇",
              "꤈",
              "꤉",
              "꩐",
              "꩑",
              "꩒",
              "꩓",
              "꩔",
              "꩕",
              "꩖",
              "꩗",
              "꩘",
              "꩙",
              "０",
              "１",
              "２",
              "３",
              "４",
              "５",
              "６",
              "７",
              "８",
              "９"
            ],
            "rawText": "[\"0\"\"1\"\"2\"\"3\"\"4\"\"5\"\"6\"\"7\"\"8\"\"9\"\"\\u0660\"\"\\u0661\"\"\\u0662\"\"\\u0663\"\"\\u0664\"\"\\u0665\"\"\\u0666\"\"\\u0667\"\"\\u0668\"\"\\u0669\"\"\\u06F0\"\"\\u06F1\"\"\\u06F2\"\"\\u06F3\"\"\\u06F4\"\"\\u06F5\"\"\\u06F6\"\"\\u06F7\"\"\\u06F8\"\"\\u06F9\"\"\\u07C0\"\"\\u07C1\"\"\\u07C2\"\"\\u07C3\"\"\\u07C4\"\"\\u07C5\"\"\\u07C6\"\"\\u07C7\"\"\\u07C8\"\"\\u07C9\"\"\\u0966\"\"\\u0967\"\"\\u0968\"\"\\u0969\"\"\\u096A\"\"\\u096B\"\"\\u096C\"\"\\u096D\"\"\\u096E\"\"\\u096F\"\"\\u09E6\"\"\\u09E7\"\"\\u09E8\"\"\\u09E9\"\"\\u09EA\"\"\\u09EB\"\"\\u09EC\"\"\\u09ED\"\"\\u09EE\"\"\\u09EF\"\"\\u0A66\"\"\\u0A67\"\"\\u0A68\"\"\\u0A69\"\"\\u0A6A\"\"\\u0A6B\"\"\\u0A6C\"\"\\u0A6D\"\"\\u0A6E\"\"\\u0A6F\"\"\\u0AE6\"\"\\u0AE7\"\"\\u0AE8\"\"\\u0AE9\"\"\\u0AEA\"\"\\u0AEB\"\"\\u0AEC\"\"\\u0AED\"\"\\u0AEE\"\"\\u0AEF\"\"\\u0B66\"\"\\u0B67\"\"\\u0B68\"\"\\u0B69\"\"\\u0B6A\"\"\\u0B6B\"\"\\u0B6C\"\"\\u0B6D\"\"\\u0B6E\"\"\\u0B6F\"\"\\u0BE6\"\"\\u0BE7\"\"\\u0BE8\"\"\\u0BE9\"\"\\u0BEA\"\"\\u0BEB\"\"\\u0BEC\"\"\\u0BED\"\"\\u0BEE\"\"\\u0BEF\"\"\\u0C66\"\"\\u0C67\"\"\\u0C68\"\"\\u0C69\"\"\\u0C6A\"\"\\u0C6B\"\"\\u0C6C\"\"\\u0C6D\"\"\\u0C6E\"\"\\u0C6F\"\"\\u0CE6\"\"\\u0CE7\"\"\\u0CE8\"\"\\u0CE9\"\"\\u0CEA\"\"\\u0CEB\"\"\\u0CEC\"\"\\u0CED\"\"\\u0CEE\"\"\\u0CEF\"\"\\u0D66\"\"\\u0D67\"\"\\u0D68\"\"\\u0D69\"\"\\u0D6A\"\"\\u0D6B\"\"\\u0D6C\"\"\\u0D6D\"\"\\u0D6E\"\"\\u0D6F\"\"\\u0E50\"\"\\u0E51\"\"\\u0E52\"\"\\u0E53\"\"\\u0E54\"\"\\u0E55\"\"\\u0E56\"\"\\u0E57\"\"\\u0E58\"\"\\u0E59\"\"\\u0ED0\"\"\\u0ED1\"\"\\u0ED2\"\"\\u0ED3\"\"\\u0ED4\"\"\\u0ED5\"\"\\u0ED6\"\"\\u0ED7\"\"\\u0ED8\"\"\\u0ED9\"\"\\u0F20\"\"\\u0F21\"\"\\u0F22\"\"\\u0F23\"\"\\u0F24\"\"\\u0F25\"\"\\u0F26\"\"\\u0F27\"\"\\u0F28\"\"\\u0F29\"\"\\u1040\"\"\\u1041\"\"\\u1042\"\"\\u1043\"\"\\u1044\"\"\\u1045\"\"\\u1046\"\"\\u1047\"\"\\u1048\"\"\\u1049\"\"\\u1090\"\"\\u1091\"\"\\u1092\"\"\\u1093\"\"\\u1094\"\"\\u1095\"\"\\u1096\"\"\\u1097\"\"\\u1098\"\"\\u1099\"\"\\u17E0\"\"\\u17E1\"\"\\u17E2\"\"\\u17E3\"\"\\u17E4\"\"\\u17E5\"\"\\u17E6\"\"\\u17E7\"\"\\u17E8\"\"\\u17E9\"\"\\u1810\"\"\\u1811\"\"\\u1812\"\"\\u1813\"\"\\u1814\"\"\\u1815\"\"\\u1816\"\"\\u1817\"\"\\u1818\"\"\\u1819\"\"\\u1946\"\"\\u1947\"\"\\u1948\"\"\\u1949\"\"\\u194A\"\"\\u194B\"\"\\u194C\"\"\\u194D\"\"\\u194E\"\"\\u194F\"\"\\u19D0\"\"\\u19D1\"\"\\u19D2\"\"\\u19D3\"\"\\u19D4\"\"\\u19D5\"\"\\u19D6\"\"\\u19D7\"\"\\u19D8\"\"\\u19D9\"\"\\u1B50\"\"\\u1B51\"\"\\u1B52\"\"\\u1B53\"\"\\u1B54\"\"\\u1B55\"\"\\u1B56\"\"\\u1B57\"\"\\u1B58\"\"\\u1B59\"\"\\u1BB0\"\"\\u1BB1\"\"\\u1BB2\"\"\\u1BB3\"\"\\u1BB4\"\"\\u1BB5\"\"\\u1BB6\"\"\\u1BB7\"\"\\u1BB8\"\"\\u1BB9\"\"\\u1C40\"\"\\u1C41\"\"\\u1C42\"\"\\u1C43\"\"\\u1C44\"\"\\u1C45\"\"\\u1C46\"\"\\u1C47\"\"\\u1C48\"\"\\u1C49\"\"\\u1C50\"\"\\u1C51\"\"\\u1C52\"\"\\u1C53\"\"\\u1C54\"\"\\u1C55\"\"\\u1C56\"\"\\u1C57\"\"\\u1C58\"\"\\u1C59\"\"\\uA620\"\"\\uA621\"\"\\uA622\"\"\\uA623\"\"\\uA624\"\"\\uA625\"\"\\uA626\"\"\\uA627\"\"\\uA628\"\"\\uA629\"\"\\uA8D0\"\"\\uA8D1\"\"\\uA8D2\"\"\\uA8D3\"\"\\uA8D4\"\"\\uA8D5\"\"\\uA8D6\"\"\\uA8D7\"\"\\uA8D8\"\"\\uA8D9\"\"\\uA900\"\"\\uA901\"\"\\uA902\"\"\\uA903\"\"\\uA904\"\"\\uA905\"\"\\uA906\"\"\\uA907\"\"\\uA908\"\"\\uA909\"\"\\uAA50\"\"\\uAA51\"\"\\uAA52\"\"\\uAA53\"\"\\uAA54\"\"\\uAA55\"\"\\uAA56\"\"\\uAA57\"\"\\uAA58\"\"\\uAA59\"\"\\uFF10\"\"\\uFF11\"\"\\uFF12\"\"\\uFF13\"\"\\uFF14\"\"\\uFF15\"\"\\uFF16\"\"\\uFF17\"\"\\uFF18\"\"\\uFF19\"]"
          },
          {
            "type": "Class",
            "inverted": false,
            "ignoreCase": false,
            "characters": [
              "_",
              "‿",
              "⁀",
              "⁔",
              "︳",
              "︴",
              "﹍",
              "﹎",
              "﹏",
              "＿"
            ],
            "rawText": "[\"_\"\"\\u203F\"\"\\u2040\"\"\\u2054\"\"\\uFE33\"\"\\uFE34\"\"\\uFE4D\"\"\\uFE4E\"\"\\uFE4F\"\"\\uFF3F\"]"
          },
          {
            "type": "action",
            "expression": {
              "type": "Literal",
              "Literal": "‌",
              "ignoreCase": false
            },
            "code": " return \"\\u200C\"; "
          },
          {
            "type": "action",
            "expression": {
              "type": "Literal",
              "Literal": "‍",
              "ignoreCase": false
            },
            "code": " return \"\\u200D\"; "
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "ReservedWord",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "rule_ref",
            "identifier": "Keyword"
          },
          {
            "type": "rule_ref",
            "identifier": "FutureReservedWord"
          },
          {
            "type": "rule_ref",
            "identifier": "NullLiteral"
          },
          {
            "type": "rule_ref",
            "identifier": "BooleanLiteral"
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "Keyword",
      "description": {
        "type": "Sequence",
        "expressions": [
          {
            "type": "Choice",
            "expressions": [
              {
                "type": "Literal",
                "Literal": "break",
                "ignoreCase": false
              },
              {
                "type": "Literal",
                "Literal": "case",
                "ignoreCase": false
              },
              {
                "type": "Literal",
                "Literal": "catch",
                "ignoreCase": false
              },
              {
                "type": "Literal",
                "Literal": "continue",
                "ignoreCase": false
              },
              {
                "type": "Literal",
                "Literal": "debugger",
                "ignoreCase": false
              },
              {
                "type": "Literal",
                "Literal": "default",
                "ignoreCase": false
              },
              {
                "type": "Literal",
                "Literal": "delete",
                "ignoreCase": false
              },
              {
                "type": "Literal",
                "Literal": "do",
                "ignoreCase": false
              },
              {
                "type": "Literal",
                "Literal": "else",
                "ignoreCase": false
              },
              {
                "type": "Literal",
                "Literal": "finally",
                "ignoreCase": false
              },
              {
                "type": "Literal",
                "Literal": "for",
                "ignoreCase": false
              },
              {
                "type": "Literal",
                "Literal": "function",
                "ignoreCase": false
              },
              {
                "type": "Literal",
                "Literal": "if",
                "ignoreCase": false
              },
              {
                "type": "Literal",
                "Literal": "instanceof",
                "ignoreCase": false
              },
              {
                "type": "Literal",
                "Literal": "in",
                "ignoreCase": false
              },
              {
                "type": "Literal",
                "Literal": "new",
                "ignoreCase": false
              },
              {
                "type": "Literal",
                "Literal": "return",
                "ignoreCase": false
              },
              {
                "type": "Literal",
                "Literal": "switch",
                "ignoreCase": false
              },
              {
                "type": "Literal",
                "Literal": "this",
                "ignoreCase": false
              },
              {
                "type": "Literal",
                "Literal": "throw",
                "ignoreCase": false
              },
              {
                "type": "Literal",
                "Literal": "try",
                "ignoreCase": false
              },
              {
                "type": "Literal",
                "Literal": "typeof",
                "ignoreCase": false
              },
              {
                "type": "Literal",
                "Literal": "var",
                "ignoreCase": false
              },
              {
                "type": "Literal",
                "Literal": "void",
                "ignoreCase": false
              },
              {
                "type": "Literal",
                "Literal": "while",
                "ignoreCase": false
              },
              {
                "type": "Literal",
                "Literal": "with",
                "ignoreCase": false
              }
            ]
          },
          {
            "type": "SimpleNot",
            "expression": {
              "type": "rule_ref",
              "identifier": "IdentifierPart"
            }
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "FutureReservedWord",
      "description": {
        "type": "Sequence",
        "expressions": [
          {
            "type": "Choice",
            "expressions": [
              {
                "type": "Literal",
                "Literal": "class",
                "ignoreCase": false
              },
              {
                "type": "Literal",
                "Literal": "const",
                "ignoreCase": false
              },
              {
                "type": "Literal",
                "Literal": "enum",
                "ignoreCase": false
              },
              {
                "type": "Literal",
                "Literal": "export",
                "ignoreCase": false
              },
              {
                "type": "Literal",
                "Literal": "extends",
                "ignoreCase": false
              },
              {
                "type": "Literal",
                "Literal": "import",
                "ignoreCase": false
              },
              {
                "type": "Literal",
                "Literal": "super",
                "ignoreCase": false
              }
            ]
          },
          {
            "type": "SimpleNot",
            "expression": {
              "type": "rule_ref",
              "identifier": "IdentifierPart"
            }
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "Literal",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "rule_ref",
            "identifier": "NullLiteral"
          },
          {
            "type": "rule_ref",
            "identifier": "BooleanLiteral"
          },
          {
            "type": "action",
            "expression": {
              "type": "labeled",
              "label": "value",
              "expression": {
                "type": "rule_ref",
                "identifier": "NumericLiteral"
              }
            },
            "code": "\n      return {\n        type:  \"NumericLiteral\",\n        value: value\n      };\n    "
          },
          {
            "type": "action",
            "expression": {
              "type": "labeled",
              "label": "value",
              "expression": {
                "type": "rule_ref",
                "identifier": "StringLiteral"
              }
            },
            "code": "\n      return {\n        type:  \"StringLiteral\",\n        value: value\n      };\n    "
          },
          {
            "type": "rule_ref",
            "identifier": "RegularExpressionLiteral"
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "NullLiteral",
      "description": {
        "type": "action",
        "expression": {
          "type": "rule_ref",
          "identifier": "NullToken"
        },
        "code": " return { type: \"NullLiteral\" }; "
      }
    },
    {
      "type": "rule",
      "identifier": "BooleanLiteral",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "action",
            "expression": {
              "type": "rule_ref",
              "identifier": "TrueToken"
            },
            "code": " return { type: \"BooleanLiteral\", value: true  }; "
          },
          {
            "type": "action",
            "expression": {
              "type": "rule_ref",
              "identifier": "FalseToken"
            },
            "code": " return { type: \"BooleanLiteral\", value: false }; "
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "NumericLiteral",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "literal",
              "expression": {
                "type": "Choice",
                "expressions": [
                  {
                    "type": "rule_ref",
                    "identifier": "HexIntegerLiteral"
                  },
                  {
                    "type": "rule_ref",
                    "identifier": "DecimalLiteral"
                  }
                ]
              }
            },
            {
              "type": "SimpleNot",
              "expression": {
                "type": "rule_ref",
                "identifier": "IdentifierStart"
              }
            }
          ]
        },
        "code": "\n      return literal;\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "DecimalLiteral",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "action",
            "expression": {
              "type": "Sequence",
              "expressions": [
                {
                  "type": "labeled",
                  "label": "before",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "DecimalIntegerLiteral"
                  }
                },
                {
                  "type": "Literal",
                  "Literal": ".",
                  "ignoreCase": false
                },
                {
                  "type": "labeled",
                  "label": "after",
                  "expression": {
                    "type": "Question",
                    "expression": {
                      "type": "rule_ref",
                      "identifier": "DecimalDigits"
                    }
                  }
                },
                {
                  "type": "labeled",
                  "label": "exponent",
                  "expression": {
                    "type": "Question",
                    "expression": {
                      "type": "rule_ref",
                      "identifier": "ExponentPart"
                    }
                  }
                }
              ]
            },
            "code": "\n      return parseFloat(before + \".\" + after + exponent);\n    "
          },
          {
            "type": "action",
            "expression": {
              "type": "Sequence",
              "expressions": [
                {
                  "type": "Literal",
                  "Literal": ".",
                  "ignoreCase": false
                },
                {
                  "type": "labeled",
                  "label": "after",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "DecimalDigits"
                  }
                },
                {
                  "type": "labeled",
                  "label": "exponent",
                  "expression": {
                    "type": "Question",
                    "expression": {
                      "type": "rule_ref",
                      "identifier": "ExponentPart"
                    }
                  }
                }
              ]
            },
            "code": "\n      return parseFloat(\".\" + after + exponent);\n    "
          },
          {
            "type": "action",
            "expression": {
              "type": "Sequence",
              "expressions": [
                {
                  "type": "labeled",
                  "label": "before",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "DecimalIntegerLiteral"
                  }
                },
                {
                  "type": "labeled",
                  "label": "exponent",
                  "expression": {
                    "type": "Question",
                    "expression": {
                      "type": "rule_ref",
                      "identifier": "ExponentPart"
                    }
                  }
                }
              ]
            },
            "code": "\n      return parseFloat(before + exponent);\n    "
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "DecimalIntegerLiteral",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "Literal",
            "Literal": "0",
            "ignoreCase": false
          },
          {
            "type": "action",
            "expression": {
              "type": "Sequence",
              "expressions": [
                {
                  "type": "labeled",
                  "label": "digit",
                  "expression": {
                    "type": "Class",
                    "inverted": false,
                    "ignoreCase": false,
                    "characters": [
                      [
                        "1",
                        "9"
                      ]
                    ],
                    "rawText": "[\"1\"-\"9\"]"
                  }
                },
                {
                  "type": "labeled",
                  "label": "digits",
                  "expression": {
                    "type": "Question",
                    "expression": {
                      "type": "rule_ref",
                      "identifier": "DecimalDigits"
                    }
                  }
                }
              ]
            },
            "code": " return digit + digits; "
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "DecimalDigits",
      "description": {
        "type": "action",
        "expression": {
          "type": "labeled",
          "label": "digits",
          "expression": {
            "type": "OneOrMore",
            "expression": {
              "type": "Class",
              "inverted": false,
              "ignoreCase": false,
              "characters": [
                [
                  "0",
                  "9"
                ]
              ],
              "rawText": "[\"0\"-\"9\"]"
            }
          }
        },
        "code": " return digits.join(\"\"); "
      }
    },
    {
      "type": "rule",
      "identifier": "ExponentPart",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "indicator",
              "expression": {
                "type": "Class",
                "inverted": false,
                "ignoreCase": false,
                "characters": [
                  "e",
                  "E"
                ],
                "rawText": "[\"e\"\"E\"]"
              }
            },
            {
              "type": "labeled",
              "label": "integer",
              "expression": {
                "type": "rule_ref",
                "identifier": "SignedInteger"
              }
            }
          ]
        },
        "code": "\n      return indicator + integer;\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "SignedInteger",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "sign",
              "expression": {
                "type": "Question",
                "expression": {
                  "type": "Class",
                  "inverted": false,
                  "ignoreCase": false,
                  "characters": [
                    "-",
                    "+"
                  ],
                  "rawText": "[\"-\"\"+\"]"
                }
              }
            },
            {
              "type": "labeled",
              "label": "digits",
              "expression": {
                "type": "rule_ref",
                "identifier": "DecimalDigits"
              }
            }
          ]
        },
        "code": " return sign + digits; "
      }
    },
    {
      "type": "rule",
      "identifier": "HexIntegerLiteral",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "Literal",
              "Literal": "0",
              "ignoreCase": false
            },
            {
              "type": "Class",
              "inverted": false,
              "ignoreCase": false,
              "characters": [
                "x",
                "X"
              ],
              "rawText": "[\"x\"\"X\"]"
            },
            {
              "type": "labeled",
              "label": "digits",
              "expression": {
                "type": "OneOrMore",
                "expression": {
                  "type": "Class",
                  "inverted": false,
                  "ignoreCase": false,
                  "characters": [
                    [
                      "0",
                      "9"
                    ],
                    [
                      "a",
                      "f"
                    ],
                    [
                      "A",
                      "F"
                    ]
                  ],
                  "rawText": "[\"0\"-\"9\"\"a\"-\"f\"\"A\"-\"F\"]"
                }
              }
            }
          ]
        },
        "code": " return parseInt(\"0x\" + digits.join(\"\")); "
      }
    },
    {
      "type": "rule",
      "identifier": "StringLiteral",
      "description": {
        "type": "action",
        "expression": {
          "type": "labeled",
          "label": "parts",
          "expression": {
            "type": "Choice",
            "expressions": [
              {
                "type": "Sequence",
                "expressions": [
                  {
                    "type": "Literal",
                    "Literal": "\"",
                    "ignoreCase": false
                  },
                  {
                    "type": "Question",
                    "expression": {
                      "type": "rule_ref",
                      "identifier": "DoubleStringCharacters"
                    }
                  },
                  {
                    "type": "Literal",
                    "Literal": "\"",
                    "ignoreCase": false
                  }
                ]
              },
              {
                "type": "Sequence",
                "expressions": [
                  {
                    "type": "Literal",
                    "Literal": "'",
                    "ignoreCase": false
                  },
                  {
                    "type": "Question",
                    "expression": {
                      "type": "rule_ref",
                      "identifier": "SingleStringCharacters"
                    }
                  },
                  {
                    "type": "Literal",
                    "Literal": "'",
                    "ignoreCase": false
                  }
                ]
              }
            ]
          }
        },
        "code": "\n      return parts[1];\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "DoubleStringCharacters",
      "description": {
        "type": "action",
        "expression": {
          "type": "labeled",
          "label": "chars",
          "expression": {
            "type": "OneOrMore",
            "expression": {
              "type": "rule_ref",
              "identifier": "DoubleStringCharacter"
            }
          }
        },
        "code": " return chars.join(\"\"); "
      }
    },
    {
      "type": "rule",
      "identifier": "SingleStringCharacters",
      "description": {
        "type": "action",
        "expression": {
          "type": "labeled",
          "label": "chars",
          "expression": {
            "type": "OneOrMore",
            "expression": {
              "type": "rule_ref",
              "identifier": "SingleStringCharacter"
            }
          }
        },
        "code": " return chars.join(\"\"); "
      }
    },
    {
      "type": "rule",
      "identifier": "DoubleStringCharacter",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "action",
            "expression": {
              "type": "Sequence",
              "expressions": [
                {
                  "type": "SimpleNot",
                  "expression": {
                    "type": "Choice",
                    "expressions": [
                      {
                        "type": "Literal",
                        "Literal": "\"",
                        "ignoreCase": false
                      },
                      {
                        "type": "Literal",
                        "Literal": "\\",
                        "ignoreCase": false
                      },
                      {
                        "type": "Class",
                        "inverted": false,
                        "ignoreCase": false,
                        "characters": [
                          "\n",
                          "\r",
                          " ",
                          " "
                        ],
                        "rawText": "[\"\\n\"\"\\r\"\"\\u2028\"\"\\u2029\"]"
                      }
                    ]
                  }
                },
                {
                  "type": "labeled",
                  "label": "char_",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "SourceCharacter"
                  }
                }
              ]
            },
            "code": " return char_;     "
          },
          {
            "type": "action",
            "expression": {
              "type": "Sequence",
              "expressions": [
                {
                  "type": "Literal",
                  "Literal": "\\",
                  "ignoreCase": false
                },
                {
                  "type": "labeled",
                  "label": "sequence",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "EscapeSequence"
                  }
                }
              ]
            },
            "code": " return sequence;  "
          },
          {
            "type": "rule_ref",
            "identifier": "LineContinuation"
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "SingleStringCharacter",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "action",
            "expression": {
              "type": "Sequence",
              "expressions": [
                {
                  "type": "SimpleNot",
                  "expression": {
                    "type": "Choice",
                    "expressions": [
                      {
                        "type": "Literal",
                        "Literal": "'",
                        "ignoreCase": false
                      },
                      {
                        "type": "Literal",
                        "Literal": "\\",
                        "ignoreCase": false
                      },
                      {
                        "type": "Class",
                        "inverted": false,
                        "ignoreCase": false,
                        "characters": [
                          "\n",
                          "\r",
                          " ",
                          " "
                        ],
                        "rawText": "[\"\\n\"\"\\r\"\"\\u2028\"\"\\u2029\"]"
                      }
                    ]
                  }
                },
                {
                  "type": "labeled",
                  "label": "char_",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "SourceCharacter"
                  }
                }
              ]
            },
            "code": " return char_;     "
          },
          {
            "type": "action",
            "expression": {
              "type": "Sequence",
              "expressions": [
                {
                  "type": "Literal",
                  "Literal": "\\",
                  "ignoreCase": false
                },
                {
                  "type": "labeled",
                  "label": "sequence",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "EscapeSequence"
                  }
                }
              ]
            },
            "code": " return sequence;  "
          },
          {
            "type": "rule_ref",
            "identifier": "LineContinuation"
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "LineContinuation",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "Literal",
              "Literal": "\\",
              "ignoreCase": false
            },
            {
              "type": "labeled",
              "label": "sequence",
              "expression": {
                "type": "rule_ref",
                "identifier": "LineTerminatorSequence"
              }
            }
          ]
        },
        "code": " return sequence; "
      }
    },
    {
      "type": "rule",
      "identifier": "EscapeSequence",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "rule_ref",
            "identifier": "CharacterEscapeSequence"
          },
          {
            "type": "action",
            "expression": {
              "type": "Sequence",
              "expressions": [
                {
                  "type": "Literal",
                  "Literal": "0",
                  "ignoreCase": false
                },
                {
                  "type": "SimpleNot",
                  "expression": {
                    "type": "Class",
                    "inverted": false,
                    "ignoreCase": false,
                    "characters": [
                      [
                        "0",
                        "9"
                      ]
                    ],
                    "rawText": "[\"0\"-\"9\"]"
                  }
                }
              ]
            },
            "code": " return \"\\0\"; "
          },
          {
            "type": "rule_ref",
            "identifier": "HexEscapeSequence"
          },
          {
            "type": "rule_ref",
            "identifier": "UnicodeEscapeSequence"
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "CharacterEscapeSequence",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "rule_ref",
            "identifier": "SingleEscapeCharacter"
          },
          {
            "type": "rule_ref",
            "identifier": "NonEscapeCharacter"
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "SingleEscapeCharacter",
      "description": {
        "type": "action",
        "expression": {
          "type": "labeled",
          "label": "char_",
          "expression": {
            "type": "Class",
            "inverted": false,
            "ignoreCase": false,
            "characters": [
              "'",
              "\"",
              "\\",
              "b",
              "f",
              "n",
              "r",
              "t",
              "v"
            ],
            "rawText": "[\"'\"\"\\\"\"\"\\\\\"\"b\"\"f\"\"n\"\"r\"\"t\"\"v\"]"
          }
        },
        "code": "\n      return char_\n        .replace(\"b\", \"\\b\")\n        .replace(\"f\", \"\\f\")\n        .replace(\"n\", \"\\n\")\n        .replace(\"r\", \"\\r\")\n        .replace(\"t\", \"\\t\")\n        .replace(\"v\", \"\\x0B\") // IE does not recognize \"\\v\".\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "NonEscapeCharacter",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "Choice",
              "expressions": [
                {
                  "type": "SimpleNot",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "EscapeCharacter"
                  }
                },
                {
                  "type": "Class",
                  "inverted": false,
                  "ignoreCase": false,
                  "characters": [
                    "\n",
                    "\r",
                    " ",
                    " "
                  ],
                  "rawText": "[\"\\n\"\"\\r\"\"\\u2028\"\"\\u2029\"]"
                }
              ]
            },
            {
              "type": "labeled",
              "label": "char_",
              "expression": {
                "type": "rule_ref",
                "identifier": "SourceCharacter"
              }
            }
          ]
        },
        "code": " return char_; "
      }
    },
    {
      "type": "rule",
      "identifier": "EscapeCharacter",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "rule_ref",
            "identifier": "SingleEscapeCharacter"
          },
          {
            "type": "Class",
            "inverted": false,
            "ignoreCase": false,
            "characters": [
              [
                "0",
                "9"
              ]
            ],
            "rawText": "[\"0\"-\"9\"]"
          },
          {
            "type": "Literal",
            "Literal": "x",
            "ignoreCase": false
          },
          {
            "type": "Literal",
            "Literal": "u",
            "ignoreCase": false
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "HexEscapeSequence",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "Literal",
              "Literal": "x",
              "ignoreCase": false
            },
            {
              "type": "labeled",
              "label": "h1",
              "expression": {
                "type": "Class",
                "inverted": false,
                "ignoreCase": false,
                "characters": [
                  [
                    "0",
                    "9"
                  ],
                  [
                    "a",
                    "f"
                  ],
                  [
                    "A",
                    "F"
                  ]
                ],
                "rawText": "[\"0\"-\"9\"\"a\"-\"f\"\"A\"-\"F\"]"
              }
            },
            {
              "type": "labeled",
              "label": "h2",
              "expression": {
                "type": "Class",
                "inverted": false,
                "ignoreCase": false,
                "characters": [
                  [
                    "0",
                    "9"
                  ],
                  [
                    "a",
                    "f"
                  ],
                  [
                    "A",
                    "F"
                  ]
                ],
                "rawText": "[\"0\"-\"9\"\"a\"-\"f\"\"A\"-\"F\"]"
              }
            }
          ]
        },
        "code": "\n      return String.fromCharCode(parseInt(\"0x\" + h1 + h2));\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "UnicodeEscapeSequence",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "Literal",
              "Literal": "u",
              "ignoreCase": false
            },
            {
              "type": "labeled",
              "label": "h1",
              "expression": {
                "type": "Class",
                "inverted": false,
                "ignoreCase": false,
                "characters": [
                  [
                    "0",
                    "9"
                  ],
                  [
                    "a",
                    "f"
                  ],
                  [
                    "A",
                    "F"
                  ]
                ],
                "rawText": "[\"0\"-\"9\"\"a\"-\"f\"\"A\"-\"F\"]"
              }
            },
            {
              "type": "labeled",
              "label": "h2",
              "expression": {
                "type": "Class",
                "inverted": false,
                "ignoreCase": false,
                "characters": [
                  [
                    "0",
                    "9"
                  ],
                  [
                    "a",
                    "f"
                  ],
                  [
                    "A",
                    "F"
                  ]
                ],
                "rawText": "[\"0\"-\"9\"\"a\"-\"f\"\"A\"-\"F\"]"
              }
            },
            {
              "type": "labeled",
              "label": "h3",
              "expression": {
                "type": "Class",
                "inverted": false,
                "ignoreCase": false,
                "characters": [
                  [
                    "0",
                    "9"
                  ],
                  [
                    "a",
                    "f"
                  ],
                  [
                    "A",
                    "F"
                  ]
                ],
                "rawText": "[\"0\"-\"9\"\"a\"-\"f\"\"A\"-\"F\"]"
              }
            },
            {
              "type": "labeled",
              "label": "h4",
              "expression": {
                "type": "Class",
                "inverted": false,
                "ignoreCase": false,
                "characters": [
                  [
                    "0",
                    "9"
                  ],
                  [
                    "a",
                    "f"
                  ],
                  [
                    "A",
                    "F"
                  ]
                ],
                "rawText": "[\"0\"-\"9\"\"a\"-\"f\"\"A\"-\"F\"]"
              }
            }
          ]
        },
        "code": "\n      return String.fromCharCode(parseInt(\"0x\" + h1 + h2 + h3 + h4));\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "RegularExpressionLiteral",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "Literal",
              "Literal": "/",
              "ignoreCase": false
            },
            {
              "type": "labeled",
              "label": "body",
              "expression": {
                "type": "rule_ref",
                "identifier": "RegularExpressionBody"
              }
            },
            {
              "type": "Literal",
              "Literal": "/",
              "ignoreCase": false
            },
            {
              "type": "labeled",
              "label": "flags",
              "expression": {
                "type": "rule_ref",
                "identifier": "RegularExpressionFlags"
              }
            }
          ]
        },
        "code": "\n      return {\n        type:  \"RegularExpressionLiteral\",\n        body:  body,\n        flags: flags\n      };\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "RegularExpressionBody",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "char_",
              "expression": {
                "type": "rule_ref",
                "identifier": "RegularExpressionFirstChar"
              }
            },
            {
              "type": "labeled",
              "label": "chars",
              "expression": {
                "type": "rule_ref",
                "identifier": "RegularExpressionChars"
              }
            }
          ]
        },
        "code": "\n      return char_ + chars;\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "RegularExpressionChars",
      "description": {
        "type": "action",
        "expression": {
          "type": "labeled",
          "label": "chars",
          "expression": {
            "type": "ZeroOrMore",
            "expression": {
              "type": "rule_ref",
              "identifier": "RegularExpressionChar"
            }
          }
        },
        "code": " return chars.join(\"\"); "
      }
    },
    {
      "type": "rule",
      "identifier": "RegularExpressionFirstChar",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "action",
            "expression": {
              "type": "Sequence",
              "expressions": [
                {
                  "type": "SimpleNot",
                  "expression": {
                    "type": "Class",
                    "inverted": false,
                    "ignoreCase": false,
                    "characters": [
                      "*",
                      "\\",
                      "/",
                      "["
                    ],
                    "rawText": "[\"*\"\"\\\\\"\"/\"\"[\"]"
                  }
                },
                {
                  "type": "labeled",
                  "label": "char_",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "RegularExpressionNonTerminator"
                  }
                }
              ]
            },
            "code": " return char_; "
          },
          {
            "type": "rule_ref",
            "identifier": "RegularExpressionBackslashSequence"
          },
          {
            "type": "rule_ref",
            "identifier": "RegularExpressionClass"
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "RegularExpressionChar",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "action",
            "expression": {
              "type": "Sequence",
              "expressions": [
                {
                  "type": "SimpleNot",
                  "expression": {
                    "type": "Class",
                    "inverted": false,
                    "ignoreCase": false,
                    "characters": [
                      "\\",
                      "/",
                      "["
                    ],
                    "rawText": "[\"\\\\\"\"/\"\"[\"]"
                  }
                },
                {
                  "type": "labeled",
                  "label": "char_",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "RegularExpressionNonTerminator"
                  }
                }
              ]
            },
            "code": " return char_; "
          },
          {
            "type": "rule_ref",
            "identifier": "RegularExpressionBackslashSequence"
          },
          {
            "type": "rule_ref",
            "identifier": "RegularExpressionClass"
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "RegularExpressionBackslashSequence",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "Literal",
              "Literal": "\\",
              "ignoreCase": false
            },
            {
              "type": "labeled",
              "label": "char_",
              "expression": {
                "type": "rule_ref",
                "identifier": "RegularExpressionNonTerminator"
              }
            }
          ]
        },
        "code": " return \"\\\\\" + char_; "
      }
    },
    {
      "type": "rule",
      "identifier": "RegularExpressionNonTerminator",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "SimpleNot",
              "expression": {
                "type": "Class",
                "inverted": false,
                "ignoreCase": false,
                "characters": [
                  "\n",
                  "\r",
                  " ",
                  " "
                ],
                "rawText": "[\"\\n\"\"\\r\"\"\\u2028\"\"\\u2029\"]"
              }
            },
            {
              "type": "labeled",
              "label": "char_",
              "expression": {
                "type": "rule_ref",
                "identifier": "SourceCharacter"
              }
            }
          ]
        },
        "code": " return char_; "
      }
    },
    {
      "type": "rule",
      "identifier": "RegularExpressionClass",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "Literal",
              "Literal": "[",
              "ignoreCase": false
            },
            {
              "type": "labeled",
              "label": "chars",
              "expression": {
                "type": "rule_ref",
                "identifier": "RegularExpressionClassChars"
              }
            },
            {
              "type": "Literal",
              "Literal": "]",
              "ignoreCase": false
            }
          ]
        },
        "code": " return \"[\" + chars + \"]\"; "
      }
    },
    {
      "type": "rule",
      "identifier": "RegularExpressionClassChars",
      "description": {
        "type": "action",
        "expression": {
          "type": "labeled",
          "label": "chars",
          "expression": {
            "type": "ZeroOrMore",
            "expression": {
              "type": "rule_ref",
              "identifier": "RegularExpressionClassChar"
            }
          }
        },
        "code": " return chars.join(\"\"); "
      }
    },
    {
      "type": "rule",
      "identifier": "RegularExpressionClassChar",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "action",
            "expression": {
              "type": "Sequence",
              "expressions": [
                {
                  "type": "SimpleNot",
                  "expression": {
                    "type": "Class",
                    "inverted": false,
                    "ignoreCase": false,
                    "characters": [
                      "]",
                      "\\"
                    ],
                    "rawText": "[\"]\"\"\\\\\"]"
                  }
                },
                {
                  "type": "labeled",
                  "label": "char_",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "RegularExpressionNonTerminator"
                  }
                }
              ]
            },
            "code": " return char_; "
          },
          {
            "type": "rule_ref",
            "identifier": "RegularExpressionBackslashSequence"
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "RegularExpressionFlags",
      "description": {
        "type": "action",
        "expression": {
          "type": "labeled",
          "label": "parts",
          "expression": {
            "type": "ZeroOrMore",
            "expression": {
              "type": "rule_ref",
              "identifier": "IdentifierPart"
            }
          }
        },
        "code": " return parts.join(\"\"); "
      }
    },
    {
      "type": "rule",
      "identifier": "BreakToken",
      "description": {
        "type": "Sequence",
        "expressions": [
          {
            "type": "Literal",
            "Literal": "break",
            "ignoreCase": false
          },
          {
            "type": "SimpleNot",
            "expression": {
              "type": "rule_ref",
              "identifier": "IdentifierPart"
            }
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "CaseToken",
      "description": {
        "type": "Sequence",
        "expressions": [
          {
            "type": "Literal",
            "Literal": "case",
            "ignoreCase": false
          },
          {
            "type": "SimpleNot",
            "expression": {
              "type": "rule_ref",
              "identifier": "IdentifierPart"
            }
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "CatchToken",
      "description": {
        "type": "Sequence",
        "expressions": [
          {
            "type": "Literal",
            "Literal": "catch",
            "ignoreCase": false
          },
          {
            "type": "SimpleNot",
            "expression": {
              "type": "rule_ref",
              "identifier": "IdentifierPart"
            }
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "ContinueToken",
      "description": {
        "type": "Sequence",
        "expressions": [
          {
            "type": "Literal",
            "Literal": "continue",
            "ignoreCase": false
          },
          {
            "type": "SimpleNot",
            "expression": {
              "type": "rule_ref",
              "identifier": "IdentifierPart"
            }
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "DebuggerToken",
      "description": {
        "type": "Sequence",
        "expressions": [
          {
            "type": "Literal",
            "Literal": "debugger",
            "ignoreCase": false
          },
          {
            "type": "SimpleNot",
            "expression": {
              "type": "rule_ref",
              "identifier": "IdentifierPart"
            }
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "DefaultToken",
      "description": {
        "type": "Sequence",
        "expressions": [
          {
            "type": "Literal",
            "Literal": "default",
            "ignoreCase": false
          },
          {
            "type": "SimpleNot",
            "expression": {
              "type": "rule_ref",
              "identifier": "IdentifierPart"
            }
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "DeleteToken",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "Literal",
              "Literal": "delete",
              "ignoreCase": false
            },
            {
              "type": "SimpleNot",
              "expression": {
                "type": "rule_ref",
                "identifier": "IdentifierPart"
              }
            }
          ]
        },
        "code": " return \"delete\"; "
      }
    },
    {
      "type": "rule",
      "identifier": "DoToken",
      "description": {
        "type": "Sequence",
        "expressions": [
          {
            "type": "Literal",
            "Literal": "do",
            "ignoreCase": false
          },
          {
            "type": "SimpleNot",
            "expression": {
              "type": "rule_ref",
              "identifier": "IdentifierPart"
            }
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "ElseToken",
      "description": {
        "type": "Sequence",
        "expressions": [
          {
            "type": "Literal",
            "Literal": "else",
            "ignoreCase": false
          },
          {
            "type": "SimpleNot",
            "expression": {
              "type": "rule_ref",
              "identifier": "IdentifierPart"
            }
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "FalseToken",
      "description": {
        "type": "Sequence",
        "expressions": [
          {
            "type": "Literal",
            "Literal": "false",
            "ignoreCase": false
          },
          {
            "type": "SimpleNot",
            "expression": {
              "type": "rule_ref",
              "identifier": "IdentifierPart"
            }
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "FinallyToken",
      "description": {
        "type": "Sequence",
        "expressions": [
          {
            "type": "Literal",
            "Literal": "finally",
            "ignoreCase": false
          },
          {
            "type": "SimpleNot",
            "expression": {
              "type": "rule_ref",
              "identifier": "IdentifierPart"
            }
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "ForToken",
      "description": {
        "type": "Sequence",
        "expressions": [
          {
            "type": "Literal",
            "Literal": "for",
            "ignoreCase": false
          },
          {
            "type": "SimpleNot",
            "expression": {
              "type": "rule_ref",
              "identifier": "IdentifierPart"
            }
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "FunctionToken",
      "description": {
        "type": "Sequence",
        "expressions": [
          {
            "type": "Literal",
            "Literal": "function",
            "ignoreCase": false
          },
          {
            "type": "SimpleNot",
            "expression": {
              "type": "rule_ref",
              "identifier": "IdentifierPart"
            }
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "GetToken",
      "description": {
        "type": "Sequence",
        "expressions": [
          {
            "type": "Literal",
            "Literal": "get",
            "ignoreCase": false
          },
          {
            "type": "SimpleNot",
            "expression": {
              "type": "rule_ref",
              "identifier": "IdentifierPart"
            }
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "IfToken",
      "description": {
        "type": "Sequence",
        "expressions": [
          {
            "type": "Literal",
            "Literal": "if",
            "ignoreCase": false
          },
          {
            "type": "SimpleNot",
            "expression": {
              "type": "rule_ref",
              "identifier": "IdentifierPart"
            }
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "InstanceofToken",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "Literal",
              "Literal": "instanceof",
              "ignoreCase": false
            },
            {
              "type": "SimpleNot",
              "expression": {
                "type": "rule_ref",
                "identifier": "IdentifierPart"
              }
            }
          ]
        },
        "code": " return \"instanceof\"; "
      }
    },
    {
      "type": "rule",
      "identifier": "InToken",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "Literal",
              "Literal": "in",
              "ignoreCase": false
            },
            {
              "type": "SimpleNot",
              "expression": {
                "type": "rule_ref",
                "identifier": "IdentifierPart"
              }
            }
          ]
        },
        "code": " return \"in\"; "
      }
    },
    {
      "type": "rule",
      "identifier": "NewToken",
      "description": {
        "type": "Sequence",
        "expressions": [
          {
            "type": "Literal",
            "Literal": "new",
            "ignoreCase": false
          },
          {
            "type": "SimpleNot",
            "expression": {
              "type": "rule_ref",
              "identifier": "IdentifierPart"
            }
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "NullToken",
      "description": {
        "type": "Sequence",
        "expressions": [
          {
            "type": "Literal",
            "Literal": "null",
            "ignoreCase": false
          },
          {
            "type": "SimpleNot",
            "expression": {
              "type": "rule_ref",
              "identifier": "IdentifierPart"
            }
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "ReturnToken",
      "description": {
        "type": "Sequence",
        "expressions": [
          {
            "type": "Literal",
            "Literal": "return",
            "ignoreCase": false
          },
          {
            "type": "SimpleNot",
            "expression": {
              "type": "rule_ref",
              "identifier": "IdentifierPart"
            }
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "SetToken",
      "description": {
        "type": "Sequence",
        "expressions": [
          {
            "type": "Literal",
            "Literal": "set",
            "ignoreCase": false
          },
          {
            "type": "SimpleNot",
            "expression": {
              "type": "rule_ref",
              "identifier": "IdentifierPart"
            }
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "SwitchToken",
      "description": {
        "type": "Sequence",
        "expressions": [
          {
            "type": "Literal",
            "Literal": "switch",
            "ignoreCase": false
          },
          {
            "type": "SimpleNot",
            "expression": {
              "type": "rule_ref",
              "identifier": "IdentifierPart"
            }
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "ThisToken",
      "description": {
        "type": "Sequence",
        "expressions": [
          {
            "type": "Literal",
            "Literal": "this",
            "ignoreCase": false
          },
          {
            "type": "SimpleNot",
            "expression": {
              "type": "rule_ref",
              "identifier": "IdentifierPart"
            }
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "ThrowToken",
      "description": {
        "type": "Sequence",
        "expressions": [
          {
            "type": "Literal",
            "Literal": "throw",
            "ignoreCase": false
          },
          {
            "type": "SimpleNot",
            "expression": {
              "type": "rule_ref",
              "identifier": "IdentifierPart"
            }
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "TrueToken",
      "description": {
        "type": "Sequence",
        "expressions": [
          {
            "type": "Literal",
            "Literal": "true",
            "ignoreCase": false
          },
          {
            "type": "SimpleNot",
            "expression": {
              "type": "rule_ref",
              "identifier": "IdentifierPart"
            }
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "TryToken",
      "description": {
        "type": "Sequence",
        "expressions": [
          {
            "type": "Literal",
            "Literal": "try",
            "ignoreCase": false
          },
          {
            "type": "SimpleNot",
            "expression": {
              "type": "rule_ref",
              "identifier": "IdentifierPart"
            }
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "TypeofToken",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "Literal",
              "Literal": "typeof",
              "ignoreCase": false
            },
            {
              "type": "SimpleNot",
              "expression": {
                "type": "rule_ref",
                "identifier": "IdentifierPart"
              }
            }
          ]
        },
        "code": " return \"typeof\"; "
      }
    },
    {
      "type": "rule",
      "identifier": "VarToken",
      "description": {
        "type": "Sequence",
        "expressions": [
          {
            "type": "Literal",
            "Literal": "var",
            "ignoreCase": false
          },
          {
            "type": "SimpleNot",
            "expression": {
              "type": "rule_ref",
              "identifier": "IdentifierPart"
            }
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "VoidToken",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "Literal",
              "Literal": "void",
              "ignoreCase": false
            },
            {
              "type": "SimpleNot",
              "expression": {
                "type": "rule_ref",
                "identifier": "IdentifierPart"
              }
            }
          ]
        },
        "code": " return \"void\"; "
      }
    },
    {
      "type": "rule",
      "identifier": "WhileToken",
      "description": {
        "type": "Sequence",
        "expressions": [
          {
            "type": "Literal",
            "Literal": "while",
            "ignoreCase": false
          },
          {
            "type": "SimpleNot",
            "expression": {
              "type": "rule_ref",
              "identifier": "IdentifierPart"
            }
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "WithToken",
      "description": {
        "type": "Sequence",
        "expressions": [
          {
            "type": "Literal",
            "Literal": "with",
            "ignoreCase": false
          },
          {
            "type": "SimpleNot",
            "expression": {
              "type": "rule_ref",
              "identifier": "IdentifierPart"
            }
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "EOS",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "Sequence",
            "expressions": [
              {
                "type": "rule_ref",
                "identifier": "__"
              },
              {
                "type": "Literal",
                "Literal": ";",
                "ignoreCase": false
              }
            ]
          },
          {
            "type": "Sequence",
            "expressions": [
              {
                "type": "rule_ref",
                "identifier": "_"
              },
              {
                "type": "rule_ref",
                "identifier": "LineTerminatorSequence"
              }
            ]
          },
          {
            "type": "Sequence",
            "expressions": [
              {
                "type": "rule_ref",
                "identifier": "_"
              },
              {
                "type": "SimpleAnd",
                "expression": {
                  "type": "Literal",
                  "Literal": "}",
                  "ignoreCase": false
                }
              }
            ]
          },
          {
            "type": "Sequence",
            "expressions": [
              {
                "type": "rule_ref",
                "identifier": "__"
              },
              {
                "type": "rule_ref",
                "identifier": "EOF"
              }
            ]
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "EOSNoLineTerminator",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "Sequence",
            "expressions": [
              {
                "type": "rule_ref",
                "identifier": "_"
              },
              {
                "type": "Literal",
                "Literal": ";",
                "ignoreCase": false
              }
            ]
          },
          {
            "type": "Sequence",
            "expressions": [
              {
                "type": "rule_ref",
                "identifier": "_"
              },
              {
                "type": "rule_ref",
                "identifier": "LineTerminatorSequence"
              }
            ]
          },
          {
            "type": "Sequence",
            "expressions": [
              {
                "type": "rule_ref",
                "identifier": "_"
              },
              {
                "type": "SimpleAnd",
                "expression": {
                  "type": "Literal",
                  "Literal": "}",
                  "ignoreCase": false
                }
              }
            ]
          },
          {
            "type": "Sequence",
            "expressions": [
              {
                "type": "rule_ref",
                "identifier": "_"
              },
              {
                "type": "rule_ref",
                "identifier": "EOF"
              }
            ]
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "EOF",
      "description": {
        "type": "SimpleNot",
        "expression": {
          "type": "Any"
        }
      }
    },
    {
      "type": "rule",
      "identifier": "_",
      "description": {
        "type": "ZeroOrMore",
        "expression": {
          "type": "Choice",
          "expressions": [
            {
              "type": "Class",
              "characters": [
                "\t",
                "\u000b",
                "\f",
                " ",
                " ",
                "﻿",
                " ",
                " ",
                " ",
                "᠎",
                " ",
                " ",
                " ",
                " ",
                " ",
                " ",
                " ",
                " ",
                " ",
                " ",
                " ",
                " ",
                " ",
                "　"
              ]
            },
            {
              "type": "rule_ref",
              "identifier": "MultiLineCommentNoLineTerminator"
            },
            {
              "type": "rule_ref",
              "identifier": "SingleLineComment"
            }
          ]
        }
      }
    },
    {
      "type": "rule",
      "identifier": "__",
      "description": {
        "type": "ZeroOrMore",
        "expression": {
          "type": "Choice",
          "expressions": [
            {
              "type": "Class",
              "characters": [
                "\t",
                "\u000b",
                "\f",
                " ",
                " ",
                "﻿",
                " ",
                " ",
                " ",
                "᠎",
                " ",
                " ",
                " ",
                " ",
                " ",
                " ",
                " ",
                " ",
                " ",
                " ",
                " ",
                " ",
                " ",
                "　"
              ]
            },
            {
              "type": "rule_ref",
              "identifier": "LineTerminatorSequence"
            },
            {
              "type": "rule_ref",
              "identifier": "Comment"
            }
          ]
        }
      }
    },
    {
      "type": "rule",
      "identifier": "PrimaryExpression",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "action",
            "expression": {
              "type": "rule_ref",
              "identifier": "ThisToken"
            },
            "code": " return { type: \"This\" }; "
          },
          {
            "type": "action",
            "expression": {
              "type": "labeled",
              "label": "name",
              "expression": {
                "type": "rule_ref",
                "identifier": "Identifier"
              }
            },
            "code": " return { type: \"Variable\", name: name }; "
          },
          {
            "type": "rule_ref",
            "identifier": "Literal"
          },
          {
            "type": "rule_ref",
            "identifier": "ArrayLiteral"
          },
          {
            "type": "rule_ref",
            "identifier": "ObjectLiteral"
          },
          {
            "type": "action",
            "expression": {
              "type": "Sequence",
              "expressions": [
                {
                  "type": "Literal",
                  "Literal": "(",
                  "ignoreCase": false
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "labeled",
                  "label": "expression",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "Expression"
                  }
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "Literal",
                  "Literal": ")",
                  "ignoreCase": false
                }
              ]
            },
            "code": " return expression; "
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "ArrayLiteral",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "Literal",
              "Literal": "[",
              "ignoreCase": false
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "elements",
              "expression": {
                "type": "Question",
                "expression": {
                  "type": "rule_ref",
                  "identifier": "ElementList"
                }
              }
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "Question",
              "expression": {
                "type": "Sequence",
                "expressions": [
                  {
                    "type": "rule_ref",
                    "identifier": "Elision"
                  },
                  {
                    "type": "rule_ref",
                    "identifier": "__"
                  }
                ]
              }
            },
            {
              "type": "Literal",
              "Literal": "]",
              "ignoreCase": false
            }
          ]
        },
        "code": "\n      return {\n        type:     \"ArrayLiteral\",\n        elements: elements !== \"\" ? elements : []\n      };\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "ElementList",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "Question",
              "expression": {
                "type": "Sequence",
                "expressions": [
                  {
                    "type": "rule_ref",
                    "identifier": "Elision"
                  },
                  {
                    "type": "rule_ref",
                    "identifier": "__"
                  }
                ]
              }
            },
            {
              "type": "labeled",
              "label": "head",
              "expression": {
                "type": "rule_ref",
                "identifier": "AssignmentExpression"
              }
            },
            {
              "type": "labeled",
              "label": "tail",
              "expression": {
                "type": "ZeroOrMore",
                "expression": {
                  "type": "Sequence",
                  "expressions": [
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "Literal",
                      "Literal": ",",
                      "ignoreCase": false
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "Question",
                      "expression": {
                        "type": "rule_ref",
                        "identifier": "Elision"
                      }
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "AssignmentExpression"
                    }
                  ]
                }
              }
            }
          ]
        },
        "code": "\n      var result = [head];\n      for (var i = 0; i < tail.length; i++) {\n        result.push(tail[i][5]);\n      }\n      return result;\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "Elision",
      "description": {
        "type": "Sequence",
        "expressions": [
          {
            "type": "Literal",
            "Literal": ",",
            "ignoreCase": false
          },
          {
            "type": "ZeroOrMore",
            "expression": {
              "type": "Sequence",
              "expressions": [
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "Literal",
                  "Literal": ",",
                  "ignoreCase": false
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "ObjectLiteral",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "Literal",
              "Literal": "{",
              "ignoreCase": false
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "properties",
              "expression": {
                "type": "Question",
                "expression": {
                  "type": "Sequence",
                  "expressions": [
                    {
                      "type": "rule_ref",
                      "identifier": "PropertyNameAndValueList"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "Question",
                      "expression": {
                        "type": "Sequence",
                        "expressions": [
                          {
                            "type": "Literal",
                            "Literal": ",",
                            "ignoreCase": false
                          },
                          {
                            "type": "rule_ref",
                            "identifier": "__"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            },
            {
              "type": "Literal",
              "Literal": "}",
              "ignoreCase": false
            }
          ]
        },
        "code": "\n      return {\n        type:       \"ObjectLiteral\",\n        properties: properties !== \"\" ? properties[0] : []\n      };\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "PropertyNameAndValueList",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "head",
              "expression": {
                "type": "rule_ref",
                "identifier": "PropertyAssignment"
              }
            },
            {
              "type": "labeled",
              "label": "tail",
              "expression": {
                "type": "ZeroOrMore",
                "expression": {
                  "type": "Sequence",
                  "expressions": [
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "Literal",
                      "Literal": ",",
                      "ignoreCase": false
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "PropertyAssignment"
                    }
                  ]
                }
              }
            }
          ]
        },
        "code": "\n      var result = [head];\n      for (var i = 0; i < tail.length; i++) {\n        result.push(tail[i][3]);\n      }\n      return result;\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "PropertyAssignment",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "action",
            "expression": {
              "type": "Sequence",
              "expressions": [
                {
                  "type": "labeled",
                  "label": "name",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "PropertyName"
                  }
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "Literal",
                  "Literal": ":",
                  "ignoreCase": false
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "labeled",
                  "label": "value",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "AssignmentExpression"
                  }
                }
              ]
            },
            "code": "\n      return {\n        type:  \"PropertyAssignment\",\n        name:  name,\n        value: value\n      };\n    "
          },
          {
            "type": "action",
            "expression": {
              "type": "Sequence",
              "expressions": [
                {
                  "type": "rule_ref",
                  "identifier": "GetToken"
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "labeled",
                  "label": "name",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "PropertyName"
                  }
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "Literal",
                  "Literal": "(",
                  "ignoreCase": false
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "Literal",
                  "Literal": ")",
                  "ignoreCase": false
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "Literal",
                  "Literal": "{",
                  "ignoreCase": false
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "labeled",
                  "label": "body",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "FunctionBody"
                  }
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "Literal",
                  "Literal": "}",
                  "ignoreCase": false
                }
              ]
            },
            "code": "\n      return {\n        type: \"GetterDefinition\",\n        name: name,\n        body: body\n      };\n    "
          },
          {
            "type": "action",
            "expression": {
              "type": "Sequence",
              "expressions": [
                {
                  "type": "rule_ref",
                  "identifier": "SetToken"
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "labeled",
                  "label": "name",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "PropertyName"
                  }
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "Literal",
                  "Literal": "(",
                  "ignoreCase": false
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "labeled",
                  "label": "param",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "Identifier"
                  }
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "Literal",
                  "Literal": ")",
                  "ignoreCase": false
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "Literal",
                  "Literal": "{",
                  "ignoreCase": false
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "labeled",
                  "label": "body",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "FunctionBody"
                  }
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "Literal",
                  "Literal": "}",
                  "ignoreCase": false
                }
              ]
            },
            "code": "\n      return {\n        type:  \"SetterDefinition\",\n        name:  name,\n        param: param,\n        body:  body\n      };\n    "
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "PropertyName",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "rule_ref",
            "identifier": "IdentifierName"
          },
          {
            "type": "rule_ref",
            "identifier": "StringLiteral"
          },
          {
            "type": "rule_ref",
            "identifier": "NumericLiteral"
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "MemberExpression",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "base",
              "expression": {
                "type": "Choice",
                "expressions": [
                  {
                    "type": "rule_ref",
                    "identifier": "PrimaryExpression"
                  },
                  {
                    "type": "rule_ref",
                    "identifier": "FunctionExpression"
                  },
                  {
                    "type": "action",
                    "expression": {
                      "type": "Sequence",
                      "expressions": [
                        {
                          "type": "rule_ref",
                          "identifier": "NewToken"
                        },
                        {
                          "type": "rule_ref",
                          "identifier": "__"
                        },
                        {
                          "type": "labeled",
                          "label": "constructor",
                          "expression": {
                            "type": "rule_ref",
                            "identifier": "MemberExpression"
                          }
                        },
                        {
                          "type": "rule_ref",
                          "identifier": "__"
                        },
                        {
                          "type": "labeled",
                          "label": "args",
                          "expression": {
                            "type": "rule_ref",
                            "identifier": "Arguments"
                          }
                        }
                      ]
                    },
                    "code": "\n          return {\n            type:        \"NewOperator\",\n            constructor: constructor,\n            arguments:   args\n          };\n        "
                  }
                ]
              }
            },
            {
              "type": "labeled",
              "label": "accessors",
              "expression": {
                "type": "ZeroOrMore",
                "expression": {
                  "type": "Choice",
                  "expressions": [
                    {
                      "type": "action",
                      "expression": {
                        "type": "Sequence",
                        "expressions": [
                          {
                            "type": "rule_ref",
                            "identifier": "__"
                          },
                          {
                            "type": "Literal",
                            "Literal": "[",
                            "ignoreCase": false
                          },
                          {
                            "type": "rule_ref",
                            "identifier": "__"
                          },
                          {
                            "type": "labeled",
                            "label": "name",
                            "expression": {
                              "type": "rule_ref",
                              "identifier": "Expression"
                            }
                          },
                          {
                            "type": "rule_ref",
                            "identifier": "__"
                          },
                          {
                            "type": "Literal",
                            "Literal": "]",
                            "ignoreCase": false
                          }
                        ]
                      },
                      "code": " return name; "
                    },
                    {
                      "type": "action",
                      "expression": {
                        "type": "Sequence",
                        "expressions": [
                          {
                            "type": "rule_ref",
                            "identifier": "__"
                          },
                          {
                            "type": "Literal",
                            "Literal": ".",
                            "ignoreCase": false
                          },
                          {
                            "type": "rule_ref",
                            "identifier": "__"
                          },
                          {
                            "type": "labeled",
                            "label": "name",
                            "expression": {
                              "type": "rule_ref",
                              "identifier": "IdentifierName"
                            }
                          }
                        ]
                      },
                      "code": " return name; "
                    }
                  ]
                }
              }
            }
          ]
        },
        "code": "\n      var result = base;\n      for (var i = 0; i < accessors.length; i++) {\n        result = {\n          type: \"PropertyAccess\",\n          base: result,\n          name: accessors[i]\n        };\n      }\n      return result;\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "NewExpression",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "rule_ref",
            "identifier": "MemberExpression"
          },
          {
            "type": "action",
            "expression": {
              "type": "Sequence",
              "expressions": [
                {
                  "type": "rule_ref",
                  "identifier": "NewToken"
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "labeled",
                  "label": "constructor",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "NewExpression"
                  }
                }
              ]
            },
            "code": "\n      return {\n        type:        \"NewOperator\",\n        constructor: constructor,\n        arguments:   []\n      };\n    "
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "CallExpression",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "base",
              "expression": {
                "type": "action",
                "expression": {
                  "type": "Sequence",
                  "expressions": [
                    {
                      "type": "labeled",
                      "label": "name",
                      "expression": {
                        "type": "rule_ref",
                        "identifier": "MemberExpression"
                      }
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "labeled",
                      "label": "args",
                      "expression": {
                        "type": "rule_ref",
                        "identifier": "Arguments"
                      }
                    }
                  ]
                },
                "code": "\n        return {\n          type:      \"FunctionCall\",\n          name:      name,\n          arguments: args\n        };\n      "
              }
            },
            {
              "type": "labeled",
              "label": "argumentsOrAccessors",
              "expression": {
                "type": "ZeroOrMore",
                "expression": {
                  "type": "Choice",
                  "expressions": [
                    {
                      "type": "action",
                      "expression": {
                        "type": "Sequence",
                        "expressions": [
                          {
                            "type": "rule_ref",
                            "identifier": "__"
                          },
                          {
                            "type": "labeled",
                            "label": "args",
                            "expression": {
                              "type": "rule_ref",
                              "identifier": "Arguments"
                            }
                          }
                        ]
                      },
                      "code": "\n          return {\n            type:      \"FunctionCallArguments\",\n            arguments: args\n          };\n        "
                    },
                    {
                      "type": "action",
                      "expression": {
                        "type": "Sequence",
                        "expressions": [
                          {
                            "type": "rule_ref",
                            "identifier": "__"
                          },
                          {
                            "type": "Literal",
                            "Literal": "[",
                            "ignoreCase": false
                          },
                          {
                            "type": "rule_ref",
                            "identifier": "__"
                          },
                          {
                            "type": "labeled",
                            "label": "name",
                            "expression": {
                              "type": "rule_ref",
                              "identifier": "Expression"
                            }
                          },
                          {
                            "type": "rule_ref",
                            "identifier": "__"
                          },
                          {
                            "type": "Literal",
                            "Literal": "]",
                            "ignoreCase": false
                          }
                        ]
                      },
                      "code": "\n          return {\n            type: \"PropertyAccessProperty\",\n            name: name\n          };\n        "
                    },
                    {
                      "type": "action",
                      "expression": {
                        "type": "Sequence",
                        "expressions": [
                          {
                            "type": "rule_ref",
                            "identifier": "__"
                          },
                          {
                            "type": "Literal",
                            "Literal": ".",
                            "ignoreCase": false
                          },
                          {
                            "type": "rule_ref",
                            "identifier": "__"
                          },
                          {
                            "type": "labeled",
                            "label": "name",
                            "expression": {
                              "type": "rule_ref",
                              "identifier": "IdentifierName"
                            }
                          }
                        ]
                      },
                      "code": "\n          return {\n            type: \"PropertyAccessProperty\",\n            name: name\n          };\n        "
                    }
                  ]
                }
              }
            }
          ]
        },
        "code": "\n      var result = base;\n      for (var i = 0; i < argumentsOrAccessors.length; i++) {\n        switch (argumentsOrAccessors[i].type) {\n          case \"FunctionCallArguments\":\n            result = {\n              type:      \"FuctionCall\",\n              name:      result,\n              arguments: argumentsOrAccessors[i].arguments\n            };\n            break;\n          case \"PropertyAccessProperty\":\n            result = {\n              type: \"PropertyAccess\",\n              base: result,\n              name: argumentsOrAccessors[i].name\n            };\n            break;\n          default:\n            throw new Error(\n              \"Invalid expression type: \" + argumentsOrAccessors[i].type\n            );\n        }\n      }\n      return result;\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "Arguments",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "Literal",
              "Literal": "(",
              "ignoreCase": false
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "args",
              "expression": {
                "type": "Question",
                "expression": {
                  "type": "rule_ref",
                  "identifier": "ArgumentList"
                }
              }
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "Literal",
              "Literal": ")",
              "ignoreCase": false
            }
          ]
        },
        "code": "\n    return args !== \"\" ? args : [];\n  "
      }
    },
    {
      "type": "rule",
      "identifier": "ArgumentList",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "head",
              "expression": {
                "type": "rule_ref",
                "identifier": "AssignmentExpression"
              }
            },
            {
              "type": "labeled",
              "label": "tail",
              "expression": {
                "type": "ZeroOrMore",
                "expression": {
                  "type": "Sequence",
                  "expressions": [
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "Literal",
                      "Literal": ",",
                      "ignoreCase": false
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "AssignmentExpression"
                    }
                  ]
                }
              }
            }
          ]
        },
        "code": "\n    var result = [head];\n    for (var i = 0; i < tail.length; i++) {\n      result.push(tail[i][3]);\n    }\n    return result;\n  "
      }
    },
    {
      "type": "rule",
      "identifier": "LeftHandSideExpression",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "rule_ref",
            "identifier": "CallExpression"
          },
          {
            "type": "rule_ref",
            "identifier": "NewExpression"
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "PostfixExpression",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "action",
            "expression": {
              "type": "Sequence",
              "expressions": [
                {
                  "type": "labeled",
                  "label": "expression",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "LeftHandSideExpression"
                  }
                },
                {
                  "type": "rule_ref",
                  "identifier": "_"
                },
                {
                  "type": "labeled",
                  "label": "operator",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "PostfixOperator"
                  }
                }
              ]
            },
            "code": "\n      return {\n        type:       \"PostfixExpression\",\n        operator:   operator,\n        expression: expression\n      };\n    "
          },
          {
            "type": "rule_ref",
            "identifier": "LeftHandSideExpression"
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "PostfixOperator",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "Literal",
            "Literal": "++",
            "ignoreCase": false
          },
          {
            "type": "Literal",
            "Literal": "--",
            "ignoreCase": false
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "UnaryExpression",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "rule_ref",
            "identifier": "PostfixExpression"
          },
          {
            "type": "action",
            "expression": {
              "type": "Sequence",
              "expressions": [
                {
                  "type": "labeled",
                  "label": "operator",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "UnaryOperator"
                  }
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "labeled",
                  "label": "expression",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "UnaryExpression"
                  }
                }
              ]
            },
            "code": "\n      return {\n        type:       \"UnaryExpression\",\n        operator:   operator,\n        expression: expression\n      };\n    "
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "UnaryOperator",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "rule_ref",
            "identifier": "DeleteToken"
          },
          {
            "type": "rule_ref",
            "identifier": "VoidToken"
          },
          {
            "type": "rule_ref",
            "identifier": "TypeofToken"
          },
          {
            "type": "Literal",
            "Literal": "++",
            "ignoreCase": false
          },
          {
            "type": "Literal",
            "Literal": "--",
            "ignoreCase": false
          },
          {
            "type": "Literal",
            "Literal": "+",
            "ignoreCase": false
          },
          {
            "type": "Literal",
            "Literal": "-",
            "ignoreCase": false
          },
          {
            "type": "Literal",
            "Literal": "~",
            "ignoreCase": false
          },
          {
            "type": "Literal",
            "Literal": "!",
            "ignoreCase": false
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "MultiplicativeExpression",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "head",
              "expression": {
                "type": "rule_ref",
                "identifier": "UnaryExpression"
              }
            },
            {
              "type": "labeled",
              "label": "tail",
              "expression": {
                "type": "ZeroOrMore",
                "expression": {
                  "type": "Sequence",
                  "expressions": [
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "MultiplicativeOperator"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "UnaryExpression"
                    }
                  ]
                }
              }
            }
          ]
        },
        "code": "\n      var result = head;\n      for (var i = 0; i < tail.length; i++) {\n        result = {\n          type:     \"BinaryExpression\",\n          operator: tail[i][1],\n          left:     result,\n          right:    tail[i][3]\n        };\n      }\n      return result;\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "MultiplicativeOperator",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "operator",
              "expression": {
                "type": "Choice",
                "expressions": [
                  {
                    "type": "Literal",
                    "Literal": "*",
                    "ignoreCase": false
                  },
                  {
                    "type": "Literal",
                    "Literal": "/",
                    "ignoreCase": false
                  },
                  {
                    "type": "Literal",
                    "Literal": "%",
                    "ignoreCase": false
                  }
                ]
              }
            },
            {
              "type": "SimpleNot",
              "expression": {
                "type": "Literal",
                "Literal": "=",
                "ignoreCase": false
              }
            }
          ]
        },
        "code": " return operator; "
      }
    },
    {
      "type": "rule",
      "identifier": "AdditiveExpression",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "head",
              "expression": {
                "type": "rule_ref",
                "identifier": "MultiplicativeExpression"
              }
            },
            {
              "type": "labeled",
              "label": "tail",
              "expression": {
                "type": "ZeroOrMore",
                "expression": {
                  "type": "Sequence",
                  "expressions": [
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "AdditiveOperator"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "MultiplicativeExpression"
                    }
                  ]
                }
              }
            }
          ]
        },
        "code": "\n      var result = head;\n      for (var i = 0; i < tail.length; i++) {\n        result = {\n          type:     \"BinaryExpression\",\n          operator: tail[i][1],\n          left:     result,\n          right:    tail[i][3]\n        };\n      }\n      return result;\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "AdditiveOperator",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "action",
            "expression": {
              "type": "Sequence",
              "expressions": [
                {
                  "type": "Literal",
                  "Literal": "+",
                  "ignoreCase": false
                },
                {
                  "type": "SimpleNot",
                  "expression": {
                    "type": "Choice",
                    "expressions": [
                      {
                        "type": "Literal",
                        "Literal": "+",
                        "ignoreCase": false
                      },
                      {
                        "type": "Literal",
                        "Literal": "=",
                        "ignoreCase": false
                      }
                    ]
                  }
                }
              ]
            },
            "code": " return \"+\"; "
          },
          {
            "type": "action",
            "expression": {
              "type": "Sequence",
              "expressions": [
                {
                  "type": "Literal",
                  "Literal": "-",
                  "ignoreCase": false
                },
                {
                  "type": "SimpleNot",
                  "expression": {
                    "type": "Choice",
                    "expressions": [
                      {
                        "type": "Literal",
                        "Literal": "-",
                        "ignoreCase": false
                      },
                      {
                        "type": "Literal",
                        "Literal": "=",
                        "ignoreCase": false
                      }
                    ]
                  }
                }
              ]
            },
            "code": " return \"-\"; "
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "ShiftExpression",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "head",
              "expression": {
                "type": "rule_ref",
                "identifier": "AdditiveExpression"
              }
            },
            {
              "type": "labeled",
              "label": "tail",
              "expression": {
                "type": "ZeroOrMore",
                "expression": {
                  "type": "Sequence",
                  "expressions": [
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "ShiftOperator"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "AdditiveExpression"
                    }
                  ]
                }
              }
            }
          ]
        },
        "code": "\n      var result = head;\n      for (var i = 0; i < tail.length; i++) {\n        result = {\n          type:     \"BinaryExpression\",\n          operator: tail[i][1],\n          left:     result,\n          right:    tail[i][3]\n        };\n      }\n      return result;\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "ShiftOperator",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "Literal",
            "Literal": "<<",
            "ignoreCase": false
          },
          {
            "type": "Literal",
            "Literal": ">>>",
            "ignoreCase": false
          },
          {
            "type": "Literal",
            "Literal": ">>",
            "ignoreCase": false
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "RelationalExpression",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "head",
              "expression": {
                "type": "rule_ref",
                "identifier": "ShiftExpression"
              }
            },
            {
              "type": "labeled",
              "label": "tail",
              "expression": {
                "type": "ZeroOrMore",
                "expression": {
                  "type": "Sequence",
                  "expressions": [
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "RelationalOperator"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "ShiftExpression"
                    }
                  ]
                }
              }
            }
          ]
        },
        "code": "\n      var result = head;\n      for (var i = 0; i < tail.length; i++) {\n        result = {\n          type:     \"BinaryExpression\",\n          operator: tail[i][1],\n          left:     result,\n          right:    tail[i][3]\n        };\n      }\n      return result;\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "RelationalOperator",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "Literal",
            "Literal": "<=",
            "ignoreCase": false
          },
          {
            "type": "Literal",
            "Literal": ">=",
            "ignoreCase": false
          },
          {
            "type": "Literal",
            "Literal": "<",
            "ignoreCase": false
          },
          {
            "type": "Literal",
            "Literal": ">",
            "ignoreCase": false
          },
          {
            "type": "rule_ref",
            "identifier": "InstanceofToken"
          },
          {
            "type": "rule_ref",
            "identifier": "InToken"
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "RelationalExpressionNoIn",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "head",
              "expression": {
                "type": "rule_ref",
                "identifier": "ShiftExpression"
              }
            },
            {
              "type": "labeled",
              "label": "tail",
              "expression": {
                "type": "ZeroOrMore",
                "expression": {
                  "type": "Sequence",
                  "expressions": [
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "RelationalOperatorNoIn"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "ShiftExpression"
                    }
                  ]
                }
              }
            }
          ]
        },
        "code": "\n      var result = head;\n      for (var i = 0; i < tail.length; i++) {\n        result = {\n          type:     \"BinaryExpression\",\n          operator: tail[i][1],\n          left:     result,\n          right:    tail[i][3]\n        };\n      }\n      return result;\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "RelationalOperatorNoIn",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "Literal",
            "Literal": "<=",
            "ignoreCase": false
          },
          {
            "type": "Literal",
            "Literal": ">=",
            "ignoreCase": false
          },
          {
            "type": "Literal",
            "Literal": "<",
            "ignoreCase": false
          },
          {
            "type": "Literal",
            "Literal": ">",
            "ignoreCase": false
          },
          {
            "type": "rule_ref",
            "identifier": "InstanceofToken"
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "EqualityExpression",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "head",
              "expression": {
                "type": "rule_ref",
                "identifier": "RelationalExpression"
              }
            },
            {
              "type": "labeled",
              "label": "tail",
              "expression": {
                "type": "ZeroOrMore",
                "expression": {
                  "type": "Sequence",
                  "expressions": [
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "EqualityOperator"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "RelationalExpression"
                    }
                  ]
                }
              }
            }
          ]
        },
        "code": "\n      var result = head;\n      for (var i = 0; i < tail.length; i++) {\n        result = {\n          type:     \"BinaryExpression\",\n          operator: tail[i][1],\n          left:     result,\n          right:    tail[i][3]\n        };\n      }\n      return result;\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "EqualityExpressionNoIn",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "head",
              "expression": {
                "type": "rule_ref",
                "identifier": "RelationalExpressionNoIn"
              }
            },
            {
              "type": "labeled",
              "label": "tail",
              "expression": {
                "type": "ZeroOrMore",
                "expression": {
                  "type": "Sequence",
                  "expressions": [
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "EqualityOperator"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "RelationalExpressionNoIn"
                    }
                  ]
                }
              }
            }
          ]
        },
        "code": "\n      var result = head;\n      for (var i = 0; i < tail.length; i++) {\n        result = {\n          type:     \"BinaryExpression\",\n          operator: tail[i][1],\n          left:     result,\n          right:    tail[i][3]\n        };\n      }\n      return result;\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "EqualityOperator",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "Literal",
            "Literal": "===",
            "ignoreCase": false
          },
          {
            "type": "Literal",
            "Literal": "!==",
            "ignoreCase": false
          },
          {
            "type": "Literal",
            "Literal": "==",
            "ignoreCase": false
          },
          {
            "type": "Literal",
            "Literal": "!=",
            "ignoreCase": false
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "BitwiseANDExpression",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "head",
              "expression": {
                "type": "rule_ref",
                "identifier": "EqualityExpression"
              }
            },
            {
              "type": "labeled",
              "label": "tail",
              "expression": {
                "type": "ZeroOrMore",
                "expression": {
                  "type": "Sequence",
                  "expressions": [
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "BitwiseANDOperator"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "EqualityExpression"
                    }
                  ]
                }
              }
            }
          ]
        },
        "code": "\n      var result = head;\n      for (var i = 0; i < tail.length; i++) {\n        result = {\n          type:     \"BinaryExpression\",\n          operator: tail[i][1],\n          left:     result,\n          right:    tail[i][3]\n        };\n      }\n      return result;\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "BitwiseANDExpressionNoIn",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "head",
              "expression": {
                "type": "rule_ref",
                "identifier": "EqualityExpressionNoIn"
              }
            },
            {
              "type": "labeled",
              "label": "tail",
              "expression": {
                "type": "ZeroOrMore",
                "expression": {
                  "type": "Sequence",
                  "expressions": [
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "BitwiseANDOperator"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "EqualityExpressionNoIn"
                    }
                  ]
                }
              }
            }
          ]
        },
        "code": "\n      var result = head;\n      for (var i = 0; i < tail.length; i++) {\n        result = {\n          type:     \"BinaryExpression\",\n          operator: tail[i][1],\n          left:     result,\n          right:    tail[i][3]\n        };\n      }\n      return result;\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "BitwiseANDOperator",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "Literal",
              "Literal": "&",
              "ignoreCase": false
            },
            {
              "type": "SimpleNot",
              "expression": {
                "type": "Choice",
                "expressions": [
                  {
                    "type": "Literal",
                    "Literal": "&",
                    "ignoreCase": false
                  },
                  {
                    "type": "Literal",
                    "Literal": "=",
                    "ignoreCase": false
                  }
                ]
              }
            }
          ]
        },
        "code": " return \"&\"; "
      }
    },
    {
      "type": "rule",
      "identifier": "BitwiseXORExpression",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "head",
              "expression": {
                "type": "rule_ref",
                "identifier": "BitwiseANDExpression"
              }
            },
            {
              "type": "labeled",
              "label": "tail",
              "expression": {
                "type": "ZeroOrMore",
                "expression": {
                  "type": "Sequence",
                  "expressions": [
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "BitwiseXOROperator"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "BitwiseANDExpression"
                    }
                  ]
                }
              }
            }
          ]
        },
        "code": "\n      var result = head;\n      for (var i = 0; i < tail.length; i++) {\n        result = {\n          type:     \"BinaryExpression\",\n          operator: tail[i][1],\n          left:     result,\n          right:    tail[i][3]\n        };\n      }\n      return result;\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "BitwiseXORExpressionNoIn",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "head",
              "expression": {
                "type": "rule_ref",
                "identifier": "BitwiseANDExpressionNoIn"
              }
            },
            {
              "type": "labeled",
              "label": "tail",
              "expression": {
                "type": "ZeroOrMore",
                "expression": {
                  "type": "Sequence",
                  "expressions": [
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "BitwiseXOROperator"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "BitwiseANDExpressionNoIn"
                    }
                  ]
                }
              }
            }
          ]
        },
        "code": "\n      var result = head;\n      for (var i = 0; i < tail.length; i++) {\n        result = {\n          type:     \"BinaryExpression\",\n          operator: tail[i][1],\n          left:     result,\n          right:    tail[i][3]\n        };\n      }\n      return result;\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "BitwiseXOROperator",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "Literal",
              "Literal": "^",
              "ignoreCase": false
            },
            {
              "type": "SimpleNot",
              "expression": {
                "type": "Choice",
                "expressions": [
                  {
                    "type": "Literal",
                    "Literal": "^",
                    "ignoreCase": false
                  },
                  {
                    "type": "Literal",
                    "Literal": "=",
                    "ignoreCase": false
                  }
                ]
              }
            }
          ]
        },
        "code": " return \"^\"; "
      }
    },
    {
      "type": "rule",
      "identifier": "BitwiseORExpression",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "head",
              "expression": {
                "type": "rule_ref",
                "identifier": "BitwiseXORExpression"
              }
            },
            {
              "type": "labeled",
              "label": "tail",
              "expression": {
                "type": "ZeroOrMore",
                "expression": {
                  "type": "Sequence",
                  "expressions": [
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "BitwiseOROperator"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "BitwiseXORExpression"
                    }
                  ]
                }
              }
            }
          ]
        },
        "code": "\n      var result = head;\n      for (var i = 0; i < tail.length; i++) {\n        result = {\n          type:     \"BinaryExpression\",\n          operator: tail[i][1],\n          left:     result,\n          right:    tail[i][3]\n        };\n      }\n      return result;\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "BitwiseORExpressionNoIn",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "head",
              "expression": {
                "type": "rule_ref",
                "identifier": "BitwiseXORExpressionNoIn"
              }
            },
            {
              "type": "labeled",
              "label": "tail",
              "expression": {
                "type": "ZeroOrMore",
                "expression": {
                  "type": "Sequence",
                  "expressions": [
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "BitwiseOROperator"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "BitwiseXORExpressionNoIn"
                    }
                  ]
                }
              }
            }
          ]
        },
        "code": "\n      var result = head;\n      for (var i = 0; i < tail.length; i++) {\n        result = {\n          type:     \"BinaryExpression\",\n          operator: tail[i][1],\n          left:     result,\n          right:    tail[i][3]\n        };\n      }\n      return result;\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "BitwiseOROperator",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "Literal",
              "Literal": "|",
              "ignoreCase": false
            },
            {
              "type": "SimpleNot",
              "expression": {
                "type": "Choice",
                "expressions": [
                  {
                    "type": "Literal",
                    "Literal": "|",
                    "ignoreCase": false
                  },
                  {
                    "type": "Literal",
                    "Literal": "=",
                    "ignoreCase": false
                  }
                ]
              }
            }
          ]
        },
        "code": " return \"|\"; "
      }
    },
    {
      "type": "rule",
      "identifier": "LogicalANDExpression",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "head",
              "expression": {
                "type": "rule_ref",
                "identifier": "BitwiseORExpression"
              }
            },
            {
              "type": "labeled",
              "label": "tail",
              "expression": {
                "type": "ZeroOrMore",
                "expression": {
                  "type": "Sequence",
                  "expressions": [
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "LogicalANDOperator"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "BitwiseORExpression"
                    }
                  ]
                }
              }
            }
          ]
        },
        "code": "\n      var result = head;\n      for (var i = 0; i < tail.length; i++) {\n        result = {\n          type:     \"BinaryExpression\",\n          operator: tail[i][1],\n          left:     result,\n          right:    tail[i][3]\n        };\n      }\n      return result;\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "LogicalANDExpressionNoIn",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "head",
              "expression": {
                "type": "rule_ref",
                "identifier": "BitwiseORExpressionNoIn"
              }
            },
            {
              "type": "labeled",
              "label": "tail",
              "expression": {
                "type": "ZeroOrMore",
                "expression": {
                  "type": "Sequence",
                  "expressions": [
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "LogicalANDOperator"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "BitwiseORExpressionNoIn"
                    }
                  ]
                }
              }
            }
          ]
        },
        "code": "\n      var result = head;\n      for (var i = 0; i < tail.length; i++) {\n        result = {\n          type:     \"BinaryExpression\",\n          operator: tail[i][1],\n          left:     result,\n          right:    tail[i][3]\n        };\n      }\n      return result;\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "LogicalANDOperator",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "Literal",
              "Literal": "&&",
              "ignoreCase": false
            },
            {
              "type": "SimpleNot",
              "expression": {
                "type": "Literal",
                "Literal": "=",
                "ignoreCase": false
              }
            }
          ]
        },
        "code": " return \"&&\"; "
      }
    },
    {
      "type": "rule",
      "identifier": "LogicalORExpression",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "head",
              "expression": {
                "type": "rule_ref",
                "identifier": "LogicalANDExpression"
              }
            },
            {
              "type": "labeled",
              "label": "tail",
              "expression": {
                "type": "ZeroOrMore",
                "expression": {
                  "type": "Sequence",
                  "expressions": [
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "LogicalOROperator"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "LogicalANDExpression"
                    }
                  ]
                }
              }
            }
          ]
        },
        "code": "\n      var result = head;\n      for (var i = 0; i < tail.length; i++) {\n        result = {\n          type:     \"BinaryExpression\",\n          operator: tail[i][1],\n          left:     result,\n          right:    tail[i][3]\n        };\n      }\n      return result;\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "LogicalORExpressionNoIn",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "head",
              "expression": {
                "type": "rule_ref",
                "identifier": "LogicalANDExpressionNoIn"
              }
            },
            {
              "type": "labeled",
              "label": "tail",
              "expression": {
                "type": "ZeroOrMore",
                "expression": {
                  "type": "Sequence",
                  "expressions": [
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "LogicalOROperator"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "LogicalANDExpressionNoIn"
                    }
                  ]
                }
              }
            }
          ]
        },
        "code": "\n      var result = head;\n      for (var i = 0; i < tail.length; i++) {\n        result = {\n          type:     \"BinaryExpression\",\n          operator: tail[i][1],\n          left:     result,\n          right:    tail[i][3]\n        };\n      }\n      return result;\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "LogicalOROperator",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "Literal",
              "Literal": "||",
              "ignoreCase": false
            },
            {
              "type": "SimpleNot",
              "expression": {
                "type": "Literal",
                "Literal": "=",
                "ignoreCase": false
              }
            }
          ]
        },
        "code": " return \"||\"; "
      }
    },
    {
      "type": "rule",
      "identifier": "ConditionalExpression",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "action",
            "expression": {
              "type": "Sequence",
              "expressions": [
                {
                  "type": "labeled",
                  "label": "condition",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "LogicalORExpression"
                  }
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "Literal",
                  "Literal": "?",
                  "ignoreCase": false
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "labeled",
                  "label": "trueExpression",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "AssignmentExpression"
                  }
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "Literal",
                  "Literal": ":",
                  "ignoreCase": false
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "labeled",
                  "label": "falseExpression",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "AssignmentExpression"
                  }
                }
              ]
            },
            "code": "\n      return {\n        type:            \"ConditionalExpression\",\n        condition:       condition,\n        trueExpression:  trueExpression,\n        falseExpression: falseExpression\n      };\n    "
          },
          {
            "type": "rule_ref",
            "identifier": "LogicalORExpression"
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "ConditionalExpressionNoIn",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "action",
            "expression": {
              "type": "Sequence",
              "expressions": [
                {
                  "type": "labeled",
                  "label": "condition",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "LogicalORExpressionNoIn"
                  }
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "Literal",
                  "Literal": "?",
                  "ignoreCase": false
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "labeled",
                  "label": "trueExpression",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "AssignmentExpressionNoIn"
                  }
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "Literal",
                  "Literal": ":",
                  "ignoreCase": false
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "labeled",
                  "label": "falseExpression",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "AssignmentExpressionNoIn"
                  }
                }
              ]
            },
            "code": "\n      return {\n        type:            \"ConditionalExpression\",\n        condition:       condition,\n        trueExpression:  trueExpression,\n        falseExpression: falseExpression\n      };\n    "
          },
          {
            "type": "rule_ref",
            "identifier": "LogicalORExpressionNoIn"
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "AssignmentExpression",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "action",
            "expression": {
              "type": "Sequence",
              "expressions": [
                {
                  "type": "labeled",
                  "label": "left",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "LeftHandSideExpression"
                  }
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "labeled",
                  "label": "operator",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "AssignmentOperator"
                  }
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "labeled",
                  "label": "right",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "AssignmentExpression"
                  }
                }
              ]
            },
            "code": "\n      return {\n        type:     \"AssignmentExpression\",\n        operator: operator,\n        left:     left,\n        right:    right\n      };\n    "
          },
          {
            "type": "rule_ref",
            "identifier": "ConditionalExpression"
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "AssignmentExpressionNoIn",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "action",
            "expression": {
              "type": "Sequence",
              "expressions": [
                {
                  "type": "labeled",
                  "label": "left",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "LeftHandSideExpression"
                  }
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "labeled",
                  "label": "operator",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "AssignmentOperator"
                  }
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "labeled",
                  "label": "right",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "AssignmentExpressionNoIn"
                  }
                }
              ]
            },
            "code": "\n      return {\n        type:     \"AssignmentExpression\",\n        operator: operator,\n        left:     left,\n        right:    right\n      };\n    "
          },
          {
            "type": "rule_ref",
            "identifier": "ConditionalExpressionNoIn"
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "AssignmentOperator",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "action",
            "expression": {
              "type": "Sequence",
              "expressions": [
                {
                  "type": "Literal",
                  "Literal": "=",
                  "ignoreCase": false
                },
                {
                  "type": "SimpleNot",
                  "expression": {
                    "type": "Literal",
                    "Literal": "=",
                    "ignoreCase": false
                  }
                }
              ]
            },
            "code": " return \"=\"; "
          },
          {
            "type": "Literal",
            "Literal": "*=",
            "ignoreCase": false
          },
          {
            "type": "Literal",
            "Literal": "/=",
            "ignoreCase": false
          },
          {
            "type": "Literal",
            "Literal": "%=",
            "ignoreCase": false
          },
          {
            "type": "Literal",
            "Literal": "+=",
            "ignoreCase": false
          },
          {
            "type": "Literal",
            "Literal": "-=",
            "ignoreCase": false
          },
          {
            "type": "Literal",
            "Literal": "<<=",
            "ignoreCase": false
          },
          {
            "type": "Literal",
            "Literal": ">>=",
            "ignoreCase": false
          },
          {
            "type": "Literal",
            "Literal": ">>>=",
            "ignoreCase": false
          },
          {
            "type": "Literal",
            "Literal": "&=",
            "ignoreCase": false
          },
          {
            "type": "Literal",
            "Literal": "^=",
            "ignoreCase": false
          },
          {
            "type": "Literal",
            "Literal": "|=",
            "ignoreCase": false
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "Expression",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "head",
              "expression": {
                "type": "rule_ref",
                "identifier": "AssignmentExpression"
              }
            },
            {
              "type": "labeled",
              "label": "tail",
              "expression": {
                "type": "ZeroOrMore",
                "expression": {
                  "type": "Sequence",
                  "expressions": [
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "Literal",
                      "Literal": ",",
                      "ignoreCase": false
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "AssignmentExpression"
                    }
                  ]
                }
              }
            }
          ]
        },
        "code": "\n      var result = head;\n      for (var i = 0; i < tail.length; i++) {\n        result = {\n          type:     \"BinaryExpression\",\n          operator: tail[i][1],\n          left:     result,\n          right:    tail[i][3]\n        };\n      }\n      return result;\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "ExpressionNoIn",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "head",
              "expression": {
                "type": "rule_ref",
                "identifier": "AssignmentExpressionNoIn"
              }
            },
            {
              "type": "labeled",
              "label": "tail",
              "expression": {
                "type": "ZeroOrMore",
                "expression": {
                  "type": "Sequence",
                  "expressions": [
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "Literal",
                      "Literal": ",",
                      "ignoreCase": false
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "AssignmentExpressionNoIn"
                    }
                  ]
                }
              }
            }
          ]
        },
        "code": "\n      var result = head;\n      for (var i = 0; i < tail.length; i++) {\n        result = {\n          type:     \"BinaryExpression\",\n          operator: tail[i][1],\n          left:     result,\n          right:    tail[i][3]\n        };\n      }\n      return result;\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "Statement",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "rule_ref",
            "identifier": "Block"
          },
          {
            "type": "rule_ref",
            "identifier": "VariableStatement"
          },
          {
            "type": "rule_ref",
            "identifier": "EmptyStatement"
          },
          {
            "type": "rule_ref",
            "identifier": "ExpressionStatement"
          },
          {
            "type": "rule_ref",
            "identifier": "IfStatement"
          },
          {
            "type": "rule_ref",
            "identifier": "IterationStatement"
          },
          {
            "type": "rule_ref",
            "identifier": "ContinueStatement"
          },
          {
            "type": "rule_ref",
            "identifier": "BreakStatement"
          },
          {
            "type": "rule_ref",
            "identifier": "ReturnStatement"
          },
          {
            "type": "rule_ref",
            "identifier": "WithStatement"
          },
          {
            "type": "rule_ref",
            "identifier": "LabelledStatement"
          },
          {
            "type": "rule_ref",
            "identifier": "SwitchStatement"
          },
          {
            "type": "rule_ref",
            "identifier": "ThrowStatement"
          },
          {
            "type": "rule_ref",
            "identifier": "TryStatement"
          },
          {
            "type": "rule_ref",
            "identifier": "DebuggerStatement"
          },
          {
            "type": "rule_ref",
            "identifier": "FunctionDeclaration"
          },
          {
            "type": "rule_ref",
            "identifier": "FunctionExpression"
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "Block",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "Literal",
              "Literal": "{",
              "ignoreCase": false
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "statements",
              "expression": {
                "type": "Question",
                "expression": {
                  "type": "Sequence",
                  "expressions": [
                    {
                      "type": "rule_ref",
                      "identifier": "StatementList"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    }
                  ]
                }
              }
            },
            {
              "type": "Literal",
              "Literal": "}",
              "ignoreCase": false
            }
          ]
        },
        "code": "\n      return {\n        type:       \"Block\",\n        statements: statements !== \"\" ? statements : []\n      };\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "StatementList",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "head",
              "expression": {
                "type": "rule_ref",
                "identifier": "Statement"
              }
            },
            {
              "type": "labeled",
              "label": "tail",
              "expression": {
                "type": "ZeroOrMore",
                "expression": {
                  "type": "Sequence",
                  "expressions": [
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "Statement"
                    }
                  ]
                }
              }
            }
          ]
        },
        "code": "\n      var result = [head];\n      for (var i = 0; i < tail.length; i++) {\n        result.push(tail[i][1]);\n      }\n      return result;\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "VariableStatement",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "rule_ref",
              "identifier": "VarToken"
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "declarations",
              "expression": {
                "type": "rule_ref",
                "identifier": "VariableDeclarationList"
              }
            },
            {
              "type": "rule_ref",
              "identifier": "EOS"
            }
          ]
        },
        "code": "\n      return {\n        type:         \"VariableStatement\",\n        declarations: declarations\n      };\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "VariableDeclarationList",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "head",
              "expression": {
                "type": "rule_ref",
                "identifier": "VariableDeclaration"
              }
            },
            {
              "type": "labeled",
              "label": "tail",
              "expression": {
                "type": "ZeroOrMore",
                "expression": {
                  "type": "Sequence",
                  "expressions": [
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "Literal",
                      "Literal": ",",
                      "ignoreCase": false
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "VariableDeclaration"
                    }
                  ]
                }
              }
            }
          ]
        },
        "code": "\n      var result = [head];\n      for (var i = 0; i < tail.length; i++) {\n        result.push(tail[i][3]);\n      }\n      return result;\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "VariableDeclarationListNoIn",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "head",
              "expression": {
                "type": "rule_ref",
                "identifier": "VariableDeclarationNoIn"
              }
            },
            {
              "type": "labeled",
              "label": "tail",
              "expression": {
                "type": "ZeroOrMore",
                "expression": {
                  "type": "Sequence",
                  "expressions": [
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "Literal",
                      "Literal": ",",
                      "ignoreCase": false
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "VariableDeclarationNoIn"
                    }
                  ]
                }
              }
            }
          ]
        },
        "code": "\n      var result = [head];\n      for (var i = 0; i < tail.length; i++) {\n        result.push(tail[i][3]);\n      }\n      return result;\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "VariableDeclaration",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "name",
              "expression": {
                "type": "rule_ref",
                "identifier": "Identifier"
              }
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "value",
              "expression": {
                "type": "Question",
                "expression": {
                  "type": "rule_ref",
                  "identifier": "Initialiser"
                }
              }
            }
          ]
        },
        "code": "\n      return {\n        type:  \"VariableDeclaration\",\n        name:  name,\n        value: value !== \"\" ? value : null\n      };\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "VariableDeclarationNoIn",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "name",
              "expression": {
                "type": "rule_ref",
                "identifier": "Identifier"
              }
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "value",
              "expression": {
                "type": "Question",
                "expression": {
                  "type": "rule_ref",
                  "identifier": "InitialiserNoIn"
                }
              }
            }
          ]
        },
        "code": "\n      return {\n        type:  \"VariableDeclaration\",\n        name:  name,\n        value: value !== \"\" ? value : null\n      };\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "Initialiser",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "Literal",
              "Literal": "=",
              "ignoreCase": false
            },
            {
              "type": "SimpleNot",
              "expression": {
                "type": "Literal",
                "Literal": "=",
                "ignoreCase": false
              }
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "expression",
              "expression": {
                "type": "rule_ref",
                "identifier": "AssignmentExpression"
              }
            }
          ]
        },
        "code": " return expression; "
      }
    },
    {
      "type": "rule",
      "identifier": "InitialiserNoIn",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "Literal",
              "Literal": "=",
              "ignoreCase": false
            },
            {
              "type": "SimpleNot",
              "expression": {
                "type": "Literal",
                "Literal": "=",
                "ignoreCase": false
              }
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "expression",
              "expression": {
                "type": "rule_ref",
                "identifier": "AssignmentExpressionNoIn"
              }
            }
          ]
        },
        "code": " return expression; "
      }
    },
    {
      "type": "rule",
      "identifier": "EmptyStatement",
      "description": {
        "type": "action",
        "expression": {
          "type": "Literal",
          "Literal": ";",
          "ignoreCase": false
        },
        "code": " return { type: \"EmptyStatement\" }; "
      }
    },
    {
      "type": "rule",
      "identifier": "ExpressionStatement",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "SimpleNot",
              "expression": {
                "type": "Choice",
                "expressions": [
                  {
                    "type": "Literal",
                    "Literal": "{",
                    "ignoreCase": false
                  },
                  {
                    "type": "rule_ref",
                    "identifier": "FunctionToken"
                  }
                ]
              }
            },
            {
              "type": "labeled",
              "label": "expression",
              "expression": {
                "type": "rule_ref",
                "identifier": "Expression"
              }
            },
            {
              "type": "rule_ref",
              "identifier": "EOS"
            }
          ]
        },
        "code": " return expression; "
      }
    },
    {
      "type": "rule",
      "identifier": "IfStatement",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "rule_ref",
              "identifier": "IfToken"
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "Literal",
              "Literal": "(",
              "ignoreCase": false
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "condition",
              "expression": {
                "type": "rule_ref",
                "identifier": "Expression"
              }
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "Literal",
              "Literal": ")",
              "ignoreCase": false
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "ifStatement",
              "expression": {
                "type": "rule_ref",
                "identifier": "Statement"
              }
            },
            {
              "type": "labeled",
              "label": "elseStatement",
              "expression": {
                "type": "Question",
                "expression": {
                  "type": "Sequence",
                  "expressions": [
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "ElseToken"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "Statement"
                    }
                  ]
                }
              }
            }
          ]
        },
        "code": "\n      return {\n        type:          \"IfStatement\",\n        condition:     condition,\n        ifStatement:   ifStatement,\n        elseStatement: elseStatement !== \"\" ? elseStatement[3] : null\n      };\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "IterationStatement",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "rule_ref",
            "identifier": "DoWhileStatement"
          },
          {
            "type": "rule_ref",
            "identifier": "WhileStatement"
          },
          {
            "type": "rule_ref",
            "identifier": "ForStatement"
          },
          {
            "type": "rule_ref",
            "identifier": "ForInStatement"
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "DoWhileStatement",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "rule_ref",
              "identifier": "DoToken"
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "statement",
              "expression": {
                "type": "rule_ref",
                "identifier": "Statement"
              }
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "rule_ref",
              "identifier": "WhileToken"
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "Literal",
              "Literal": "(",
              "ignoreCase": false
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "condition",
              "expression": {
                "type": "rule_ref",
                "identifier": "Expression"
              }
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "Literal",
              "Literal": ")",
              "ignoreCase": false
            },
            {
              "type": "rule_ref",
              "identifier": "EOS"
            }
          ]
        },
        "code": "\n      return {\n        type: \"DoWhileStatement\",\n        condition: condition,\n        statement: statement\n      };\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "WhileStatement",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "rule_ref",
              "identifier": "WhileToken"
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "Literal",
              "Literal": "(",
              "ignoreCase": false
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "condition",
              "expression": {
                "type": "rule_ref",
                "identifier": "Expression"
              }
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "Literal",
              "Literal": ")",
              "ignoreCase": false
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "statement",
              "expression": {
                "type": "rule_ref",
                "identifier": "Statement"
              }
            }
          ]
        },
        "code": "\n      return {\n        type: \"WhileStatement\",\n        condition: condition,\n        statement: statement\n      };\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "ForStatement",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "rule_ref",
              "identifier": "ForToken"
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "Literal",
              "Literal": "(",
              "ignoreCase": false
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "initializer",
              "expression": {
                "type": "Choice",
                "expressions": [
                  {
                    "type": "action",
                    "expression": {
                      "type": "Sequence",
                      "expressions": [
                        {
                          "type": "rule_ref",
                          "identifier": "VarToken"
                        },
                        {
                          "type": "rule_ref",
                          "identifier": "__"
                        },
                        {
                          "type": "labeled",
                          "label": "declarations",
                          "expression": {
                            "type": "rule_ref",
                            "identifier": "VariableDeclarationListNoIn"
                          }
                        }
                      ]
                    },
                    "code": "\n          return {\n            type:         \"VariableStatement\",\n            declarations: declarations\n          };\n        "
                  },
                  {
                    "type": "Question",
                    "expression": {
                      "type": "rule_ref",
                      "identifier": "ExpressionNoIn"
                    }
                  }
                ]
              }
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "Literal",
              "Literal": ";",
              "ignoreCase": false
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "test",
              "expression": {
                "type": "Question",
                "expression": {
                  "type": "rule_ref",
                  "identifier": "Expression"
                }
              }
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "Literal",
              "Literal": ";",
              "ignoreCase": false
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "counter",
              "expression": {
                "type": "Question",
                "expression": {
                  "type": "rule_ref",
                  "identifier": "Expression"
                }
              }
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "Literal",
              "Literal": ")",
              "ignoreCase": false
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "statement",
              "expression": {
                "type": "rule_ref",
                "identifier": "Statement"
              }
            }
          ]
        },
        "code": "\n      return {\n        type:        \"ForStatement\",\n        initializer: initializer !== \"\" ? initializer : null,\n        test:        test !== \"\" ? test : null,\n        counter:     counter !== \"\" ? counter : null,\n        statement:   statement\n      };\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "ForInStatement",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "rule_ref",
              "identifier": "ForToken"
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "Literal",
              "Literal": "(",
              "ignoreCase": false
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "iterator",
              "expression": {
                "type": "Choice",
                "expressions": [
                  {
                    "type": "action",
                    "expression": {
                      "type": "Sequence",
                      "expressions": [
                        {
                          "type": "rule_ref",
                          "identifier": "VarToken"
                        },
                        {
                          "type": "rule_ref",
                          "identifier": "__"
                        },
                        {
                          "type": "labeled",
                          "label": "declaration",
                          "expression": {
                            "type": "rule_ref",
                            "identifier": "VariableDeclarationNoIn"
                          }
                        }
                      ]
                    },
                    "code": " return declaration; "
                  },
                  {
                    "type": "rule_ref",
                    "identifier": "LeftHandSideExpression"
                  }
                ]
              }
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "rule_ref",
              "identifier": "InToken"
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "collection",
              "expression": {
                "type": "rule_ref",
                "identifier": "Expression"
              }
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "Literal",
              "Literal": ")",
              "ignoreCase": false
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "statement",
              "expression": {
                "type": "rule_ref",
                "identifier": "Statement"
              }
            }
          ]
        },
        "code": "\n      return {\n        type:       \"ForInStatement\",\n        iterator:   iterator,\n        collection: collection,\n        statement:  statement\n      };\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "ContinueStatement",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "rule_ref",
              "identifier": "ContinueToken"
            },
            {
              "type": "rule_ref",
              "identifier": "_"
            },
            {
              "type": "labeled",
              "label": "label",
              "expression": {
                "type": "Choice",
                "expressions": [
                  {
                    "type": "action",
                    "expression": {
                      "type": "Sequence",
                      "expressions": [
                        {
                          "type": "labeled",
                          "label": "identifier",
                          "expression": {
                            "type": "rule_ref",
                            "identifier": "Identifier"
                          }
                        },
                        {
                          "type": "rule_ref",
                          "identifier": "EOS"
                        }
                      ]
                    },
                    "code": " return identifier; "
                  },
                  {
                    "type": "action",
                    "expression": {
                      "type": "rule_ref",
                      "identifier": "EOSNoLineTerminator"
                    },
                    "code": " return \"\";         "
                  }
                ]
              }
            }
          ]
        },
        "code": "\n      return {\n        type:  \"ContinueStatement\",\n        label: label !== \"\" ? label : null\n      };\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "BreakStatement",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "rule_ref",
              "identifier": "BreakToken"
            },
            {
              "type": "rule_ref",
              "identifier": "_"
            },
            {
              "type": "labeled",
              "label": "label",
              "expression": {
                "type": "Choice",
                "expressions": [
                  {
                    "type": "action",
                    "expression": {
                      "type": "Sequence",
                      "expressions": [
                        {
                          "type": "labeled",
                          "label": "identifier",
                          "expression": {
                            "type": "rule_ref",
                            "identifier": "Identifier"
                          }
                        },
                        {
                          "type": "rule_ref",
                          "identifier": "EOS"
                        }
                      ]
                    },
                    "code": " return identifier; "
                  },
                  {
                    "type": "action",
                    "expression": {
                      "type": "rule_ref",
                      "identifier": "EOSNoLineTerminator"
                    },
                    "code": " return \"\"; "
                  }
                ]
              }
            }
          ]
        },
        "code": "\n      return {\n        type:  \"BreakStatement\",\n        label: label !== \"\" ? label : null\n      };\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "ReturnStatement",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "rule_ref",
              "identifier": "ReturnToken"
            },
            {
              "type": "rule_ref",
              "identifier": "_"
            },
            {
              "type": "labeled",
              "label": "value",
              "expression": {
                "type": "Choice",
                "expressions": [
                  {
                    "type": "action",
                    "expression": {
                      "type": "Sequence",
                      "expressions": [
                        {
                          "type": "labeled",
                          "label": "expression",
                          "expression": {
                            "type": "rule_ref",
                            "identifier": "Expression"
                          }
                        },
                        {
                          "type": "rule_ref",
                          "identifier": "EOS"
                        }
                      ]
                    },
                    "code": " return expression; "
                  },
                  {
                    "type": "action",
                    "expression": {
                      "type": "rule_ref",
                      "identifier": "EOSNoLineTerminator"
                    },
                    "code": " return \"\"; "
                  }
                ]
              }
            }
          ]
        },
        "code": "\n      return {\n        type:  \"ReturnStatement\",\n        value: value !== \"\" ? value : null\n      };\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "WithStatement",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "rule_ref",
              "identifier": "WithToken"
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "Literal",
              "Literal": "(",
              "ignoreCase": false
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "environment",
              "expression": {
                "type": "rule_ref",
                "identifier": "Expression"
              }
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "Literal",
              "Literal": ")",
              "ignoreCase": false
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "statement",
              "expression": {
                "type": "rule_ref",
                "identifier": "Statement"
              }
            }
          ]
        },
        "code": "\n      return {\n        type:        \"WithStatement\",\n        environment: environment,\n        statement:   statement\n      };\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "SwitchStatement",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "rule_ref",
              "identifier": "SwitchToken"
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "Literal",
              "Literal": "(",
              "ignoreCase": false
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "expression",
              "expression": {
                "type": "rule_ref",
                "identifier": "Expression"
              }
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "Literal",
              "Literal": ")",
              "ignoreCase": false
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "clauses",
              "expression": {
                "type": "rule_ref",
                "identifier": "CaseBlock"
              }
            }
          ]
        },
        "code": "\n      return {\n        type:       \"SwitchStatement\",\n        expression: expression,\n        clauses:    clauses\n      };\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "CaseBlock",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "Literal",
              "Literal": "{",
              "ignoreCase": false
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "before",
              "expression": {
                "type": "Question",
                "expression": {
                  "type": "rule_ref",
                  "identifier": "CaseClauses"
                }
              }
            },
            {
              "type": "labeled",
              "label": "defaultAndAfter",
              "expression": {
                "type": "Question",
                "expression": {
                  "type": "Sequence",
                  "expressions": [
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "DefaultClause"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "Question",
                      "expression": {
                        "type": "rule_ref",
                        "identifier": "CaseClauses"
                      }
                    }
                  ]
                }
              }
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "Literal",
              "Literal": "}",
              "ignoreCase": false
            }
          ]
        },
        "code": "\n      var before = before !== \"\" ? before : [];\n      if (defaultAndAfter !== \"\") {\n        var defaultClause = defaultAndAfter[1];\n        var clausesAfter = defaultAndAfter[3] !== \"\"\n          ? defaultAndAfter[3]\n          : [];\n      } else {\n        var defaultClause = null;\n        var clausesAfter = [];\n      }\n\n      return (defaultClause ? before.concat(defaultClause) : before).concat(clausesAfter);\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "CaseClauses",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "head",
              "expression": {
                "type": "rule_ref",
                "identifier": "CaseClause"
              }
            },
            {
              "type": "labeled",
              "label": "tail",
              "expression": {
                "type": "ZeroOrMore",
                "expression": {
                  "type": "Sequence",
                  "expressions": [
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "CaseClause"
                    }
                  ]
                }
              }
            }
          ]
        },
        "code": "\n      var result = [head];\n      for (var i = 0; i < tail.length; i++) {\n        result.push(tail[i][1]);\n      }\n      return result;\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "CaseClause",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "rule_ref",
              "identifier": "CaseToken"
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "selector",
              "expression": {
                "type": "rule_ref",
                "identifier": "Expression"
              }
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "Literal",
              "Literal": ":",
              "ignoreCase": false
            },
            {
              "type": "labeled",
              "label": "statements",
              "expression": {
                "type": "Question",
                "expression": {
                  "type": "Sequence",
                  "expressions": [
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "StatementList"
                    }
                  ]
                }
              }
            }
          ]
        },
        "code": "\n      return {\n        type:       \"CaseClause\",\n        selector:   selector,\n        statements: statements !== \"\" ? statements[1] : []\n      };\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "DefaultClause",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "rule_ref",
              "identifier": "DefaultToken"
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "Literal",
              "Literal": ":",
              "ignoreCase": false
            },
            {
              "type": "labeled",
              "label": "statements",
              "expression": {
                "type": "Question",
                "expression": {
                  "type": "Sequence",
                  "expressions": [
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "StatementList"
                    }
                  ]
                }
              }
            }
          ]
        },
        "code": "\n      return {\n        type:       \"DefaultClause\",\n        statements: statements !== \"\" ? statements[1] : []\n      };\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "LabelledStatement",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "label",
              "expression": {
                "type": "rule_ref",
                "identifier": "Identifier"
              }
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "Literal",
              "Literal": ":",
              "ignoreCase": false
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "statement",
              "expression": {
                "type": "rule_ref",
                "identifier": "Statement"
              }
            }
          ]
        },
        "code": "\n      return {\n        type:      \"LabelledStatement\",\n        label:     label,\n        statement: statement\n      };\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "ThrowStatement",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "rule_ref",
              "identifier": "ThrowToken"
            },
            {
              "type": "rule_ref",
              "identifier": "_"
            },
            {
              "type": "labeled",
              "label": "exception",
              "expression": {
                "type": "rule_ref",
                "identifier": "Expression"
              }
            },
            {
              "type": "rule_ref",
              "identifier": "EOSNoLineTerminator"
            }
          ]
        },
        "code": "\n      return {\n        type:      \"ThrowStatement\",\n        exception: exception\n      };\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "TryStatement",
      "description": {
        "type": "Choice",
        "expressions": [
          {
            "type": "action",
            "expression": {
              "type": "Sequence",
              "expressions": [
                {
                  "type": "rule_ref",
                  "identifier": "TryToken"
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "labeled",
                  "label": "block",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "Block"
                  }
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "labeled",
                  "label": "catch_",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "Catch"
                  }
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "labeled",
                  "label": "finally_",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "Finally"
                  }
                }
              ]
            },
            "code": "\n      return {\n        type:      \"TryStatement\",\n        block:     block,\n        \"catch\":   catch_,\n        \"finally\": finally_\n      };\n    "
          },
          {
            "type": "action",
            "expression": {
              "type": "Sequence",
              "expressions": [
                {
                  "type": "rule_ref",
                  "identifier": "TryToken"
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "labeled",
                  "label": "block",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "Block"
                  }
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "labeled",
                  "label": "catch_",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "Catch"
                  }
                }
              ]
            },
            "code": "\n      return {\n        type:      \"TryStatement\",\n        block:     block,\n        \"catch\":   catch_,\n        \"finally\": null\n      };\n    "
          },
          {
            "type": "action",
            "expression": {
              "type": "Sequence",
              "expressions": [
                {
                  "type": "rule_ref",
                  "identifier": "TryToken"
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "labeled",
                  "label": "block",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "Block"
                  }
                },
                {
                  "type": "rule_ref",
                  "identifier": "__"
                },
                {
                  "type": "labeled",
                  "label": "finally_",
                  "expression": {
                    "type": "rule_ref",
                    "identifier": "Finally"
                  }
                }
              ]
            },
            "code": "\n      return {\n        type:      \"TryStatement\",\n        block:     block,\n        \"catch\":   null,\n        \"finally\": finally_\n      };\n    "
          }
        ]
      }
    },
    {
      "type": "rule",
      "identifier": "Catch",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "rule_ref",
              "identifier": "CatchToken"
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "Literal",
              "Literal": "(",
              "ignoreCase": false
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "identifier",
              "expression": {
                "type": "rule_ref",
                "identifier": "Identifier"
              }
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "Literal",
              "Literal": ")",
              "ignoreCase": false
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "block",
              "expression": {
                "type": "rule_ref",
                "identifier": "Block"
              }
            }
          ]
        },
        "code": "\n      return {\n        type:       \"Catch\",\n        identifier: identifier,\n        block:      block\n      };\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "Finally",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "rule_ref",
              "identifier": "FinallyToken"
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "block",
              "expression": {
                "type": "rule_ref",
                "identifier": "Block"
              }
            }
          ]
        },
        "code": "\n      return {\n        type:  \"Finally\",\n        block: block\n      };\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "DebuggerStatement",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "rule_ref",
              "identifier": "DebuggerToken"
            },
            {
              "type": "rule_ref",
              "identifier": "EOS"
            }
          ]
        },
        "code": " return { type: \"DebuggerStatement\" }; "
      }
    },
    {
      "type": "rule",
      "identifier": "FunctionDeclaration",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "rule_ref",
              "identifier": "FunctionToken"
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "name",
              "expression": {
                "type": "rule_ref",
                "identifier": "Identifier"
              }
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "Literal",
              "Literal": "(",
              "ignoreCase": false
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "params",
              "expression": {
                "type": "Question",
                "expression": {
                  "type": "rule_ref",
                  "identifier": "FormalParameterList"
                }
              }
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "Literal",
              "Literal": ")",
              "ignoreCase": false
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "Literal",
              "Literal": "{",
              "ignoreCase": false
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "elements",
              "expression": {
                "type": "rule_ref",
                "identifier": "FunctionBody"
              }
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "Literal",
              "Literal": "}",
              "ignoreCase": false
            }
          ]
        },
        "code": "\n      return {\n        type:     \"Function\",\n        name:     name,\n        params:   params !== \"\" ? params : [],\n        elements: elements\n      };\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "FunctionExpression",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "rule_ref",
              "identifier": "FunctionToken"
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "name",
              "expression": {
                "type": "Question",
                "expression": {
                  "type": "rule_ref",
                  "identifier": "Identifier"
                }
              }
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "Literal",
              "Literal": "(",
              "ignoreCase": false
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "params",
              "expression": {
                "type": "Question",
                "expression": {
                  "type": "rule_ref",
                  "identifier": "FormalParameterList"
                }
              }
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "Literal",
              "Literal": ")",
              "ignoreCase": false
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "Literal",
              "Literal": "{",
              "ignoreCase": false
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "labeled",
              "label": "elements",
              "expression": {
                "type": "rule_ref",
                "identifier": "FunctionBody"
              }
            },
            {
              "type": "rule_ref",
              "identifier": "__"
            },
            {
              "type": "Literal",
              "Literal": "}",
              "ignoreCase": false
            }
          ]
        },
        "code": "\n      return {\n        type:     \"Function\",\n        name:     name !== \"\" ? name : null,\n        params:   params !== \"\" ? params : [],\n        elements: elements\n      };\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "FormalParameterList",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "head",
              "expression": {
                "type": "rule_ref",
                "identifier": "Identifier"
              }
            },
            {
              "type": "labeled",
              "label": "tail",
              "expression": {
                "type": "ZeroOrMore",
                "expression": {
                  "type": "Sequence",
                  "expressions": [
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "Literal",
                      "Literal": ",",
                      "ignoreCase": false
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "Identifier"
                    }
                  ]
                }
              }
            }
          ]
        },
        "code": "\n      var result = [head];\n      for (var i = 0; i < tail.length; i++) {\n        result.push(tail[i][3]);\n      }\n      return result;\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "FunctionBody",
      "description": {
        "type": "action",
        "expression": {
          "type": "labeled",
          "label": "elements",
          "expression": {
            "type": "Question",
            "expression": {
              "type": "rule_ref",
              "identifier": "SourceElements"
            }
          }
        },
        "code": " return elements !== \"\" ? elements : []; "
      }
    },
    {
      "type": "rule",
      "identifier": "Program",
      "description": {
        "type": "action",
        "expression": {
          "type": "labeled",
          "label": "elements",
          "expression": {
            "type": "Question",
            "expression": {
              "type": "rule_ref",
              "identifier": "SourceElements"
            }
          }
        },
        "code": "\n      return {\n        type:     \"Program\",\n        elements: elements !== \"\" ? elements : []\n      };\n    "
      }
    },
    {
      "type": "rule",
      "identifier": "SourceElements",
      "description": {
        "type": "action",
        "expression": {
          "type": "Sequence",
          "expressions": [
            {
              "type": "labeled",
              "label": "head",
              "expression": {
                "type": "rule_ref",
                "identifier": "Statement"
              }
            },
            {
              "type": "labeled",
              "label": "tail",
              "expression": {
                "type": "ZeroOrMore",
                "expression": {
                  "type": "Sequence",
                  "expressions": [
                    {
                      "type": "rule_ref",
                      "identifier": "__"
                    },
                    {
                      "type": "rule_ref",
                      "identifier": "Statement"
                    }
                  ]
                }
              }
            }
          ]
        },
        "code": "\n      var result = [head];\n      for (var i = 0; i < tail.length; i++) {\n        result.push(tail[i][1]);\n      }\n      return result;\n    "
      }
    }
  ]
}